{"ast":null,"code":"'use strict';\n\nmodule.exports = createLines;\n\nvar createBuffer = require('gl-buffer');\n\nvar createShader = require('gl-shader');\n\nvar shaders = require('./shaders');\n\nfunction Lines(plot, vbo, shader) {\n  this.plot = plot;\n  this.vbo = vbo;\n  this.shader = shader;\n}\n\nvar proto = Lines.prototype;\n\nproto.bind = function () {\n  var shader = this.shader;\n  this.vbo.bind();\n  this.shader.bind();\n  shader.attributes.coord.pointer();\n  shader.uniforms.screenBox = this.plot.screenBox;\n};\n\nproto.drawLine = function () {\n  var start = [0, 0];\n  var end = [0, 0];\n  return function (startX, startY, endX, endY, width, color) {\n    var plot = this.plot;\n    var shader = this.shader;\n    var gl = plot.gl;\n    start[0] = startX;\n    start[1] = startY;\n    end[0] = endX;\n    end[1] = endY;\n    shader.uniforms.start = start;\n    shader.uniforms.end = end;\n    shader.uniforms.width = width * plot.pixelRatio;\n    shader.uniforms.color = color;\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n  };\n}();\n\nproto.dispose = function () {\n  this.vbo.dispose();\n  this.shader.dispose();\n};\n\nfunction createLines(plot) {\n  var gl = plot.gl;\n  var vbo = createBuffer(gl, [-1, -1, -1, 1, 1, -1, 1, 1]);\n  var shader = createShader(gl, shaders.lineVert, shaders.lineFrag);\n  var lines = new Lines(plot, vbo, shader);\n  return lines;\n}","map":{"version":3,"sources":["C:/Users/mikke/VSC/fantasy-django-react/fantasy-django/fantasy-react-app/node_modules/gl-plot2d/lib/line.js"],"names":["module","exports","createLines","createBuffer","require","createShader","shaders","Lines","plot","vbo","shader","proto","prototype","bind","attributes","coord","pointer","uniforms","screenBox","drawLine","start","end","startX","startY","endX","endY","width","color","gl","pixelRatio","drawArrays","TRIANGLE_STRIP","dispose","lineVert","lineFrag","lines"],"mappings":"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","sourcesContent":["'use strict'\r\n\r\nmodule.exports = createLines\r\n\r\nvar createBuffer = require('gl-buffer')\r\nvar createShader = require('gl-shader')\r\n\r\nvar shaders = require('./shaders')\r\n\r\nfunction Lines(plot, vbo, shader) {\r\n  this.plot   = plot\r\n  this.vbo    = vbo\r\n  this.shader = shader\r\n}\r\n\r\nvar proto = Lines.prototype\r\n\r\nproto.bind = function() {\r\n  var shader = this.shader\r\n  this.vbo.bind()\r\n  this.shader.bind()\r\n  shader.attributes.coord.pointer()\r\n  shader.uniforms.screenBox = this.plot.screenBox\r\n}\r\n\r\nproto.drawLine = (function() {\r\n  var start = [0,0]\r\n  var end   = [0,0]\r\n  return function(startX, startY, endX, endY, width, color) {\r\n    var plot       = this.plot\r\n    var shader     = this.shader\r\n    var gl         = plot.gl\r\n\r\n    start[0] = startX\r\n    start[1] = startY\r\n    end[0]   = endX\r\n    end[1]   = endY\r\n\r\n    shader.uniforms.start  = start\r\n    shader.uniforms.end    = end\r\n    shader.uniforms.width  = width * plot.pixelRatio\r\n    shader.uniforms.color  = color\r\n\r\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4)\r\n  }\r\n}())\r\n\r\nproto.dispose = function() {\r\n  this.vbo.dispose()\r\n  this.shader.dispose()\r\n}\r\n\r\nfunction createLines(plot) {\r\n  var gl  = plot.gl\r\n  var vbo = createBuffer(gl, [\r\n    -1,-1,\r\n    -1,1,\r\n    1,-1,\r\n    1,1])\r\n  var shader  = createShader(gl, shaders.lineVert, shaders.lineFrag)\r\n  var lines   = new Lines(plot, vbo, shader)\r\n  return lines\r\n}\r\n"]},"metadata":{},"sourceType":"script"}