{"ast":null,"code":"'use strict';\n\nvar filterOps = require('../../constants/filter_ops');\n\nvar isNumeric = require('fast-isnumeric'); // This syntax conforms to the existing filter transform syntax, but we don't care\n// about open vs. closed intervals for simply drawing contours constraints:\n\n\nmodule.exports = {\n  '[]': makeRangeSettings('[]'),\n  '][': makeRangeSettings(']['),\n  '>': makeInequalitySettings('>'),\n  '<': makeInequalitySettings('<'),\n  '=': makeInequalitySettings('=')\n}; // This does not in any way shape or form support calendars. It's adapted from\n// transforms/filter.js.\n\nfunction coerceValue(operation, value) {\n  var hasArrayValue = Array.isArray(value);\n  var coercedValue;\n\n  function coerce(value) {\n    return isNumeric(value) ? +value : null;\n  }\n\n  if (filterOps.COMPARISON_OPS2.indexOf(operation) !== -1) {\n    coercedValue = hasArrayValue ? coerce(value[0]) : coerce(value);\n  } else if (filterOps.INTERVAL_OPS.indexOf(operation) !== -1) {\n    coercedValue = hasArrayValue ? [coerce(value[0]), coerce(value[1])] : [coerce(value), coerce(value)];\n  } else if (filterOps.SET_OPS.indexOf(operation) !== -1) {\n    coercedValue = hasArrayValue ? value.map(coerce) : [coerce(value)];\n  }\n\n  return coercedValue;\n} // Returns a parabola scaled so that the min/max is either +/- 1 and zero at the two values\n// provided. The data is mapped by this function when constructing intervals so that it's\n// very easy to construct contours as normal.\n\n\nfunction makeRangeSettings(operation) {\n  return function (value) {\n    value = coerceValue(operation, value); // Ensure proper ordering:\n\n    var min = Math.min(value[0], value[1]);\n    var max = Math.max(value[0], value[1]);\n    return {\n      start: min,\n      end: max,\n      size: max - min\n    };\n  };\n}\n\nfunction makeInequalitySettings(operation) {\n  return function (value) {\n    value = coerceValue(operation, value);\n    return {\n      start: value,\n      end: Infinity,\n      size: Infinity\n    };\n  };\n}","map":{"version":3,"sources":["C:/Users/mikke/VSC/fantasy-django-react/fantasy-django/fantasy-react-app/node_modules/plotly.js/src/traces/contour/constraint_mapping.js"],"names":["filterOps","require","isNumeric","module","exports","makeRangeSettings","makeInequalitySettings","coerceValue","operation","value","hasArrayValue","Array","isArray","coercedValue","coerce","COMPARISON_OPS2","indexOf","INTERVAL_OPS","SET_OPS","map","min","Math","max","start","end","size","Infinity"],"mappings":"AAAA;;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,4BAAD,CAAvB;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,gBAAD,CAAvB,C,CAEA;AACA;;;AACAE,MAAM,CAACC,OAAP,GAAiB;AACb,QAAMC,iBAAiB,CAAC,IAAD,CADV;AAEb,QAAMA,iBAAiB,CAAC,IAAD,CAFV;AAGb,OAAKC,sBAAsB,CAAC,GAAD,CAHd;AAIb,OAAKA,sBAAsB,CAAC,GAAD,CAJd;AAKb,OAAKA,sBAAsB,CAAC,GAAD;AALd,CAAjB,C,CAQA;AACA;;AACA,SAASC,WAAT,CAAqBC,SAArB,EAAgCC,KAAhC,EAAuC;AACnC,MAAIC,aAAa,GAAGC,KAAK,CAACC,OAAN,CAAcH,KAAd,CAApB;AAEA,MAAII,YAAJ;;AAEA,WAASC,MAAT,CAAgBL,KAAhB,EAAuB;AACnB,WAAOP,SAAS,CAACO,KAAD,CAAT,GAAoB,CAACA,KAArB,GAA8B,IAArC;AACH;;AAED,MAAGT,SAAS,CAACe,eAAV,CAA0BC,OAA1B,CAAkCR,SAAlC,MAAiD,CAAC,CAArD,EAAwD;AACpDK,IAAAA,YAAY,GAAGH,aAAa,GAAGI,MAAM,CAACL,KAAK,CAAC,CAAD,CAAN,CAAT,GAAsBK,MAAM,CAACL,KAAD,CAAxD;AACH,GAFD,MAEO,IAAGT,SAAS,CAACiB,YAAV,CAAuBD,OAAvB,CAA+BR,SAA/B,MAA8C,CAAC,CAAlD,EAAqD;AACxDK,IAAAA,YAAY,GAAGH,aAAa,GACxB,CAACI,MAAM,CAACL,KAAK,CAAC,CAAD,CAAN,CAAP,EAAmBK,MAAM,CAACL,KAAK,CAAC,CAAD,CAAN,CAAzB,CADwB,GAExB,CAACK,MAAM,CAACL,KAAD,CAAP,EAAgBK,MAAM,CAACL,KAAD,CAAtB,CAFJ;AAGH,GAJM,MAIA,IAAGT,SAAS,CAACkB,OAAV,CAAkBF,OAAlB,CAA0BR,SAA1B,MAAyC,CAAC,CAA7C,EAAgD;AACnDK,IAAAA,YAAY,GAAGH,aAAa,GAAGD,KAAK,CAACU,GAAN,CAAUL,MAAV,CAAH,GAAuB,CAACA,MAAM,CAACL,KAAD,CAAP,CAAnD;AACH;;AAED,SAAOI,YAAP;AACH,C,CAED;AACA;AACA;;;AACA,SAASR,iBAAT,CAA2BG,SAA3B,EAAsC;AAClC,SAAO,UAASC,KAAT,EAAgB;AACnBA,IAAAA,KAAK,GAAGF,WAAW,CAACC,SAAD,EAAYC,KAAZ,CAAnB,CADmB,CAGnB;;AACA,QAAIW,GAAG,GAAGC,IAAI,CAACD,GAAL,CAASX,KAAK,CAAC,CAAD,CAAd,EAAmBA,KAAK,CAAC,CAAD,CAAxB,CAAV;AACA,QAAIa,GAAG,GAAGD,IAAI,CAACC,GAAL,CAASb,KAAK,CAAC,CAAD,CAAd,EAAmBA,KAAK,CAAC,CAAD,CAAxB,CAAV;AAEA,WAAO;AACHc,MAAAA,KAAK,EAAEH,GADJ;AAEHI,MAAAA,GAAG,EAAEF,GAFF;AAGHG,MAAAA,IAAI,EAAEH,GAAG,GAAGF;AAHT,KAAP;AAKH,GAZD;AAaH;;AAED,SAASd,sBAAT,CAAgCE,SAAhC,EAA2C;AACvC,SAAO,UAASC,KAAT,EAAgB;AACnBA,IAAAA,KAAK,GAAGF,WAAW,CAACC,SAAD,EAAYC,KAAZ,CAAnB;AAEA,WAAO;AACHc,MAAAA,KAAK,EAAEd,KADJ;AAEHe,MAAAA,GAAG,EAAEE,QAFF;AAGHD,MAAAA,IAAI,EAAEC;AAHH,KAAP;AAKH,GARD;AASH","sourcesContent":["'use strict';\r\n\r\nvar filterOps = require('../../constants/filter_ops');\r\nvar isNumeric = require('fast-isnumeric');\r\n\r\n// This syntax conforms to the existing filter transform syntax, but we don't care\r\n// about open vs. closed intervals for simply drawing contours constraints:\r\nmodule.exports = {\r\n    '[]': makeRangeSettings('[]'),\r\n    '][': makeRangeSettings(']['),\r\n    '>': makeInequalitySettings('>'),\r\n    '<': makeInequalitySettings('<'),\r\n    '=': makeInequalitySettings('=')\r\n};\r\n\r\n// This does not in any way shape or form support calendars. It's adapted from\r\n// transforms/filter.js.\r\nfunction coerceValue(operation, value) {\r\n    var hasArrayValue = Array.isArray(value);\r\n\r\n    var coercedValue;\r\n\r\n    function coerce(value) {\r\n        return isNumeric(value) ? (+value) : null;\r\n    }\r\n\r\n    if(filterOps.COMPARISON_OPS2.indexOf(operation) !== -1) {\r\n        coercedValue = hasArrayValue ? coerce(value[0]) : coerce(value);\r\n    } else if(filterOps.INTERVAL_OPS.indexOf(operation) !== -1) {\r\n        coercedValue = hasArrayValue ?\r\n            [coerce(value[0]), coerce(value[1])] :\r\n            [coerce(value), coerce(value)];\r\n    } else if(filterOps.SET_OPS.indexOf(operation) !== -1) {\r\n        coercedValue = hasArrayValue ? value.map(coerce) : [coerce(value)];\r\n    }\r\n\r\n    return coercedValue;\r\n}\r\n\r\n// Returns a parabola scaled so that the min/max is either +/- 1 and zero at the two values\r\n// provided. The data is mapped by this function when constructing intervals so that it's\r\n// very easy to construct contours as normal.\r\nfunction makeRangeSettings(operation) {\r\n    return function(value) {\r\n        value = coerceValue(operation, value);\r\n\r\n        // Ensure proper ordering:\r\n        var min = Math.min(value[0], value[1]);\r\n        var max = Math.max(value[0], value[1]);\r\n\r\n        return {\r\n            start: min,\r\n            end: max,\r\n            size: max - min\r\n        };\r\n    };\r\n}\r\n\r\nfunction makeInequalitySettings(operation) {\r\n    return function(value) {\r\n        value = coerceValue(operation, value);\r\n\r\n        return {\r\n            start: value,\r\n            end: Infinity,\r\n            size: Infinity\r\n        };\r\n    };\r\n}\r\n"]},"metadata":{},"sourceType":"script"}