{"ast":null,"code":"'use strict';\n\nvar hovertemplateAttrs = require('../../plots/template_attributes').hovertemplateAttrs;\n\nvar extendFlat = require('../../lib/extend').extendFlat;\n\nvar scatterPolarAttrs = require('../scatterpolar/attributes');\n\nvar barAttrs = require('../bar/attributes');\n\nmodule.exports = {\n  r: scatterPolarAttrs.r,\n  theta: scatterPolarAttrs.theta,\n  r0: scatterPolarAttrs.r0,\n  dr: scatterPolarAttrs.dr,\n  theta0: scatterPolarAttrs.theta0,\n  dtheta: scatterPolarAttrs.dtheta,\n  thetaunit: scatterPolarAttrs.thetaunit,\n  // orientation: {\n  //     valType: 'enumerated',\n  //     values: ['radial', 'angular'],\n  //     editType: 'calc+clearAxisTypes',\n  //     description: 'Sets the orientation of the bars.'\n  // },\n  base: extendFlat({}, barAttrs.base, {\n    description: ['Sets where the bar base is drawn (in radial axis units).', 'In *stack* barmode,', 'traces that set *base* will be excluded', 'and drawn in *overlay* mode instead.'].join(' ')\n  }),\n  offset: extendFlat({}, barAttrs.offset, {\n    description: ['Shifts the angular position where the bar is drawn', '(in *thetatunit* units).'].join(' ')\n  }),\n  width: extendFlat({}, barAttrs.width, {\n    description: ['Sets the bar angular width (in *thetaunit* units).'].join(' ')\n  }),\n  text: extendFlat({}, barAttrs.text, {\n    description: ['Sets hover text elements associated with each bar.', 'If a single string, the same string appears over all bars.', 'If an array of string, the items are mapped in order to the', 'this trace\\'s coordinates.'].join(' ')\n  }),\n  hovertext: extendFlat({}, barAttrs.hovertext, {\n    description: 'Same as `text`.'\n  }),\n  // textposition: {},\n  // textfont: {},\n  // insidetextfont: {},\n  // outsidetextfont: {},\n  // constraintext: {},\n  // cliponaxis: extendFlat({}, barAttrs.cliponaxis, {dflt: false}),\n  marker: barAttrs.marker,\n  hoverinfo: scatterPolarAttrs.hoverinfo,\n  hovertemplate: hovertemplateAttrs(),\n  selected: barAttrs.selected,\n  unselected: barAttrs.unselected // error_x (error_r, error_theta)\n  // error_y\n\n};","map":{"version":3,"sources":["C:/Users/mikke/VSC/fantasy-django-react/fantasy-django/fantasy-react-app/node_modules/plotly.js/src/traces/barpolar/attributes.js"],"names":["hovertemplateAttrs","require","extendFlat","scatterPolarAttrs","barAttrs","module","exports","r","theta","r0","dr","theta0","dtheta","thetaunit","base","description","join","offset","width","text","hovertext","marker","hoverinfo","hovertemplate","selected","unselected"],"mappings":"AAAA;;AAEA,IAAIA,kBAAkB,GAAGC,OAAO,CAAC,iCAAD,CAAP,CAA2CD,kBAApE;;AACA,IAAIE,UAAU,GAAGD,OAAO,CAAC,kBAAD,CAAP,CAA4BC,UAA7C;;AACA,IAAIC,iBAAiB,GAAGF,OAAO,CAAC,4BAAD,CAA/B;;AACA,IAAIG,QAAQ,GAAGH,OAAO,CAAC,mBAAD,CAAtB;;AAEAI,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,CAAC,EAAEJ,iBAAiB,CAACI,CADR;AAEbC,EAAAA,KAAK,EAAEL,iBAAiB,CAACK,KAFZ;AAGbC,EAAAA,EAAE,EAAEN,iBAAiB,CAACM,EAHT;AAIbC,EAAAA,EAAE,EAAEP,iBAAiB,CAACO,EAJT;AAKbC,EAAAA,MAAM,EAAER,iBAAiB,CAACQ,MALb;AAMbC,EAAAA,MAAM,EAAET,iBAAiB,CAACS,MANb;AAObC,EAAAA,SAAS,EAAEV,iBAAiB,CAACU,SAPhB;AASb;AACA;AACA;AACA;AACA;AACA;AAEAC,EAAAA,IAAI,EAAEZ,UAAU,CAAC,EAAD,EAAKE,QAAQ,CAACU,IAAd,EAAoB;AAChCC,IAAAA,WAAW,EAAE,CACT,0DADS,EAET,qBAFS,EAGT,yCAHS,EAIT,sCAJS,EAKXC,IALW,CAKN,GALM;AADmB,GAApB,CAhBH;AAwBbC,EAAAA,MAAM,EAAEf,UAAU,CAAC,EAAD,EAAKE,QAAQ,CAACa,MAAd,EAAsB;AACpCF,IAAAA,WAAW,EAAE,CACT,oDADS,EAET,0BAFS,EAGXC,IAHW,CAGN,GAHM;AADuB,GAAtB,CAxBL;AA8BbE,EAAAA,KAAK,EAAEhB,UAAU,CAAC,EAAD,EAAKE,QAAQ,CAACc,KAAd,EAAqB;AAClCH,IAAAA,WAAW,EAAE,CACT,oDADS,EAEXC,IAFW,CAEN,GAFM;AADqB,GAArB,CA9BJ;AAoCbG,EAAAA,IAAI,EAAEjB,UAAU,CAAC,EAAD,EAAKE,QAAQ,CAACe,IAAd,EAAoB;AAChCJ,IAAAA,WAAW,EAAE,CACT,oDADS,EAET,4DAFS,EAGT,6DAHS,EAIT,4BAJS,EAKXC,IALW,CAKN,GALM;AADmB,GAApB,CApCH;AA4CbI,EAAAA,SAAS,EAAElB,UAAU,CAAC,EAAD,EAAKE,QAAQ,CAACgB,SAAd,EAAyB;AAC1CL,IAAAA,WAAW,EAAE;AAD6B,GAAzB,CA5CR;AAgDb;AACA;AACA;AACA;AACA;AACA;AAEAM,EAAAA,MAAM,EAAEjB,QAAQ,CAACiB,MAvDJ;AAyDbC,EAAAA,SAAS,EAAEnB,iBAAiB,CAACmB,SAzDhB;AA0DbC,EAAAA,aAAa,EAAEvB,kBAAkB,EA1DpB;AA4DbwB,EAAAA,QAAQ,EAAEpB,QAAQ,CAACoB,QA5DN;AA6DbC,EAAAA,UAAU,EAAErB,QAAQ,CAACqB,UA7DR,CA+Db;AACA;;AAhEa,CAAjB","sourcesContent":["'use strict';\r\n\r\nvar hovertemplateAttrs = require('../../plots/template_attributes').hovertemplateAttrs;\r\nvar extendFlat = require('../../lib/extend').extendFlat;\r\nvar scatterPolarAttrs = require('../scatterpolar/attributes');\r\nvar barAttrs = require('../bar/attributes');\r\n\r\nmodule.exports = {\r\n    r: scatterPolarAttrs.r,\r\n    theta: scatterPolarAttrs.theta,\r\n    r0: scatterPolarAttrs.r0,\r\n    dr: scatterPolarAttrs.dr,\r\n    theta0: scatterPolarAttrs.theta0,\r\n    dtheta: scatterPolarAttrs.dtheta,\r\n    thetaunit: scatterPolarAttrs.thetaunit,\r\n\r\n    // orientation: {\r\n    //     valType: 'enumerated',\r\n    //     values: ['radial', 'angular'],\r\n    //     editType: 'calc+clearAxisTypes',\r\n    //     description: 'Sets the orientation of the bars.'\r\n    // },\r\n\r\n    base: extendFlat({}, barAttrs.base, {\r\n        description: [\r\n            'Sets where the bar base is drawn (in radial axis units).',\r\n            'In *stack* barmode,',\r\n            'traces that set *base* will be excluded',\r\n            'and drawn in *overlay* mode instead.'\r\n        ].join(' ')\r\n    }),\r\n    offset: extendFlat({}, barAttrs.offset, {\r\n        description: [\r\n            'Shifts the angular position where the bar is drawn',\r\n            '(in *thetatunit* units).'\r\n        ].join(' ')\r\n    }),\r\n    width: extendFlat({}, barAttrs.width, {\r\n        description: [\r\n            'Sets the bar angular width (in *thetaunit* units).'\r\n        ].join(' ')\r\n    }),\r\n\r\n    text: extendFlat({}, barAttrs.text, {\r\n        description: [\r\n            'Sets hover text elements associated with each bar.',\r\n            'If a single string, the same string appears over all bars.',\r\n            'If an array of string, the items are mapped in order to the',\r\n            'this trace\\'s coordinates.'\r\n        ].join(' ')\r\n    }),\r\n    hovertext: extendFlat({}, barAttrs.hovertext, {\r\n        description: 'Same as `text`.'\r\n    }),\r\n\r\n    // textposition: {},\r\n    // textfont: {},\r\n    // insidetextfont: {},\r\n    // outsidetextfont: {},\r\n    // constraintext: {},\r\n    // cliponaxis: extendFlat({}, barAttrs.cliponaxis, {dflt: false}),\r\n\r\n    marker: barAttrs.marker,\r\n\r\n    hoverinfo: scatterPolarAttrs.hoverinfo,\r\n    hovertemplate: hovertemplateAttrs(),\r\n\r\n    selected: barAttrs.selected,\r\n    unselected: barAttrs.unselected\r\n\r\n    // error_x (error_r, error_theta)\r\n    // error_y\r\n};\r\n"]},"metadata":{},"sourceType":"script"}