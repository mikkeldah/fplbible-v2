{"ast":null,"code":"/**\r\n * @module helpers\r\n */\n\n/**\r\n * Earth Radius used with the Harvesine formula and approximates using a spherical (non-ellipsoid) Earth.\r\n *\r\n * @memberof helpers\r\n * @type {number}\r\n */\nexport var earthRadius = 6371008.8;\n/**\r\n * Unit of measurement factors using a spherical (non-ellipsoid) earth radius.\r\n *\r\n * @memberof helpers\r\n * @type {Object}\r\n */\n\nexport var factors = {\n  centimeters: earthRadius * 100,\n  centimetres: earthRadius * 100,\n  degrees: earthRadius / 111325,\n  feet: earthRadius * 3.28084,\n  inches: earthRadius * 39.37,\n  kilometers: earthRadius / 1000,\n  kilometres: earthRadius / 1000,\n  meters: earthRadius,\n  metres: earthRadius,\n  miles: earthRadius / 1609.344,\n  millimeters: earthRadius * 1000,\n  millimetres: earthRadius * 1000,\n  nauticalmiles: earthRadius / 1852,\n  radians: 1,\n  yards: earthRadius * 1.0936\n};\n/**\r\n * Units of measurement factors based on 1 meter.\r\n *\r\n * @memberof helpers\r\n * @type {Object}\r\n */\n\nexport var unitsFactors = {\n  centimeters: 100,\n  centimetres: 100,\n  degrees: 1 / 111325,\n  feet: 3.28084,\n  inches: 39.37,\n  kilometers: 1 / 1000,\n  kilometres: 1 / 1000,\n  meters: 1,\n  metres: 1,\n  miles: 1 / 1609.344,\n  millimeters: 1000,\n  millimetres: 1000,\n  nauticalmiles: 1 / 1852,\n  radians: 1 / earthRadius,\n  yards: 1.0936133\n};\n/**\r\n * Area of measurement factors based on 1 square meter.\r\n *\r\n * @memberof helpers\r\n * @type {Object}\r\n */\n\nexport var areaFactors = {\n  acres: 0.000247105,\n  centimeters: 10000,\n  centimetres: 10000,\n  feet: 10.763910417,\n  hectares: 0.0001,\n  inches: 1550.003100006,\n  kilometers: 0.000001,\n  kilometres: 0.000001,\n  meters: 1,\n  metres: 1,\n  miles: 3.86e-7,\n  millimeters: 1000000,\n  millimetres: 1000000,\n  yards: 1.195990046\n};\n/**\r\n * Wraps a GeoJSON {@link Geometry} in a GeoJSON {@link Feature}.\r\n *\r\n * @name feature\r\n * @param {Geometry} geometry input geometry\r\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\r\n * @param {Object} [options={}] Optional Parameters\r\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\r\n * @param {string|number} [options.id] Identifier associated with the Feature\r\n * @returns {Feature} a GeoJSON Feature\r\n * @example\r\n * var geometry = {\r\n *   \"type\": \"Point\",\r\n *   \"coordinates\": [110, 50]\r\n * };\r\n *\r\n * var feature = turf.feature(geometry);\r\n *\r\n * //=feature\r\n */\n\nexport function feature(geom, properties, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var feat = {\n    type: \"Feature\"\n  };\n\n  if (options.id === 0 || options.id) {\n    feat.id = options.id;\n  }\n\n  if (options.bbox) {\n    feat.bbox = options.bbox;\n  }\n\n  feat.properties = properties || {};\n  feat.geometry = geom;\n  return feat;\n}\n/**\r\n * Creates a GeoJSON {@link Geometry} from a Geometry string type & coordinates.\r\n * For GeometryCollection type use `helpers.geometryCollection`\r\n *\r\n * @name geometry\r\n * @param {string} type Geometry Type\r\n * @param {Array<any>} coordinates Coordinates\r\n * @param {Object} [options={}] Optional Parameters\r\n * @returns {Geometry} a GeoJSON Geometry\r\n * @example\r\n * var type = \"Point\";\r\n * var coordinates = [110, 50];\r\n * var geometry = turf.geometry(type, coordinates);\r\n * // => geometry\r\n */\n\nexport function geometry(type, coordinates, _options) {\n  if (_options === void 0) {\n    _options = {};\n  }\n\n  switch (type) {\n    case \"Point\":\n      return point(coordinates).geometry;\n\n    case \"LineString\":\n      return lineString(coordinates).geometry;\n\n    case \"Polygon\":\n      return polygon(coordinates).geometry;\n\n    case \"MultiPoint\":\n      return multiPoint(coordinates).geometry;\n\n    case \"MultiLineString\":\n      return multiLineString(coordinates).geometry;\n\n    case \"MultiPolygon\":\n      return multiPolygon(coordinates).geometry;\n\n    default:\n      throw new Error(type + \" is invalid\");\n  }\n}\n/**\r\n * Creates a {@link Point} {@link Feature} from a Position.\r\n *\r\n * @name point\r\n * @param {Array<number>} coordinates longitude, latitude position (each in decimal degrees)\r\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\r\n * @param {Object} [options={}] Optional Parameters\r\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\r\n * @param {string|number} [options.id] Identifier associated with the Feature\r\n * @returns {Feature<Point>} a Point feature\r\n * @example\r\n * var point = turf.point([-75.343, 39.984]);\r\n *\r\n * //=point\r\n */\n\nexport function point(coordinates, properties, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (!coordinates) {\n    throw new Error(\"coordinates is required\");\n  }\n\n  if (!Array.isArray(coordinates)) {\n    throw new Error(\"coordinates must be an Array\");\n  }\n\n  if (coordinates.length < 2) {\n    throw new Error(\"coordinates must be at least 2 numbers long\");\n  }\n\n  if (!isNumber(coordinates[0]) || !isNumber(coordinates[1])) {\n    throw new Error(\"coordinates must contain numbers\");\n  }\n\n  var geom = {\n    type: \"Point\",\n    coordinates: coordinates\n  };\n  return feature(geom, properties, options);\n}\n/**\r\n * Creates a {@link Point} {@link FeatureCollection} from an Array of Point coordinates.\r\n *\r\n * @name points\r\n * @param {Array<Array<number>>} coordinates an array of Points\r\n * @param {Object} [properties={}] Translate these properties to each Feature\r\n * @param {Object} [options={}] Optional Parameters\r\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\r\n * associated with the FeatureCollection\r\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\r\n * @returns {FeatureCollection<Point>} Point Feature\r\n * @example\r\n * var points = turf.points([\r\n *   [-75, 39],\r\n *   [-80, 45],\r\n *   [-78, 50]\r\n * ]);\r\n *\r\n * //=points\r\n */\n\nexport function points(coordinates, properties, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return featureCollection(coordinates.map(function (coords) {\n    return point(coords, properties);\n  }), options);\n}\n/**\r\n * Creates a {@link Polygon} {@link Feature} from an Array of LinearRings.\r\n *\r\n * @name polygon\r\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\r\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\r\n * @param {Object} [options={}] Optional Parameters\r\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\r\n * @param {string|number} [options.id] Identifier associated with the Feature\r\n * @returns {Feature<Polygon>} Polygon Feature\r\n * @example\r\n * var polygon = turf.polygon([[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]], { name: 'poly1' });\r\n *\r\n * //=polygon\r\n */\n\nexport function polygon(coordinates, properties, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  for (var _i = 0, coordinates_1 = coordinates; _i < coordinates_1.length; _i++) {\n    var ring = coordinates_1[_i];\n\n    if (ring.length < 4) {\n      throw new Error(\"Each LinearRing of a Polygon must have 4 or more Positions.\");\n    }\n\n    for (var j = 0; j < ring[ring.length - 1].length; j++) {\n      // Check if first point of Polygon contains two numbers\n      if (ring[ring.length - 1][j] !== ring[0][j]) {\n        throw new Error(\"First and last Position are not equivalent.\");\n      }\n    }\n  }\n\n  var geom = {\n    type: \"Polygon\",\n    coordinates: coordinates\n  };\n  return feature(geom, properties, options);\n}\n/**\r\n * Creates a {@link Polygon} {@link FeatureCollection} from an Array of Polygon coordinates.\r\n *\r\n * @name polygons\r\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygon coordinates\r\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\r\n * @param {Object} [options={}] Optional Parameters\r\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\r\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\r\n * @returns {FeatureCollection<Polygon>} Polygon FeatureCollection\r\n * @example\r\n * var polygons = turf.polygons([\r\n *   [[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]],\r\n *   [[[-15, 42], [-14, 46], [-12, 41], [-17, 44], [-15, 42]]],\r\n * ]);\r\n *\r\n * //=polygons\r\n */\n\nexport function polygons(coordinates, properties, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return featureCollection(coordinates.map(function (coords) {\n    return polygon(coords, properties);\n  }), options);\n}\n/**\r\n * Creates a {@link LineString} {@link Feature} from an Array of Positions.\r\n *\r\n * @name lineString\r\n * @param {Array<Array<number>>} coordinates an array of Positions\r\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\r\n * @param {Object} [options={}] Optional Parameters\r\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\r\n * @param {string|number} [options.id] Identifier associated with the Feature\r\n * @returns {Feature<LineString>} LineString Feature\r\n * @example\r\n * var linestring1 = turf.lineString([[-24, 63], [-23, 60], [-25, 65], [-20, 69]], {name: 'line 1'});\r\n * var linestring2 = turf.lineString([[-14, 43], [-13, 40], [-15, 45], [-10, 49]], {name: 'line 2'});\r\n *\r\n * //=linestring1\r\n * //=linestring2\r\n */\n\nexport function lineString(coordinates, properties, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (coordinates.length < 2) {\n    throw new Error(\"coordinates must be an array of two or more positions\");\n  }\n\n  var geom = {\n    type: \"LineString\",\n    coordinates: coordinates\n  };\n  return feature(geom, properties, options);\n}\n/**\r\n * Creates a {@link LineString} {@link FeatureCollection} from an Array of LineString coordinates.\r\n *\r\n * @name lineStrings\r\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\r\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\r\n * @param {Object} [options={}] Optional Parameters\r\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\r\n * associated with the FeatureCollection\r\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\r\n * @returns {FeatureCollection<LineString>} LineString FeatureCollection\r\n * @example\r\n * var linestrings = turf.lineStrings([\r\n *   [[-24, 63], [-23, 60], [-25, 65], [-20, 69]],\r\n *   [[-14, 43], [-13, 40], [-15, 45], [-10, 49]]\r\n * ]);\r\n *\r\n * //=linestrings\r\n */\n\nexport function lineStrings(coordinates, properties, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return featureCollection(coordinates.map(function (coords) {\n    return lineString(coords, properties);\n  }), options);\n}\n/**\r\n * Takes one or more {@link Feature|Features} and creates a {@link FeatureCollection}.\r\n *\r\n * @name featureCollection\r\n * @param {Feature[]} features input features\r\n * @param {Object} [options={}] Optional Parameters\r\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\r\n * @param {string|number} [options.id] Identifier associated with the Feature\r\n * @returns {FeatureCollection} FeatureCollection of Features\r\n * @example\r\n * var locationA = turf.point([-75.343, 39.984], {name: 'Location A'});\r\n * var locationB = turf.point([-75.833, 39.284], {name: 'Location B'});\r\n * var locationC = turf.point([-75.534, 39.123], {name: 'Location C'});\r\n *\r\n * var collection = turf.featureCollection([\r\n *   locationA,\r\n *   locationB,\r\n *   locationC\r\n * ]);\r\n *\r\n * //=collection\r\n */\n\nexport function featureCollection(features, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var fc = {\n    type: \"FeatureCollection\"\n  };\n\n  if (options.id) {\n    fc.id = options.id;\n  }\n\n  if (options.bbox) {\n    fc.bbox = options.bbox;\n  }\n\n  fc.features = features;\n  return fc;\n}\n/**\r\n * Creates a {@link Feature<MultiLineString>} based on a\r\n * coordinate array. Properties can be added optionally.\r\n *\r\n * @name multiLineString\r\n * @param {Array<Array<Array<number>>>} coordinates an array of LineStrings\r\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\r\n * @param {Object} [options={}] Optional Parameters\r\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\r\n * @param {string|number} [options.id] Identifier associated with the Feature\r\n * @returns {Feature<MultiLineString>} a MultiLineString feature\r\n * @throws {Error} if no coordinates are passed\r\n * @example\r\n * var multiLine = turf.multiLineString([[[0,0],[10,10]]]);\r\n *\r\n * //=multiLine\r\n */\n\nexport function multiLineString(coordinates, properties, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var geom = {\n    type: \"MultiLineString\",\n    coordinates: coordinates\n  };\n  return feature(geom, properties, options);\n}\n/**\r\n * Creates a {@link Feature<MultiPoint>} based on a\r\n * coordinate array. Properties can be added optionally.\r\n *\r\n * @name multiPoint\r\n * @param {Array<Array<number>>} coordinates an array of Positions\r\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\r\n * @param {Object} [options={}] Optional Parameters\r\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\r\n * @param {string|number} [options.id] Identifier associated with the Feature\r\n * @returns {Feature<MultiPoint>} a MultiPoint feature\r\n * @throws {Error} if no coordinates are passed\r\n * @example\r\n * var multiPt = turf.multiPoint([[0,0],[10,10]]);\r\n *\r\n * //=multiPt\r\n */\n\nexport function multiPoint(coordinates, properties, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var geom = {\n    type: \"MultiPoint\",\n    coordinates: coordinates\n  };\n  return feature(geom, properties, options);\n}\n/**\r\n * Creates a {@link Feature<MultiPolygon>} based on a\r\n * coordinate array. Properties can be added optionally.\r\n *\r\n * @name multiPolygon\r\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygons\r\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\r\n * @param {Object} [options={}] Optional Parameters\r\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\r\n * @param {string|number} [options.id] Identifier associated with the Feature\r\n * @returns {Feature<MultiPolygon>} a multipolygon feature\r\n * @throws {Error} if no coordinates are passed\r\n * @example\r\n * var multiPoly = turf.multiPolygon([[[[0,0],[0,10],[10,10],[10,0],[0,0]]]]);\r\n *\r\n * //=multiPoly\r\n *\r\n */\n\nexport function multiPolygon(coordinates, properties, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var geom = {\n    type: \"MultiPolygon\",\n    coordinates: coordinates\n  };\n  return feature(geom, properties, options);\n}\n/**\r\n * Creates a {@link Feature<GeometryCollection>} based on a\r\n * coordinate array. Properties can be added optionally.\r\n *\r\n * @name geometryCollection\r\n * @param {Array<Geometry>} geometries an array of GeoJSON Geometries\r\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\r\n * @param {Object} [options={}] Optional Parameters\r\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\r\n * @param {string|number} [options.id] Identifier associated with the Feature\r\n * @returns {Feature<GeometryCollection>} a GeoJSON GeometryCollection Feature\r\n * @example\r\n * var pt = turf.geometry(\"Point\", [100, 0]);\r\n * var line = turf.geometry(\"LineString\", [[101, 0], [102, 1]]);\r\n * var collection = turf.geometryCollection([pt, line]);\r\n *\r\n * // => collection\r\n */\n\nexport function geometryCollection(geometries, properties, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var geom = {\n    type: \"GeometryCollection\",\n    geometries: geometries\n  };\n  return feature(geom, properties, options);\n}\n/**\r\n * Round number to precision\r\n *\r\n * @param {number} num Number\r\n * @param {number} [precision=0] Precision\r\n * @returns {number} rounded number\r\n * @example\r\n * turf.round(120.4321)\r\n * //=120\r\n *\r\n * turf.round(120.4321, 2)\r\n * //=120.43\r\n */\n\nexport function round(num, precision) {\n  if (precision === void 0) {\n    precision = 0;\n  }\n\n  if (precision && !(precision >= 0)) {\n    throw new Error(\"precision must be a positive number\");\n  }\n\n  var multiplier = Math.pow(10, precision || 0);\n  return Math.round(num * multiplier) / multiplier;\n}\n/**\r\n * Convert a distance measurement (assuming a spherical Earth) from radians to a more friendly unit.\r\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\r\n *\r\n * @name radiansToLength\r\n * @param {number} radians in radians across the sphere\r\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\r\n * meters, kilometres, kilometers.\r\n * @returns {number} distance\r\n */\n\nexport function radiansToLength(radians, units) {\n  if (units === void 0) {\n    units = \"kilometers\";\n  }\n\n  var factor = factors[units];\n\n  if (!factor) {\n    throw new Error(units + \" units is invalid\");\n  }\n\n  return radians * factor;\n}\n/**\r\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into radians\r\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\r\n *\r\n * @name lengthToRadians\r\n * @param {number} distance in real units\r\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\r\n * meters, kilometres, kilometers.\r\n * @returns {number} radians\r\n */\n\nexport function lengthToRadians(distance, units) {\n  if (units === void 0) {\n    units = \"kilometers\";\n  }\n\n  var factor = factors[units];\n\n  if (!factor) {\n    throw new Error(units + \" units is invalid\");\n  }\n\n  return distance / factor;\n}\n/**\r\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into degrees\r\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, centimeters, kilometres, feet\r\n *\r\n * @name lengthToDegrees\r\n * @param {number} distance in real units\r\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\r\n * meters, kilometres, kilometers.\r\n * @returns {number} degrees\r\n */\n\nexport function lengthToDegrees(distance, units) {\n  return radiansToDegrees(lengthToRadians(distance, units));\n}\n/**\r\n * Converts any bearing angle from the north line direction (positive clockwise)\r\n * and returns an angle between 0-360 degrees (positive clockwise), 0 being the north line\r\n *\r\n * @name bearingToAzimuth\r\n * @param {number} bearing angle, between -180 and +180 degrees\r\n * @returns {number} angle between 0 and 360 degrees\r\n */\n\nexport function bearingToAzimuth(bearing) {\n  var angle = bearing % 360;\n\n  if (angle < 0) {\n    angle += 360;\n  }\n\n  return angle;\n}\n/**\r\n * Converts an angle in radians to degrees\r\n *\r\n * @name radiansToDegrees\r\n * @param {number} radians angle in radians\r\n * @returns {number} degrees between 0 and 360 degrees\r\n */\n\nexport function radiansToDegrees(radians) {\n  var degrees = radians % (2 * Math.PI);\n  return degrees * 180 / Math.PI;\n}\n/**\r\n * Converts an angle in degrees to radians\r\n *\r\n * @name degreesToRadians\r\n * @param {number} degrees angle between 0 and 360 degrees\r\n * @returns {number} angle in radians\r\n */\n\nexport function degreesToRadians(degrees) {\n  var radians = degrees % 360;\n  return radians * Math.PI / 180;\n}\n/**\r\n * Converts a length to the requested unit.\r\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\r\n *\r\n * @param {number} length to be converted\r\n * @param {Units} [originalUnit=\"kilometers\"] of the length\r\n * @param {Units} [finalUnit=\"kilometers\"] returned unit\r\n * @returns {number} the converted length\r\n */\n\nexport function convertLength(length, originalUnit, finalUnit) {\n  if (originalUnit === void 0) {\n    originalUnit = \"kilometers\";\n  }\n\n  if (finalUnit === void 0) {\n    finalUnit = \"kilometers\";\n  }\n\n  if (!(length >= 0)) {\n    throw new Error(\"length must be a positive number\");\n  }\n\n  return radiansToLength(lengthToRadians(length, originalUnit), finalUnit);\n}\n/**\r\n * Converts a area to the requested unit.\r\n * Valid units: kilometers, kilometres, meters, metres, centimetres, millimeters, acres, miles, yards, feet, inches, hectares\r\n * @param {number} area to be converted\r\n * @param {Units} [originalUnit=\"meters\"] of the distance\r\n * @param {Units} [finalUnit=\"kilometers\"] returned unit\r\n * @returns {number} the converted area\r\n */\n\nexport function convertArea(area, originalUnit, finalUnit) {\n  if (originalUnit === void 0) {\n    originalUnit = \"meters\";\n  }\n\n  if (finalUnit === void 0) {\n    finalUnit = \"kilometers\";\n  }\n\n  if (!(area >= 0)) {\n    throw new Error(\"area must be a positive number\");\n  }\n\n  var startFactor = areaFactors[originalUnit];\n\n  if (!startFactor) {\n    throw new Error(\"invalid original units\");\n  }\n\n  var finalFactor = areaFactors[finalUnit];\n\n  if (!finalFactor) {\n    throw new Error(\"invalid final units\");\n  }\n\n  return area / startFactor * finalFactor;\n}\n/**\r\n * isNumber\r\n *\r\n * @param {*} num Number to validate\r\n * @returns {boolean} true/false\r\n * @example\r\n * turf.isNumber(123)\r\n * //=true\r\n * turf.isNumber('foo')\r\n * //=false\r\n */\n\nexport function isNumber(num) {\n  return !isNaN(num) && num !== null && !Array.isArray(num);\n}\n/**\r\n * isObject\r\n *\r\n * @param {*} input variable to validate\r\n * @returns {boolean} true/false\r\n * @example\r\n * turf.isObject({elevation: 10})\r\n * //=true\r\n * turf.isObject('foo')\r\n * //=false\r\n */\n\nexport function isObject(input) {\n  return !!input && input.constructor === Object;\n}\n/**\r\n * Validate BBox\r\n *\r\n * @private\r\n * @param {Array<number>} bbox BBox to validate\r\n * @returns {void}\r\n * @throws Error if BBox is not valid\r\n * @example\r\n * validateBBox([-180, -40, 110, 50])\r\n * //=OK\r\n * validateBBox([-180, -40])\r\n * //=Error\r\n * validateBBox('Foo')\r\n * //=Error\r\n * validateBBox(5)\r\n * //=Error\r\n * validateBBox(null)\r\n * //=Error\r\n * validateBBox(undefined)\r\n * //=Error\r\n */\n\nexport function validateBBox(bbox) {\n  if (!bbox) {\n    throw new Error(\"bbox is required\");\n  }\n\n  if (!Array.isArray(bbox)) {\n    throw new Error(\"bbox must be an Array\");\n  }\n\n  if (bbox.length !== 4 && bbox.length !== 6) {\n    throw new Error(\"bbox must be an Array of 4 or 6 numbers\");\n  }\n\n  bbox.forEach(function (num) {\n    if (!isNumber(num)) {\n      throw new Error(\"bbox must only contain numbers\");\n    }\n  });\n}\n/**\r\n * Validate Id\r\n *\r\n * @private\r\n * @param {string|number} id Id to validate\r\n * @returns {void}\r\n * @throws Error if Id is not valid\r\n * @example\r\n * validateId([-180, -40, 110, 50])\r\n * //=Error\r\n * validateId([-180, -40])\r\n * //=Error\r\n * validateId('Foo')\r\n * //=OK\r\n * validateId(5)\r\n * //=OK\r\n * validateId(null)\r\n * //=Error\r\n * validateId(undefined)\r\n * //=Error\r\n */\n\nexport function validateId(id) {\n  if (!id) {\n    throw new Error(\"id is required\");\n  }\n\n  if ([\"string\", \"number\"].indexOf(typeof id) === -1) {\n    throw new Error(\"id must be a number or a string\");\n  }\n}","map":{"version":3,"sources":["C:/Users/mikke/VSC/fantasy-django-react/fantasy-django/fantasy-react-app/node_modules/@turf/helpers/dist/es/index.js"],"names":["earthRadius","factors","centimeters","centimetres","degrees","feet","inches","kilometers","kilometres","meters","metres","miles","millimeters","millimetres","nauticalmiles","radians","yards","unitsFactors","areaFactors","acres","hectares","feature","geom","properties","options","feat","type","id","bbox","geometry","coordinates","_options","point","lineString","polygon","multiPoint","multiLineString","multiPolygon","Error","Array","isArray","length","isNumber","points","featureCollection","map","coords","_i","coordinates_1","ring","j","polygons","lineStrings","features","fc","geometryCollection","geometries","round","num","precision","multiplier","Math","pow","radiansToLength","units","factor","lengthToRadians","distance","lengthToDegrees","radiansToDegrees","bearingToAzimuth","bearing","angle","PI","degreesToRadians","convertLength","originalUnit","finalUnit","convertArea","area","startFactor","finalFactor","isNaN","isObject","input","constructor","Object","validateBBox","forEach","validateId","indexOf"],"mappings":"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","sourcesContent":["/**\r\n * @module helpers\r\n */\r\n/**\r\n * Earth Radius used with the Harvesine formula and approximates using a spherical (non-ellipsoid) Earth.\r\n *\r\n * @memberof helpers\r\n * @type {number}\r\n */\r\nexport var earthRadius = 6371008.8;\r\n/**\r\n * Unit of measurement factors using a spherical (non-ellipsoid) earth radius.\r\n *\r\n * @memberof helpers\r\n * @type {Object}\r\n */\r\nexport var factors = {\r\n    centimeters: earthRadius * 100,\r\n    centimetres: earthRadius * 100,\r\n    degrees: earthRadius / 111325,\r\n    feet: earthRadius * 3.28084,\r\n    inches: earthRadius * 39.37,\r\n    kilometers: earthRadius / 1000,\r\n    kilometres: earthRadius / 1000,\r\n    meters: earthRadius,\r\n    metres: earthRadius,\r\n    miles: earthRadius / 1609.344,\r\n    millimeters: earthRadius * 1000,\r\n    millimetres: earthRadius * 1000,\r\n    nauticalmiles: earthRadius / 1852,\r\n    radians: 1,\r\n    yards: earthRadius * 1.0936,\r\n};\r\n/**\r\n * Units of measurement factors based on 1 meter.\r\n *\r\n * @memberof helpers\r\n * @type {Object}\r\n */\r\nexport var unitsFactors = {\r\n    centimeters: 100,\r\n    centimetres: 100,\r\n    degrees: 1 / 111325,\r\n    feet: 3.28084,\r\n    inches: 39.37,\r\n    kilometers: 1 / 1000,\r\n    kilometres: 1 / 1000,\r\n    meters: 1,\r\n    metres: 1,\r\n    miles: 1 / 1609.344,\r\n    millimeters: 1000,\r\n    millimetres: 1000,\r\n    nauticalmiles: 1 / 1852,\r\n    radians: 1 / earthRadius,\r\n    yards: 1.0936133,\r\n};\r\n/**\r\n * Area of measurement factors based on 1 square meter.\r\n *\r\n * @memberof helpers\r\n * @type {Object}\r\n */\r\nexport var areaFactors = {\r\n    acres: 0.000247105,\r\n    centimeters: 10000,\r\n    centimetres: 10000,\r\n    feet: 10.763910417,\r\n    hectares: 0.0001,\r\n    inches: 1550.003100006,\r\n    kilometers: 0.000001,\r\n    kilometres: 0.000001,\r\n    meters: 1,\r\n    metres: 1,\r\n    miles: 3.86e-7,\r\n    millimeters: 1000000,\r\n    millimetres: 1000000,\r\n    yards: 1.195990046,\r\n};\r\n/**\r\n * Wraps a GeoJSON {@link Geometry} in a GeoJSON {@link Feature}.\r\n *\r\n * @name feature\r\n * @param {Geometry} geometry input geometry\r\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\r\n * @param {Object} [options={}] Optional Parameters\r\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\r\n * @param {string|number} [options.id] Identifier associated with the Feature\r\n * @returns {Feature} a GeoJSON Feature\r\n * @example\r\n * var geometry = {\r\n *   \"type\": \"Point\",\r\n *   \"coordinates\": [110, 50]\r\n * };\r\n *\r\n * var feature = turf.feature(geometry);\r\n *\r\n * //=feature\r\n */\r\nexport function feature(geom, properties, options) {\r\n    if (options === void 0) { options = {}; }\r\n    var feat = { type: \"Feature\" };\r\n    if (options.id === 0 || options.id) {\r\n        feat.id = options.id;\r\n    }\r\n    if (options.bbox) {\r\n        feat.bbox = options.bbox;\r\n    }\r\n    feat.properties = properties || {};\r\n    feat.geometry = geom;\r\n    return feat;\r\n}\r\n/**\r\n * Creates a GeoJSON {@link Geometry} from a Geometry string type & coordinates.\r\n * For GeometryCollection type use `helpers.geometryCollection`\r\n *\r\n * @name geometry\r\n * @param {string} type Geometry Type\r\n * @param {Array<any>} coordinates Coordinates\r\n * @param {Object} [options={}] Optional Parameters\r\n * @returns {Geometry} a GeoJSON Geometry\r\n * @example\r\n * var type = \"Point\";\r\n * var coordinates = [110, 50];\r\n * var geometry = turf.geometry(type, coordinates);\r\n * // => geometry\r\n */\r\nexport function geometry(type, coordinates, _options) {\r\n    if (_options === void 0) { _options = {}; }\r\n    switch (type) {\r\n        case \"Point\":\r\n            return point(coordinates).geometry;\r\n        case \"LineString\":\r\n            return lineString(coordinates).geometry;\r\n        case \"Polygon\":\r\n            return polygon(coordinates).geometry;\r\n        case \"MultiPoint\":\r\n            return multiPoint(coordinates).geometry;\r\n        case \"MultiLineString\":\r\n            return multiLineString(coordinates).geometry;\r\n        case \"MultiPolygon\":\r\n            return multiPolygon(coordinates).geometry;\r\n        default:\r\n            throw new Error(type + \" is invalid\");\r\n    }\r\n}\r\n/**\r\n * Creates a {@link Point} {@link Feature} from a Position.\r\n *\r\n * @name point\r\n * @param {Array<number>} coordinates longitude, latitude position (each in decimal degrees)\r\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\r\n * @param {Object} [options={}] Optional Parameters\r\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\r\n * @param {string|number} [options.id] Identifier associated with the Feature\r\n * @returns {Feature<Point>} a Point feature\r\n * @example\r\n * var point = turf.point([-75.343, 39.984]);\r\n *\r\n * //=point\r\n */\r\nexport function point(coordinates, properties, options) {\r\n    if (options === void 0) { options = {}; }\r\n    if (!coordinates) {\r\n        throw new Error(\"coordinates is required\");\r\n    }\r\n    if (!Array.isArray(coordinates)) {\r\n        throw new Error(\"coordinates must be an Array\");\r\n    }\r\n    if (coordinates.length < 2) {\r\n        throw new Error(\"coordinates must be at least 2 numbers long\");\r\n    }\r\n    if (!isNumber(coordinates[0]) || !isNumber(coordinates[1])) {\r\n        throw new Error(\"coordinates must contain numbers\");\r\n    }\r\n    var geom = {\r\n        type: \"Point\",\r\n        coordinates: coordinates,\r\n    };\r\n    return feature(geom, properties, options);\r\n}\r\n/**\r\n * Creates a {@link Point} {@link FeatureCollection} from an Array of Point coordinates.\r\n *\r\n * @name points\r\n * @param {Array<Array<number>>} coordinates an array of Points\r\n * @param {Object} [properties={}] Translate these properties to each Feature\r\n * @param {Object} [options={}] Optional Parameters\r\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\r\n * associated with the FeatureCollection\r\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\r\n * @returns {FeatureCollection<Point>} Point Feature\r\n * @example\r\n * var points = turf.points([\r\n *   [-75, 39],\r\n *   [-80, 45],\r\n *   [-78, 50]\r\n * ]);\r\n *\r\n * //=points\r\n */\r\nexport function points(coordinates, properties, options) {\r\n    if (options === void 0) { options = {}; }\r\n    return featureCollection(coordinates.map(function (coords) {\r\n        return point(coords, properties);\r\n    }), options);\r\n}\r\n/**\r\n * Creates a {@link Polygon} {@link Feature} from an Array of LinearRings.\r\n *\r\n * @name polygon\r\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\r\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\r\n * @param {Object} [options={}] Optional Parameters\r\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\r\n * @param {string|number} [options.id] Identifier associated with the Feature\r\n * @returns {Feature<Polygon>} Polygon Feature\r\n * @example\r\n * var polygon = turf.polygon([[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]], { name: 'poly1' });\r\n *\r\n * //=polygon\r\n */\r\nexport function polygon(coordinates, properties, options) {\r\n    if (options === void 0) { options = {}; }\r\n    for (var _i = 0, coordinates_1 = coordinates; _i < coordinates_1.length; _i++) {\r\n        var ring = coordinates_1[_i];\r\n        if (ring.length < 4) {\r\n            throw new Error(\"Each LinearRing of a Polygon must have 4 or more Positions.\");\r\n        }\r\n        for (var j = 0; j < ring[ring.length - 1].length; j++) {\r\n            // Check if first point of Polygon contains two numbers\r\n            if (ring[ring.length - 1][j] !== ring[0][j]) {\r\n                throw new Error(\"First and last Position are not equivalent.\");\r\n            }\r\n        }\r\n    }\r\n    var geom = {\r\n        type: \"Polygon\",\r\n        coordinates: coordinates,\r\n    };\r\n    return feature(geom, properties, options);\r\n}\r\n/**\r\n * Creates a {@link Polygon} {@link FeatureCollection} from an Array of Polygon coordinates.\r\n *\r\n * @name polygons\r\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygon coordinates\r\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\r\n * @param {Object} [options={}] Optional Parameters\r\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\r\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\r\n * @returns {FeatureCollection<Polygon>} Polygon FeatureCollection\r\n * @example\r\n * var polygons = turf.polygons([\r\n *   [[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]],\r\n *   [[[-15, 42], [-14, 46], [-12, 41], [-17, 44], [-15, 42]]],\r\n * ]);\r\n *\r\n * //=polygons\r\n */\r\nexport function polygons(coordinates, properties, options) {\r\n    if (options === void 0) { options = {}; }\r\n    return featureCollection(coordinates.map(function (coords) {\r\n        return polygon(coords, properties);\r\n    }), options);\r\n}\r\n/**\r\n * Creates a {@link LineString} {@link Feature} from an Array of Positions.\r\n *\r\n * @name lineString\r\n * @param {Array<Array<number>>} coordinates an array of Positions\r\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\r\n * @param {Object} [options={}] Optional Parameters\r\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\r\n * @param {string|number} [options.id] Identifier associated with the Feature\r\n * @returns {Feature<LineString>} LineString Feature\r\n * @example\r\n * var linestring1 = turf.lineString([[-24, 63], [-23, 60], [-25, 65], [-20, 69]], {name: 'line 1'});\r\n * var linestring2 = turf.lineString([[-14, 43], [-13, 40], [-15, 45], [-10, 49]], {name: 'line 2'});\r\n *\r\n * //=linestring1\r\n * //=linestring2\r\n */\r\nexport function lineString(coordinates, properties, options) {\r\n    if (options === void 0) { options = {}; }\r\n    if (coordinates.length < 2) {\r\n        throw new Error(\"coordinates must be an array of two or more positions\");\r\n    }\r\n    var geom = {\r\n        type: \"LineString\",\r\n        coordinates: coordinates,\r\n    };\r\n    return feature(geom, properties, options);\r\n}\r\n/**\r\n * Creates a {@link LineString} {@link FeatureCollection} from an Array of LineString coordinates.\r\n *\r\n * @name lineStrings\r\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\r\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\r\n * @param {Object} [options={}] Optional Parameters\r\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\r\n * associated with the FeatureCollection\r\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\r\n * @returns {FeatureCollection<LineString>} LineString FeatureCollection\r\n * @example\r\n * var linestrings = turf.lineStrings([\r\n *   [[-24, 63], [-23, 60], [-25, 65], [-20, 69]],\r\n *   [[-14, 43], [-13, 40], [-15, 45], [-10, 49]]\r\n * ]);\r\n *\r\n * //=linestrings\r\n */\r\nexport function lineStrings(coordinates, properties, options) {\r\n    if (options === void 0) { options = {}; }\r\n    return featureCollection(coordinates.map(function (coords) {\r\n        return lineString(coords, properties);\r\n    }), options);\r\n}\r\n/**\r\n * Takes one or more {@link Feature|Features} and creates a {@link FeatureCollection}.\r\n *\r\n * @name featureCollection\r\n * @param {Feature[]} features input features\r\n * @param {Object} [options={}] Optional Parameters\r\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\r\n * @param {string|number} [options.id] Identifier associated with the Feature\r\n * @returns {FeatureCollection} FeatureCollection of Features\r\n * @example\r\n * var locationA = turf.point([-75.343, 39.984], {name: 'Location A'});\r\n * var locationB = turf.point([-75.833, 39.284], {name: 'Location B'});\r\n * var locationC = turf.point([-75.534, 39.123], {name: 'Location C'});\r\n *\r\n * var collection = turf.featureCollection([\r\n *   locationA,\r\n *   locationB,\r\n *   locationC\r\n * ]);\r\n *\r\n * //=collection\r\n */\r\nexport function featureCollection(features, options) {\r\n    if (options === void 0) { options = {}; }\r\n    var fc = { type: \"FeatureCollection\" };\r\n    if (options.id) {\r\n        fc.id = options.id;\r\n    }\r\n    if (options.bbox) {\r\n        fc.bbox = options.bbox;\r\n    }\r\n    fc.features = features;\r\n    return fc;\r\n}\r\n/**\r\n * Creates a {@link Feature<MultiLineString>} based on a\r\n * coordinate array. Properties can be added optionally.\r\n *\r\n * @name multiLineString\r\n * @param {Array<Array<Array<number>>>} coordinates an array of LineStrings\r\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\r\n * @param {Object} [options={}] Optional Parameters\r\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\r\n * @param {string|number} [options.id] Identifier associated with the Feature\r\n * @returns {Feature<MultiLineString>} a MultiLineString feature\r\n * @throws {Error} if no coordinates are passed\r\n * @example\r\n * var multiLine = turf.multiLineString([[[0,0],[10,10]]]);\r\n *\r\n * //=multiLine\r\n */\r\nexport function multiLineString(coordinates, properties, options) {\r\n    if (options === void 0) { options = {}; }\r\n    var geom = {\r\n        type: \"MultiLineString\",\r\n        coordinates: coordinates,\r\n    };\r\n    return feature(geom, properties, options);\r\n}\r\n/**\r\n * Creates a {@link Feature<MultiPoint>} based on a\r\n * coordinate array. Properties can be added optionally.\r\n *\r\n * @name multiPoint\r\n * @param {Array<Array<number>>} coordinates an array of Positions\r\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\r\n * @param {Object} [options={}] Optional Parameters\r\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\r\n * @param {string|number} [options.id] Identifier associated with the Feature\r\n * @returns {Feature<MultiPoint>} a MultiPoint feature\r\n * @throws {Error} if no coordinates are passed\r\n * @example\r\n * var multiPt = turf.multiPoint([[0,0],[10,10]]);\r\n *\r\n * //=multiPt\r\n */\r\nexport function multiPoint(coordinates, properties, options) {\r\n    if (options === void 0) { options = {}; }\r\n    var geom = {\r\n        type: \"MultiPoint\",\r\n        coordinates: coordinates,\r\n    };\r\n    return feature(geom, properties, options);\r\n}\r\n/**\r\n * Creates a {@link Feature<MultiPolygon>} based on a\r\n * coordinate array. Properties can be added optionally.\r\n *\r\n * @name multiPolygon\r\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygons\r\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\r\n * @param {Object} [options={}] Optional Parameters\r\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\r\n * @param {string|number} [options.id] Identifier associated with the Feature\r\n * @returns {Feature<MultiPolygon>} a multipolygon feature\r\n * @throws {Error} if no coordinates are passed\r\n * @example\r\n * var multiPoly = turf.multiPolygon([[[[0,0],[0,10],[10,10],[10,0],[0,0]]]]);\r\n *\r\n * //=multiPoly\r\n *\r\n */\r\nexport function multiPolygon(coordinates, properties, options) {\r\n    if (options === void 0) { options = {}; }\r\n    var geom = {\r\n        type: \"MultiPolygon\",\r\n        coordinates: coordinates,\r\n    };\r\n    return feature(geom, properties, options);\r\n}\r\n/**\r\n * Creates a {@link Feature<GeometryCollection>} based on a\r\n * coordinate array. Properties can be added optionally.\r\n *\r\n * @name geometryCollection\r\n * @param {Array<Geometry>} geometries an array of GeoJSON Geometries\r\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\r\n * @param {Object} [options={}] Optional Parameters\r\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\r\n * @param {string|number} [options.id] Identifier associated with the Feature\r\n * @returns {Feature<GeometryCollection>} a GeoJSON GeometryCollection Feature\r\n * @example\r\n * var pt = turf.geometry(\"Point\", [100, 0]);\r\n * var line = turf.geometry(\"LineString\", [[101, 0], [102, 1]]);\r\n * var collection = turf.geometryCollection([pt, line]);\r\n *\r\n * // => collection\r\n */\r\nexport function geometryCollection(geometries, properties, options) {\r\n    if (options === void 0) { options = {}; }\r\n    var geom = {\r\n        type: \"GeometryCollection\",\r\n        geometries: geometries,\r\n    };\r\n    return feature(geom, properties, options);\r\n}\r\n/**\r\n * Round number to precision\r\n *\r\n * @param {number} num Number\r\n * @param {number} [precision=0] Precision\r\n * @returns {number} rounded number\r\n * @example\r\n * turf.round(120.4321)\r\n * //=120\r\n *\r\n * turf.round(120.4321, 2)\r\n * //=120.43\r\n */\r\nexport function round(num, precision) {\r\n    if (precision === void 0) { precision = 0; }\r\n    if (precision && !(precision >= 0)) {\r\n        throw new Error(\"precision must be a positive number\");\r\n    }\r\n    var multiplier = Math.pow(10, precision || 0);\r\n    return Math.round(num * multiplier) / multiplier;\r\n}\r\n/**\r\n * Convert a distance measurement (assuming a spherical Earth) from radians to a more friendly unit.\r\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\r\n *\r\n * @name radiansToLength\r\n * @param {number} radians in radians across the sphere\r\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\r\n * meters, kilometres, kilometers.\r\n * @returns {number} distance\r\n */\r\nexport function radiansToLength(radians, units) {\r\n    if (units === void 0) { units = \"kilometers\"; }\r\n    var factor = factors[units];\r\n    if (!factor) {\r\n        throw new Error(units + \" units is invalid\");\r\n    }\r\n    return radians * factor;\r\n}\r\n/**\r\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into radians\r\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\r\n *\r\n * @name lengthToRadians\r\n * @param {number} distance in real units\r\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\r\n * meters, kilometres, kilometers.\r\n * @returns {number} radians\r\n */\r\nexport function lengthToRadians(distance, units) {\r\n    if (units === void 0) { units = \"kilometers\"; }\r\n    var factor = factors[units];\r\n    if (!factor) {\r\n        throw new Error(units + \" units is invalid\");\r\n    }\r\n    return distance / factor;\r\n}\r\n/**\r\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into degrees\r\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, centimeters, kilometres, feet\r\n *\r\n * @name lengthToDegrees\r\n * @param {number} distance in real units\r\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\r\n * meters, kilometres, kilometers.\r\n * @returns {number} degrees\r\n */\r\nexport function lengthToDegrees(distance, units) {\r\n    return radiansToDegrees(lengthToRadians(distance, units));\r\n}\r\n/**\r\n * Converts any bearing angle from the north line direction (positive clockwise)\r\n * and returns an angle between 0-360 degrees (positive clockwise), 0 being the north line\r\n *\r\n * @name bearingToAzimuth\r\n * @param {number} bearing angle, between -180 and +180 degrees\r\n * @returns {number} angle between 0 and 360 degrees\r\n */\r\nexport function bearingToAzimuth(bearing) {\r\n    var angle = bearing % 360;\r\n    if (angle < 0) {\r\n        angle += 360;\r\n    }\r\n    return angle;\r\n}\r\n/**\r\n * Converts an angle in radians to degrees\r\n *\r\n * @name radiansToDegrees\r\n * @param {number} radians angle in radians\r\n * @returns {number} degrees between 0 and 360 degrees\r\n */\r\nexport function radiansToDegrees(radians) {\r\n    var degrees = radians % (2 * Math.PI);\r\n    return (degrees * 180) / Math.PI;\r\n}\r\n/**\r\n * Converts an angle in degrees to radians\r\n *\r\n * @name degreesToRadians\r\n * @param {number} degrees angle between 0 and 360 degrees\r\n * @returns {number} angle in radians\r\n */\r\nexport function degreesToRadians(degrees) {\r\n    var radians = degrees % 360;\r\n    return (radians * Math.PI) / 180;\r\n}\r\n/**\r\n * Converts a length to the requested unit.\r\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\r\n *\r\n * @param {number} length to be converted\r\n * @param {Units} [originalUnit=\"kilometers\"] of the length\r\n * @param {Units} [finalUnit=\"kilometers\"] returned unit\r\n * @returns {number} the converted length\r\n */\r\nexport function convertLength(length, originalUnit, finalUnit) {\r\n    if (originalUnit === void 0) { originalUnit = \"kilometers\"; }\r\n    if (finalUnit === void 0) { finalUnit = \"kilometers\"; }\r\n    if (!(length >= 0)) {\r\n        throw new Error(\"length must be a positive number\");\r\n    }\r\n    return radiansToLength(lengthToRadians(length, originalUnit), finalUnit);\r\n}\r\n/**\r\n * Converts a area to the requested unit.\r\n * Valid units: kilometers, kilometres, meters, metres, centimetres, millimeters, acres, miles, yards, feet, inches, hectares\r\n * @param {number} area to be converted\r\n * @param {Units} [originalUnit=\"meters\"] of the distance\r\n * @param {Units} [finalUnit=\"kilometers\"] returned unit\r\n * @returns {number} the converted area\r\n */\r\nexport function convertArea(area, originalUnit, finalUnit) {\r\n    if (originalUnit === void 0) { originalUnit = \"meters\"; }\r\n    if (finalUnit === void 0) { finalUnit = \"kilometers\"; }\r\n    if (!(area >= 0)) {\r\n        throw new Error(\"area must be a positive number\");\r\n    }\r\n    var startFactor = areaFactors[originalUnit];\r\n    if (!startFactor) {\r\n        throw new Error(\"invalid original units\");\r\n    }\r\n    var finalFactor = areaFactors[finalUnit];\r\n    if (!finalFactor) {\r\n        throw new Error(\"invalid final units\");\r\n    }\r\n    return (area / startFactor) * finalFactor;\r\n}\r\n/**\r\n * isNumber\r\n *\r\n * @param {*} num Number to validate\r\n * @returns {boolean} true/false\r\n * @example\r\n * turf.isNumber(123)\r\n * //=true\r\n * turf.isNumber('foo')\r\n * //=false\r\n */\r\nexport function isNumber(num) {\r\n    return !isNaN(num) && num !== null && !Array.isArray(num);\r\n}\r\n/**\r\n * isObject\r\n *\r\n * @param {*} input variable to validate\r\n * @returns {boolean} true/false\r\n * @example\r\n * turf.isObject({elevation: 10})\r\n * //=true\r\n * turf.isObject('foo')\r\n * //=false\r\n */\r\nexport function isObject(input) {\r\n    return !!input && input.constructor === Object;\r\n}\r\n/**\r\n * Validate BBox\r\n *\r\n * @private\r\n * @param {Array<number>} bbox BBox to validate\r\n * @returns {void}\r\n * @throws Error if BBox is not valid\r\n * @example\r\n * validateBBox([-180, -40, 110, 50])\r\n * //=OK\r\n * validateBBox([-180, -40])\r\n * //=Error\r\n * validateBBox('Foo')\r\n * //=Error\r\n * validateBBox(5)\r\n * //=Error\r\n * validateBBox(null)\r\n * //=Error\r\n * validateBBox(undefined)\r\n * //=Error\r\n */\r\nexport function validateBBox(bbox) {\r\n    if (!bbox) {\r\n        throw new Error(\"bbox is required\");\r\n    }\r\n    if (!Array.isArray(bbox)) {\r\n        throw new Error(\"bbox must be an Array\");\r\n    }\r\n    if (bbox.length !== 4 && bbox.length !== 6) {\r\n        throw new Error(\"bbox must be an Array of 4 or 6 numbers\");\r\n    }\r\n    bbox.forEach(function (num) {\r\n        if (!isNumber(num)) {\r\n            throw new Error(\"bbox must only contain numbers\");\r\n        }\r\n    });\r\n}\r\n/**\r\n * Validate Id\r\n *\r\n * @private\r\n * @param {string|number} id Id to validate\r\n * @returns {void}\r\n * @throws Error if Id is not valid\r\n * @example\r\n * validateId([-180, -40, 110, 50])\r\n * //=Error\r\n * validateId([-180, -40])\r\n * //=Error\r\n * validateId('Foo')\r\n * //=OK\r\n * validateId(5)\r\n * //=OK\r\n * validateId(null)\r\n * //=Error\r\n * validateId(undefined)\r\n * //=Error\r\n */\r\nexport function validateId(id) {\r\n    if (!id) {\r\n        throw new Error(\"id is required\");\r\n    }\r\n    if ([\"string\", \"number\"].indexOf(typeof id) === -1) {\r\n        throw new Error(\"id must be a number or a string\");\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}