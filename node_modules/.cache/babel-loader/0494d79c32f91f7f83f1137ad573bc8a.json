{"ast":null,"code":"/*\r\nInput:  translation ; a 3 component vector\r\n        scale       ; a 3 component vector\r\n        skew        ; skew factors XY,XZ,YZ represented as a 3 component vector\r\n        perspective ; a 4 component vector\r\n        quaternion  ; a 4 component vector\r\nOutput: matrix      ; a 4x4 matrix\r\n\r\nFrom: http://www.w3.org/TR/css3-transforms/#recomposing-to-a-3d-matrix\r\n*/\nvar mat4 = {\n  identity: require('gl-mat4/identity'),\n  translate: require('gl-mat4/translate'),\n  multiply: require('gl-mat4/multiply'),\n  create: require('gl-mat4/create'),\n  scale: require('gl-mat4/scale'),\n  fromRotationTranslation: require('gl-mat4/fromRotationTranslation')\n};\nvar rotationMatrix = mat4.create();\nvar temp = mat4.create();\n\nmodule.exports = function recomposeMat4(matrix, translation, scale, skew, perspective, quaternion) {\n  mat4.identity(matrix); //apply translation & rotation\n\n  mat4.fromRotationTranslation(matrix, quaternion, translation); //apply perspective\n\n  matrix[3] = perspective[0];\n  matrix[7] = perspective[1];\n  matrix[11] = perspective[2];\n  matrix[15] = perspective[3]; // apply skew\n  // temp is a identity 4x4 matrix initially\n\n  mat4.identity(temp);\n\n  if (skew[2] !== 0) {\n    temp[9] = skew[2];\n    mat4.multiply(matrix, matrix, temp);\n  }\n\n  if (skew[1] !== 0) {\n    temp[9] = 0;\n    temp[8] = skew[1];\n    mat4.multiply(matrix, matrix, temp);\n  }\n\n  if (skew[0] !== 0) {\n    temp[8] = 0;\n    temp[4] = skew[0];\n    mat4.multiply(matrix, matrix, temp);\n  } //apply scale\n\n\n  mat4.scale(matrix, matrix, scale);\n  return matrix;\n};","map":{"version":3,"sources":["C:/Users/mikke/VSC/fantasy-django-react/fantasy-django/fantasy-react-app/node_modules/mat4-recompose/index.js"],"names":["mat4","identity","require","translate","multiply","create","scale","fromRotationTranslation","rotationMatrix","temp","module","exports","recomposeMat4","matrix","translation","skew","perspective","quaternion"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAIA,IAAI,GAAG;AACPC,EAAAA,QAAQ,EAAEC,OAAO,CAAC,kBAAD,CADV;AAEPC,EAAAA,SAAS,EAAED,OAAO,CAAC,mBAAD,CAFX;AAGPE,EAAAA,QAAQ,EAAEF,OAAO,CAAC,kBAAD,CAHV;AAIPG,EAAAA,MAAM,EAAEH,OAAO,CAAC,gBAAD,CAJR;AAKPI,EAAAA,KAAK,EAAEJ,OAAO,CAAC,eAAD,CALP;AAMPK,EAAAA,uBAAuB,EAAEL,OAAO,CAAC,iCAAD;AANzB,CAAX;AASA,IAAIM,cAAc,GAAGR,IAAI,CAACK,MAAL,EAArB;AACA,IAAII,IAAI,GAAGT,IAAI,CAACK,MAAL,EAAX;;AAEAK,MAAM,CAACC,OAAP,GAAiB,SAASC,aAAT,CAAuBC,MAAvB,EAA+BC,WAA/B,EAA4CR,KAA5C,EAAmDS,IAAnD,EAAyDC,WAAzD,EAAsEC,UAAtE,EAAkF;AAC/FjB,EAAAA,IAAI,CAACC,QAAL,CAAcY,MAAd,EAD+F,CAG/F;;AACAb,EAAAA,IAAI,CAACO,uBAAL,CAA6BM,MAA7B,EAAqCI,UAArC,EAAiDH,WAAjD,EAJ+F,CAM/F;;AACAD,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYG,WAAW,CAAC,CAAD,CAAvB;AACAH,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYG,WAAW,CAAC,CAAD,CAAvB;AACAH,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaG,WAAW,CAAC,CAAD,CAAxB;AACAH,EAAAA,MAAM,CAAC,EAAD,CAAN,GAAaG,WAAW,CAAC,CAAD,CAAxB,CAV+F,CAY/F;AACA;;AACAhB,EAAAA,IAAI,CAACC,QAAL,CAAcQ,IAAd;;AAEA,MAAIM,IAAI,CAAC,CAAD,CAAJ,KAAY,CAAhB,EAAmB;AACfN,IAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUM,IAAI,CAAC,CAAD,CAAd;AACAf,IAAAA,IAAI,CAACI,QAAL,CAAcS,MAAd,EAAsBA,MAAtB,EAA8BJ,IAA9B;AACH;;AAED,MAAIM,IAAI,CAAC,CAAD,CAAJ,KAAY,CAAhB,EAAmB;AACfN,IAAAA,IAAI,CAAC,CAAD,CAAJ,GAAU,CAAV;AACAA,IAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUM,IAAI,CAAC,CAAD,CAAd;AACAf,IAAAA,IAAI,CAACI,QAAL,CAAcS,MAAd,EAAsBA,MAAtB,EAA8BJ,IAA9B;AACH;;AAED,MAAIM,IAAI,CAAC,CAAD,CAAJ,KAAY,CAAhB,EAAmB;AACfN,IAAAA,IAAI,CAAC,CAAD,CAAJ,GAAU,CAAV;AACAA,IAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUM,IAAI,CAAC,CAAD,CAAd;AACAf,IAAAA,IAAI,CAACI,QAAL,CAAcS,MAAd,EAAsBA,MAAtB,EAA8BJ,IAA9B;AACH,GA/B8F,CAiC/F;;;AACAT,EAAAA,IAAI,CAACM,KAAL,CAAWO,MAAX,EAAmBA,MAAnB,EAA2BP,KAA3B;AACA,SAAOO,MAAP;AACH,CApCD","sourcesContent":["/*\r\nInput:  translation ; a 3 component vector\r\n        scale       ; a 3 component vector\r\n        skew        ; skew factors XY,XZ,YZ represented as a 3 component vector\r\n        perspective ; a 4 component vector\r\n        quaternion  ; a 4 component vector\r\nOutput: matrix      ; a 4x4 matrix\r\n\r\nFrom: http://www.w3.org/TR/css3-transforms/#recomposing-to-a-3d-matrix\r\n*/\r\n\r\nvar mat4 = {\r\n    identity: require('gl-mat4/identity'),\r\n    translate: require('gl-mat4/translate'),\r\n    multiply: require('gl-mat4/multiply'),\r\n    create: require('gl-mat4/create'),\r\n    scale: require('gl-mat4/scale'),\r\n    fromRotationTranslation: require('gl-mat4/fromRotationTranslation')\r\n}\r\n\r\nvar rotationMatrix = mat4.create()\r\nvar temp = mat4.create()\r\n\r\nmodule.exports = function recomposeMat4(matrix, translation, scale, skew, perspective, quaternion) {\r\n    mat4.identity(matrix)\r\n\r\n    //apply translation & rotation\r\n    mat4.fromRotationTranslation(matrix, quaternion, translation)\r\n\r\n    //apply perspective\r\n    matrix[3] = perspective[0]\r\n    matrix[7] = perspective[1]\r\n    matrix[11] = perspective[2]\r\n    matrix[15] = perspective[3]\r\n        \r\n    // apply skew\r\n    // temp is a identity 4x4 matrix initially\r\n    mat4.identity(temp)\r\n\r\n    if (skew[2] !== 0) {\r\n        temp[9] = skew[2]\r\n        mat4.multiply(matrix, matrix, temp)\r\n    }\r\n\r\n    if (skew[1] !== 0) {\r\n        temp[9] = 0\r\n        temp[8] = skew[1]\r\n        mat4.multiply(matrix, matrix, temp)\r\n    }\r\n\r\n    if (skew[0] !== 0) {\r\n        temp[8] = 0\r\n        temp[4] = skew[0]\r\n        mat4.multiply(matrix, matrix, temp)\r\n    }\r\n\r\n    //apply scale\r\n    mat4.scale(matrix, matrix, scale)\r\n    return matrix\r\n}"]},"metadata":{},"sourceType":"script"}