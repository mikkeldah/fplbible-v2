{"ast":null,"code":"'use strict';\n\nvar Axes = require('../../plots/cartesian/axes');\n\nvar Lib = require('../../lib');\n\nmodule.exports = function setContours(trace, vals) {\n  var contours = trace.contours; // check if we need to auto-choose contour levels\n\n  if (trace.autocontour) {\n    // N.B. do not try to use coloraxis cmin/cmax,\n    // these values here are meant to remain \"per-trace\" for now\n    var zmin = trace.zmin;\n    var zmax = trace.zmax;\n\n    if (trace.zauto || zmin === undefined) {\n      zmin = Lib.aggNums(Math.min, null, vals);\n    }\n\n    if (trace.zauto || zmax === undefined) {\n      zmax = Lib.aggNums(Math.max, null, vals);\n    }\n\n    var dummyAx = autoContours(zmin, zmax, trace.ncontours);\n    contours.size = dummyAx.dtick;\n    contours.start = Axes.tickFirst(dummyAx);\n    dummyAx.range.reverse();\n    contours.end = Axes.tickFirst(dummyAx);\n    if (contours.start === zmin) contours.start += contours.size;\n    if (contours.end === zmax) contours.end -= contours.size; // if you set a small ncontours, *and* the ends are exactly on zmin/zmax\n    // there's an edge case where start > end now. Make sure there's at least\n    // one meaningful contour, put it midway between the crossed values\n\n    if (contours.start > contours.end) {\n      contours.start = contours.end = (contours.start + contours.end) / 2;\n    } // copy auto-contour info back to the source data.\n    // previously we copied the whole contours object back, but that had\n    // other info (coloring, showlines) that should be left to supplyDefaults\n\n\n    if (!trace._input.contours) trace._input.contours = {};\n    Lib.extendFlat(trace._input.contours, {\n      start: contours.start,\n      end: contours.end,\n      size: contours.size\n    });\n    trace._input.autocontour = true;\n  } else if (contours.type !== 'constraint') {\n    // sanity checks on manually-supplied start/end/size\n    var start = contours.start;\n    var end = contours.end;\n    var inputContours = trace._input.contours;\n\n    if (start > end) {\n      contours.start = inputContours.start = end;\n      end = contours.end = inputContours.end = start;\n      start = contours.start;\n    }\n\n    if (!(contours.size > 0)) {\n      var sizeOut;\n      if (start === end) sizeOut = 1;else sizeOut = autoContours(start, end, trace.ncontours).dtick;\n      inputContours.size = contours.size = sizeOut;\n    }\n  }\n};\n/*\r\n * autoContours: make a dummy axis object with dtick we can use\r\n * as contours.size, and if needed we can use Axes.tickFirst\r\n * with this axis object to calculate the start and end too\r\n *\r\n * start: the value to start the contours at\r\n * end: the value to end at (must be > start)\r\n * ncontours: max number of contours to make, like roughDTick\r\n *\r\n * returns: an axis object\r\n */\n\n\nfunction autoContours(start, end, ncontours) {\n  var dummyAx = {\n    type: 'linear',\n    range: [start, end]\n  };\n  Axes.autoTicks(dummyAx, (end - start) / (ncontours || 15));\n  return dummyAx;\n}","map":{"version":3,"sources":["C:/Users/mikke/VSC/fantasy-django-react/fantasy-django/fantasy-react-app/node_modules/plotly.js/src/traces/contour/set_contours.js"],"names":["Axes","require","Lib","module","exports","setContours","trace","vals","contours","autocontour","zmin","zmax","zauto","undefined","aggNums","Math","min","max","dummyAx","autoContours","ncontours","size","dtick","start","tickFirst","range","reverse","end","_input","extendFlat","type","inputContours","sizeOut","autoTicks"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nvar Axes = require('../../plots/cartesian/axes');\r\nvar Lib = require('../../lib');\r\n\r\nmodule.exports = function setContours(trace, vals) {\r\n    var contours = trace.contours;\r\n\r\n    // check if we need to auto-choose contour levels\r\n    if(trace.autocontour) {\r\n        // N.B. do not try to use coloraxis cmin/cmax,\r\n        // these values here are meant to remain \"per-trace\" for now\r\n        var zmin = trace.zmin;\r\n        var zmax = trace.zmax;\r\n        if(trace.zauto || zmin === undefined) {\r\n            zmin = Lib.aggNums(Math.min, null, vals);\r\n        }\r\n        if(trace.zauto || zmax === undefined) {\r\n            zmax = Lib.aggNums(Math.max, null, vals);\r\n        }\r\n\r\n        var dummyAx = autoContours(zmin, zmax, trace.ncontours);\r\n        contours.size = dummyAx.dtick;\r\n        contours.start = Axes.tickFirst(dummyAx);\r\n        dummyAx.range.reverse();\r\n        contours.end = Axes.tickFirst(dummyAx);\r\n\r\n        if(contours.start === zmin) contours.start += contours.size;\r\n        if(contours.end === zmax) contours.end -= contours.size;\r\n\r\n        // if you set a small ncontours, *and* the ends are exactly on zmin/zmax\r\n        // there's an edge case where start > end now. Make sure there's at least\r\n        // one meaningful contour, put it midway between the crossed values\r\n        if(contours.start > contours.end) {\r\n            contours.start = contours.end = (contours.start + contours.end) / 2;\r\n        }\r\n\r\n        // copy auto-contour info back to the source data.\r\n        // previously we copied the whole contours object back, but that had\r\n        // other info (coloring, showlines) that should be left to supplyDefaults\r\n        if(!trace._input.contours) trace._input.contours = {};\r\n        Lib.extendFlat(trace._input.contours, {\r\n            start: contours.start,\r\n            end: contours.end,\r\n            size: contours.size\r\n        });\r\n        trace._input.autocontour = true;\r\n    } else if(contours.type !== 'constraint') {\r\n        // sanity checks on manually-supplied start/end/size\r\n        var start = contours.start;\r\n        var end = contours.end;\r\n        var inputContours = trace._input.contours;\r\n\r\n        if(start > end) {\r\n            contours.start = inputContours.start = end;\r\n            end = contours.end = inputContours.end = start;\r\n            start = contours.start;\r\n        }\r\n\r\n        if(!(contours.size > 0)) {\r\n            var sizeOut;\r\n            if(start === end) sizeOut = 1;\r\n            else sizeOut = autoContours(start, end, trace.ncontours).dtick;\r\n\r\n            inputContours.size = contours.size = sizeOut;\r\n        }\r\n    }\r\n};\r\n\r\n\r\n/*\r\n * autoContours: make a dummy axis object with dtick we can use\r\n * as contours.size, and if needed we can use Axes.tickFirst\r\n * with this axis object to calculate the start and end too\r\n *\r\n * start: the value to start the contours at\r\n * end: the value to end at (must be > start)\r\n * ncontours: max number of contours to make, like roughDTick\r\n *\r\n * returns: an axis object\r\n */\r\nfunction autoContours(start, end, ncontours) {\r\n    var dummyAx = {\r\n        type: 'linear',\r\n        range: [start, end]\r\n    };\r\n\r\n    Axes.autoTicks(\r\n        dummyAx,\r\n        (end - start) / (ncontours || 15)\r\n    );\r\n\r\n    return dummyAx;\r\n}\r\n"]},"metadata":{},"sourceType":"script"}