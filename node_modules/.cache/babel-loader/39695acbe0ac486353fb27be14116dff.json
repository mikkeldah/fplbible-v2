{"ast":null,"code":"'use strict';\n\nvar baseAttrs = require('../../plots/attributes');\n\nvar hovertemplateAttrs = require('../../plots/template_attributes').hovertemplateAttrs;\n\nvar texttemplateAttrs = require('../../plots/template_attributes').texttemplateAttrs;\n\nvar colorScaleAttrs = require('../../components/colorscale/attributes');\n\nvar domainAttrs = require('../../plots/domain').attributes;\n\nvar pieAttrs = require('../pie/attributes');\n\nvar constants = require('./constants');\n\nvar extendFlat = require('../../lib/extend').extendFlat;\n\nmodule.exports = {\n  labels: {\n    valType: 'data_array',\n    editType: 'calc',\n    description: ['Sets the labels of each of the sectors.'].join(' ')\n  },\n  parents: {\n    valType: 'data_array',\n    editType: 'calc',\n    description: ['Sets the parent sectors for each of the sectors.', 'Empty string items \\'\\' are understood to reference', 'the root node in the hierarchy.', 'If `ids` is filled, `parents` items are understood to be \"ids\" themselves.', 'When `ids` is not set, plotly attempts to find matching items in `labels`,', 'but beware they must be unique.'].join(' ')\n  },\n  values: {\n    valType: 'data_array',\n    editType: 'calc',\n    description: ['Sets the values associated with each of the sectors.', 'Use with `branchvalues` to determine how the values are summed.'].join(' ')\n  },\n  branchvalues: {\n    valType: 'enumerated',\n    values: ['remainder', 'total'],\n    dflt: 'remainder',\n    editType: 'calc',\n    description: ['Determines how the items in `values` are summed.', 'When set to *total*, items in `values` are taken to be value of all its descendants.', 'When set to *remainder*, items in `values` corresponding to the root and the branches sectors', 'are taken to be the extra part not part of the sum of the values at their leaves.'].join(' ')\n  },\n  count: {\n    valType: 'flaglist',\n    flags: ['branches', 'leaves'],\n    dflt: 'leaves',\n    editType: 'calc',\n    description: ['Determines default for `values` when it is not provided,', 'by inferring a 1 for each of the *leaves* and/or *branches*, otherwise 0.'].join(' ')\n  },\n  level: {\n    valType: 'any',\n    editType: 'plot',\n    anim: true,\n    description: ['Sets the level from which this trace hierarchy is rendered.', 'Set `level` to `\\'\\'` to start from the root node in the hierarchy.', 'Must be an \"id\" if `ids` is filled in, otherwise plotly attempts to find a matching', 'item in `labels`.'].join(' ')\n  },\n  maxdepth: {\n    valType: 'integer',\n    editType: 'plot',\n    dflt: -1,\n    description: ['Sets the number of rendered sectors from any given `level`.', 'Set `maxdepth` to *-1* to render all the levels in the hierarchy.'].join(' ')\n  },\n  marker: extendFlat({\n    colors: {\n      valType: 'data_array',\n      editType: 'calc',\n      description: ['Sets the color of each sector of this trace.', 'If not specified, the default trace color set is used', 'to pick the sector colors.'].join(' ')\n    },\n    // colorinheritance: {\n    //     valType: 'enumerated',\n    //     values: ['per-branch', 'per-label', false]\n    // },\n    line: {\n      color: extendFlat({}, pieAttrs.marker.line.color, {\n        dflt: null,\n        description: ['Sets the color of the line enclosing each sector.', 'Defaults to the `paper_bgcolor` value.'].join(' ')\n      }),\n      width: extendFlat({}, pieAttrs.marker.line.width, {\n        dflt: 1\n      }),\n      editType: 'calc'\n    },\n    editType: 'calc'\n  }, colorScaleAttrs('marker', {\n    colorAttr: 'colors',\n    anim: false // TODO: set to anim: true?\n\n  })),\n  leaf: {\n    opacity: {\n      valType: 'number',\n      editType: 'style',\n      min: 0,\n      max: 1,\n      description: ['Sets the opacity of the leaves. With colorscale', 'it is defaulted to 1; otherwise it is defaulted to 0.7'].join(' ')\n    },\n    editType: 'plot'\n  },\n  text: pieAttrs.text,\n  textinfo: {\n    valType: 'flaglist',\n    flags: ['label', 'text', 'value', 'current path', 'percent root', 'percent entry', 'percent parent'],\n    extras: ['none'],\n    editType: 'plot',\n    description: ['Determines which trace information appear on the graph.'].join(' ')\n  },\n  // TODO: incorporate `label` and `value` in the eventData\n  texttemplate: texttemplateAttrs({\n    editType: 'plot'\n  }, {\n    keys: constants.eventDataKeys.concat(['label', 'value'])\n  }),\n  hovertext: pieAttrs.hovertext,\n  hoverinfo: extendFlat({}, baseAttrs.hoverinfo, {\n    flags: ['label', 'text', 'value', 'name', 'current path', 'percent root', 'percent entry', 'percent parent'],\n    dflt: 'label+text+value+name'\n  }),\n  hovertemplate: hovertemplateAttrs({}, {\n    keys: constants.eventDataKeys\n  }),\n  textfont: pieAttrs.textfont,\n  insidetextorientation: pieAttrs.insidetextorientation,\n  insidetextfont: pieAttrs.insidetextfont,\n  outsidetextfont: extendFlat({}, pieAttrs.outsidetextfont, {\n    description: ['Sets the font used for `textinfo` lying outside the sector.', 'This option refers to the root of the hierarchy', 'presented at the center of a sunburst graph.', 'Please note that if a hierarchy has multiple root nodes,', 'this option won\\'t have any effect and `insidetextfont` would be used.'].join(' ')\n  }),\n  rotation: {\n    valType: 'angle',\n    dflt: 0,\n    editType: 'plot',\n    description: ['Rotates the whole diagram counterclockwise by some angle.', 'By default the first slice starts at 3 o\\'clock.'].join(' ')\n  },\n  sort: pieAttrs.sort,\n  root: {\n    color: {\n      valType: 'color',\n      editType: 'calc',\n      dflt: 'rgba(0,0,0,0)',\n      description: ['sets the color of the root node for a sunburst/treemap/icicle trace.', 'this has no effect when a colorscale is used to set the markers.'].join(' ')\n    },\n    editType: 'calc'\n  },\n  domain: domainAttrs({\n    name: 'sunburst',\n    trace: true,\n    editType: 'calc'\n  })\n};","map":{"version":3,"sources":["C:/Users/mikke/VSC/fantasy-django-react/fantasy-django/fantasy-react-app/node_modules/plotly.js/src/traces/sunburst/attributes.js"],"names":["baseAttrs","require","hovertemplateAttrs","texttemplateAttrs","colorScaleAttrs","domainAttrs","attributes","pieAttrs","constants","extendFlat","module","exports","labels","valType","editType","description","join","parents","values","branchvalues","dflt","count","flags","level","anim","maxdepth","marker","colors","line","color","width","colorAttr","leaf","opacity","min","max","text","textinfo","extras","texttemplate","keys","eventDataKeys","concat","hovertext","hoverinfo","hovertemplate","textfont","insidetextorientation","insidetextfont","outsidetextfont","rotation","sort","root","domain","name","trace"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nvar baseAttrs = require('../../plots/attributes');\r\nvar hovertemplateAttrs = require('../../plots/template_attributes').hovertemplateAttrs;\r\nvar texttemplateAttrs = require('../../plots/template_attributes').texttemplateAttrs;\r\n\r\nvar colorScaleAttrs = require('../../components/colorscale/attributes');\r\nvar domainAttrs = require('../../plots/domain').attributes;\r\nvar pieAttrs = require('../pie/attributes');\r\nvar constants = require('./constants');\r\nvar extendFlat = require('../../lib/extend').extendFlat;\r\n\r\nmodule.exports = {\r\n    labels: {\r\n        valType: 'data_array',\r\n        editType: 'calc',\r\n        description: [\r\n            'Sets the labels of each of the sectors.'\r\n        ].join(' ')\r\n    },\r\n    parents: {\r\n        valType: 'data_array',\r\n        editType: 'calc',\r\n        description: [\r\n            'Sets the parent sectors for each of the sectors.',\r\n            'Empty string items \\'\\' are understood to reference',\r\n            'the root node in the hierarchy.',\r\n            'If `ids` is filled, `parents` items are understood to be \"ids\" themselves.',\r\n            'When `ids` is not set, plotly attempts to find matching items in `labels`,',\r\n            'but beware they must be unique.'\r\n        ].join(' ')\r\n    },\r\n\r\n    values: {\r\n        valType: 'data_array',\r\n        editType: 'calc',\r\n        description: [\r\n            'Sets the values associated with each of the sectors.',\r\n            'Use with `branchvalues` to determine how the values are summed.'\r\n        ].join(' ')\r\n    },\r\n    branchvalues: {\r\n        valType: 'enumerated',\r\n        values: ['remainder', 'total'],\r\n        dflt: 'remainder',\r\n        editType: 'calc',\r\n        description: [\r\n            'Determines how the items in `values` are summed.',\r\n            'When set to *total*, items in `values` are taken to be value of all its descendants.',\r\n            'When set to *remainder*, items in `values` corresponding to the root and the branches sectors',\r\n            'are taken to be the extra part not part of the sum of the values at their leaves.'\r\n        ].join(' ')\r\n    },\r\n    count: {\r\n        valType: 'flaglist',\r\n        flags: [\r\n            'branches',\r\n            'leaves'\r\n        ],\r\n        dflt: 'leaves',\r\n        editType: 'calc',\r\n        description: [\r\n            'Determines default for `values` when it is not provided,',\r\n            'by inferring a 1 for each of the *leaves* and/or *branches*, otherwise 0.'\r\n        ].join(' ')\r\n    },\r\n\r\n    level: {\r\n        valType: 'any',\r\n        editType: 'plot',\r\n        anim: true,\r\n        description: [\r\n            'Sets the level from which this trace hierarchy is rendered.',\r\n            'Set `level` to `\\'\\'` to start from the root node in the hierarchy.',\r\n            'Must be an \"id\" if `ids` is filled in, otherwise plotly attempts to find a matching',\r\n            'item in `labels`.'\r\n        ].join(' ')\r\n    },\r\n    maxdepth: {\r\n        valType: 'integer',\r\n        editType: 'plot',\r\n        dflt: -1,\r\n        description: [\r\n            'Sets the number of rendered sectors from any given `level`.',\r\n            'Set `maxdepth` to *-1* to render all the levels in the hierarchy.'\r\n        ].join(' ')\r\n    },\r\n\r\n    marker: extendFlat({\r\n        colors: {\r\n            valType: 'data_array',\r\n            editType: 'calc',\r\n            description: [\r\n                'Sets the color of each sector of this trace.',\r\n                'If not specified, the default trace color set is used',\r\n                'to pick the sector colors.'\r\n            ].join(' ')\r\n        },\r\n\r\n        // colorinheritance: {\r\n        //     valType: 'enumerated',\r\n        //     values: ['per-branch', 'per-label', false]\r\n        // },\r\n\r\n        line: {\r\n            color: extendFlat({}, pieAttrs.marker.line.color, {\r\n                dflt: null,\r\n                description: [\r\n                    'Sets the color of the line enclosing each sector.',\r\n                    'Defaults to the `paper_bgcolor` value.'\r\n                ].join(' ')\r\n            }),\r\n            width: extendFlat({}, pieAttrs.marker.line.width, {dflt: 1}),\r\n            editType: 'calc'\r\n        },\r\n        editType: 'calc'\r\n    },\r\n        colorScaleAttrs('marker', {\r\n            colorAttr: 'colors',\r\n            anim: false // TODO: set to anim: true?\r\n        })\r\n    ),\r\n\r\n    leaf: {\r\n        opacity: {\r\n            valType: 'number',\r\n            editType: 'style',\r\n            min: 0,\r\n            max: 1,\r\n            description: [\r\n                'Sets the opacity of the leaves. With colorscale',\r\n                'it is defaulted to 1; otherwise it is defaulted to 0.7'\r\n            ].join(' ')\r\n        },\r\n        editType: 'plot'\r\n    },\r\n\r\n    text: pieAttrs.text,\r\n    textinfo: {\r\n        valType: 'flaglist',\r\n        flags: [\r\n            'label',\r\n            'text',\r\n            'value',\r\n            'current path',\r\n            'percent root',\r\n            'percent entry',\r\n            'percent parent'\r\n        ],\r\n        extras: ['none'],\r\n        editType: 'plot',\r\n        description: [\r\n            'Determines which trace information appear on the graph.'\r\n        ].join(' ')\r\n    },\r\n\r\n    // TODO: incorporate `label` and `value` in the eventData\r\n    texttemplate: texttemplateAttrs({editType: 'plot'}, {\r\n        keys: constants.eventDataKeys.concat(['label', 'value'])\r\n    }),\r\n\r\n    hovertext: pieAttrs.hovertext,\r\n    hoverinfo: extendFlat({}, baseAttrs.hoverinfo, {\r\n        flags: [\r\n            'label',\r\n            'text',\r\n            'value',\r\n            'name',\r\n            'current path',\r\n            'percent root',\r\n            'percent entry',\r\n            'percent parent'\r\n        ],\r\n        dflt: 'label+text+value+name'\r\n    }),\r\n    hovertemplate: hovertemplateAttrs({}, {\r\n        keys: constants.eventDataKeys\r\n    }),\r\n\r\n    textfont: pieAttrs.textfont,\r\n    insidetextorientation: pieAttrs.insidetextorientation,\r\n    insidetextfont: pieAttrs.insidetextfont,\r\n    outsidetextfont: extendFlat({}, pieAttrs.outsidetextfont, {\r\n        description: [\r\n            'Sets the font used for `textinfo` lying outside the sector.',\r\n            'This option refers to the root of the hierarchy',\r\n            'presented at the center of a sunburst graph.',\r\n            'Please note that if a hierarchy has multiple root nodes,',\r\n            'this option won\\'t have any effect and `insidetextfont` would be used.'\r\n        ].join(' ')\r\n    }),\r\n    rotation: {\r\n        valType: 'angle',\r\n        dflt: 0,\r\n        editType: 'plot',\r\n        description: [\r\n            'Rotates the whole diagram counterclockwise by some angle.',\r\n            'By default the first slice starts at 3 o\\'clock.'\r\n        ].join(' ')\r\n    },\r\n    sort: pieAttrs.sort,\r\n\r\n    root: {\r\n        color: {\r\n            valType: 'color',\r\n            editType: 'calc',\r\n            dflt: 'rgba(0,0,0,0)',\r\n            description: [\r\n                'sets the color of the root node for a sunburst/treemap/icicle trace.',\r\n                'this has no effect when a colorscale is used to set the markers.'\r\n            ].join(' ')\r\n        },\r\n        editType: 'calc'\r\n    },\r\n\r\n    domain: domainAttrs({name: 'sunburst', trace: true, editType: 'calc'})\r\n};\r\n"]},"metadata":{},"sourceType":"script"}