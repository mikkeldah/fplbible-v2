{"ast":null,"code":"'use strict';\n\nvar isNumeric = require('fast-isnumeric');\n\nvar toLogRange = require('../../lib/to_log_range');\n/*\r\n * convertCoords: when converting an axis between log and linear\r\n * you need to alter any annotations on that axis to keep them\r\n * pointing at the same data point.\r\n * In v3.0 this will become obsolete\r\n *\r\n * gd: the plot div\r\n * ax: the axis being changed\r\n * newType: the type it's getting\r\n * doExtra: function(attr, val) from inside relayout that sets the attribute.\r\n *     Use this to make the changes as it's aware if any other changes in the\r\n *     same relayout call should override this conversion.\r\n */\n\n\nmodule.exports = function convertCoords(gd, ax, newType, doExtra) {\n  ax = ax || {};\n  var toLog = newType === 'log' && ax.type === 'linear';\n  var fromLog = newType === 'linear' && ax.type === 'log';\n  if (!(toLog || fromLog)) return;\n  var annotations = gd._fullLayout.annotations;\n\n  var axLetter = ax._id.charAt(0);\n\n  var ann;\n  var attrPrefix;\n\n  function convert(attr) {\n    var currentVal = ann[attr];\n    var newVal = null;\n    if (toLog) newVal = toLogRange(currentVal, ax.range);else newVal = Math.pow(10, currentVal); // if conversion failed, delete the value so it gets a default value\n\n    if (!isNumeric(newVal)) newVal = null;\n    doExtra(attrPrefix + attr, newVal);\n  }\n\n  for (var i = 0; i < annotations.length; i++) {\n    ann = annotations[i];\n    attrPrefix = 'annotations[' + i + '].';\n    if (ann[axLetter + 'ref'] === ax._id) convert(axLetter);\n    if (ann['a' + axLetter + 'ref'] === ax._id) convert('a' + axLetter);\n  }\n};","map":{"version":3,"sources":["C:/Users/mikke/VSC/fantasy-django-react/fantasy-django/fantasy-react-app/node_modules/plotly.js/src/components/annotations/convert_coords.js"],"names":["isNumeric","require","toLogRange","module","exports","convertCoords","gd","ax","newType","doExtra","toLog","type","fromLog","annotations","_fullLayout","axLetter","_id","charAt","ann","attrPrefix","convert","attr","currentVal","newVal","range","Math","pow","i","length"],"mappings":"AAAA;;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,gBAAD,CAAvB;;AACA,IAAIC,UAAU,GAAGD,OAAO,CAAC,wBAAD,CAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAE,MAAM,CAACC,OAAP,GAAiB,SAASC,aAAT,CAAuBC,EAAvB,EAA2BC,EAA3B,EAA+BC,OAA/B,EAAwCC,OAAxC,EAAiD;AAC9DF,EAAAA,EAAE,GAAGA,EAAE,IAAI,EAAX;AAEA,MAAIG,KAAK,GAAIF,OAAO,KAAK,KAAb,IAAwBD,EAAE,CAACI,IAAH,KAAY,QAAhD;AACA,MAAIC,OAAO,GAAIJ,OAAO,KAAK,QAAb,IAA2BD,EAAE,CAACI,IAAH,KAAY,KAArD;AAEA,MAAG,EAAED,KAAK,IAAIE,OAAX,CAAH,EAAwB;AAExB,MAAIC,WAAW,GAAGP,EAAE,CAACQ,WAAH,CAAeD,WAAjC;;AACA,MAAIE,QAAQ,GAAGR,EAAE,CAACS,GAAH,CAAOC,MAAP,CAAc,CAAd,CAAf;;AACA,MAAIC,GAAJ;AACA,MAAIC,UAAJ;;AAEA,WAASC,OAAT,CAAiBC,IAAjB,EAAuB;AACnB,QAAIC,UAAU,GAAGJ,GAAG,CAACG,IAAD,CAApB;AACA,QAAIE,MAAM,GAAG,IAAb;AAEA,QAAGb,KAAH,EAAUa,MAAM,GAAGrB,UAAU,CAACoB,UAAD,EAAaf,EAAE,CAACiB,KAAhB,CAAnB,CAAV,KACKD,MAAM,GAAGE,IAAI,CAACC,GAAL,CAAS,EAAT,EAAaJ,UAAb,CAAT,CALc,CAOnB;;AACA,QAAG,CAACtB,SAAS,CAACuB,MAAD,CAAb,EAAuBA,MAAM,GAAG,IAAT;AAEvBd,IAAAA,OAAO,CAACU,UAAU,GAAGE,IAAd,EAAoBE,MAApB,CAAP;AACH;;AAED,OAAI,IAAII,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGd,WAAW,CAACe,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AACxCT,IAAAA,GAAG,GAAGL,WAAW,CAACc,CAAD,CAAjB;AACAR,IAAAA,UAAU,GAAG,iBAAiBQ,CAAjB,GAAqB,IAAlC;AAEA,QAAGT,GAAG,CAACH,QAAQ,GAAG,KAAZ,CAAH,KAA0BR,EAAE,CAACS,GAAhC,EAAqCI,OAAO,CAACL,QAAD,CAAP;AACrC,QAAGG,GAAG,CAAC,MAAMH,QAAN,GAAiB,KAAlB,CAAH,KAAgCR,EAAE,CAACS,GAAtC,EAA2CI,OAAO,CAAC,MAAML,QAAP,CAAP;AAC9C;AACJ,CAjCD","sourcesContent":["'use strict';\r\n\r\nvar isNumeric = require('fast-isnumeric');\r\nvar toLogRange = require('../../lib/to_log_range');\r\n\r\n/*\r\n * convertCoords: when converting an axis between log and linear\r\n * you need to alter any annotations on that axis to keep them\r\n * pointing at the same data point.\r\n * In v3.0 this will become obsolete\r\n *\r\n * gd: the plot div\r\n * ax: the axis being changed\r\n * newType: the type it's getting\r\n * doExtra: function(attr, val) from inside relayout that sets the attribute.\r\n *     Use this to make the changes as it's aware if any other changes in the\r\n *     same relayout call should override this conversion.\r\n */\r\nmodule.exports = function convertCoords(gd, ax, newType, doExtra) {\r\n    ax = ax || {};\r\n\r\n    var toLog = (newType === 'log') && (ax.type === 'linear');\r\n    var fromLog = (newType === 'linear') && (ax.type === 'log');\r\n\r\n    if(!(toLog || fromLog)) return;\r\n\r\n    var annotations = gd._fullLayout.annotations;\r\n    var axLetter = ax._id.charAt(0);\r\n    var ann;\r\n    var attrPrefix;\r\n\r\n    function convert(attr) {\r\n        var currentVal = ann[attr];\r\n        var newVal = null;\r\n\r\n        if(toLog) newVal = toLogRange(currentVal, ax.range);\r\n        else newVal = Math.pow(10, currentVal);\r\n\r\n        // if conversion failed, delete the value so it gets a default value\r\n        if(!isNumeric(newVal)) newVal = null;\r\n\r\n        doExtra(attrPrefix + attr, newVal);\r\n    }\r\n\r\n    for(var i = 0; i < annotations.length; i++) {\r\n        ann = annotations[i];\r\n        attrPrefix = 'annotations[' + i + '].';\r\n\r\n        if(ann[axLetter + 'ref'] === ax._id) convert(axLetter);\r\n        if(ann['a' + axLetter + 'ref'] === ax._id) convert('a' + axLetter);\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}