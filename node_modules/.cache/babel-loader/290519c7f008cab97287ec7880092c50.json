{"ast":null,"code":"'use strict';\n\nvar colorscaleCalc = require('../../components/colorscale/calc');\n\nvar Lib = require('../../lib');\n\nvar convertColumnData = require('../heatmap/convert_column_xyz');\n\nvar clean2dArray = require('../heatmap/clean_2d_array');\n\nvar interp2d = require('../heatmap/interp2d');\n\nvar findEmpties = require('../heatmap/find_empties');\n\nvar makeBoundArray = require('../heatmap/make_bound_array');\n\nvar supplyDefaults = require('./defaults');\n\nvar lookupCarpet = require('../carpet/lookup_carpetid');\n\nvar setContours = require('../contour/set_contours'); // most is the same as heatmap calc, then adjust it\n// though a few things inside heatmap calc still look for\n// contour maps, because the makeBoundArray calls are too entangled\n\n\nmodule.exports = function calc(gd, trace) {\n  var carpet = trace._carpetTrace = lookupCarpet(gd, trace);\n  if (!carpet || !carpet.visible || carpet.visible === 'legendonly') return;\n\n  if (!trace.a || !trace.b) {\n    // Look up the original incoming carpet data:\n    var carpetdata = gd.data[carpet.index]; // Look up the incoming trace data, *except* perform a shallow\n    // copy so that we're not actually modifying it when we use it\n    // to supply defaults:\n\n    var tracedata = gd.data[trace.index]; // var tracedata = extendFlat({}, gd.data[trace.index]);\n    // If the data is not specified\n\n    if (!tracedata.a) tracedata.a = carpetdata.a;\n    if (!tracedata.b) tracedata.b = carpetdata.b;\n    supplyDefaults(tracedata, trace, trace._defaultColor, gd._fullLayout);\n  }\n\n  var cd = heatmappishCalc(gd, trace);\n  setContours(trace, trace._z);\n  return cd;\n};\n\nfunction heatmappishCalc(gd, trace) {\n  // prepare the raw data\n  // run makeCalcdata on x and y even for heatmaps, in case of category mappings\n  var carpet = trace._carpetTrace;\n  var aax = carpet.aaxis;\n  var bax = carpet.baxis;\n  var a, a0, da, b, b0, db, z; // cancel minimum tick spacings (only applies to bars and boxes)\n\n  aax._minDtick = 0;\n  bax._minDtick = 0;\n  if (Lib.isArray1D(trace.z)) convertColumnData(trace, aax, bax, 'a', 'b', ['z']);\n  a = trace._a = trace._a || trace.a;\n  b = trace._b = trace._b || trace.b;\n  a = a ? aax.makeCalcdata(trace, '_a') : [];\n  b = b ? bax.makeCalcdata(trace, '_b') : [];\n  a0 = trace.a0 || 0;\n  da = trace.da || 1;\n  b0 = trace.b0 || 0;\n  db = trace.db || 1;\n  z = trace._z = clean2dArray(trace._z || trace.z, trace.transpose);\n  trace._emptypoints = findEmpties(z);\n  interp2d(z, trace._emptypoints); // create arrays of brick boundaries, to be used by autorange and heatmap.plot\n\n  var xlen = Lib.maxRowLength(z);\n  var xIn = trace.xtype === 'scaled' ? '' : a;\n  var xArray = makeBoundArray(trace, xIn, a0, da, xlen, aax);\n  var yIn = trace.ytype === 'scaled' ? '' : b;\n  var yArray = makeBoundArray(trace, yIn, b0, db, z.length, bax);\n  var cd0 = {\n    a: xArray,\n    b: yArray,\n    z: z\n  };\n\n  if (trace.contours.type === 'levels' && trace.contours.coloring !== 'none') {\n    // auto-z and autocolorscale if applicable\n    colorscaleCalc(gd, trace, {\n      vals: z,\n      containerStr: '',\n      cLetter: 'z'\n    });\n  }\n\n  return [cd0];\n}","map":{"version":3,"sources":["C:/Users/mikke/VSC/fantasy-django-react/fantasy-django/fantasy-react-app/node_modules/plotly.js/src/traces/contourcarpet/calc.js"],"names":["colorscaleCalc","require","Lib","convertColumnData","clean2dArray","interp2d","findEmpties","makeBoundArray","supplyDefaults","lookupCarpet","setContours","module","exports","calc","gd","trace","carpet","_carpetTrace","visible","a","b","carpetdata","data","index","tracedata","_defaultColor","_fullLayout","cd","heatmappishCalc","_z","aax","aaxis","bax","baxis","a0","da","b0","db","z","_minDtick","isArray1D","_a","_b","makeCalcdata","transpose","_emptypoints","xlen","maxRowLength","xIn","xtype","xArray","yIn","ytype","yArray","length","cd0","contours","type","coloring","vals","containerStr","cLetter"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nvar colorscaleCalc = require('../../components/colorscale/calc');\r\nvar Lib = require('../../lib');\r\n\r\nvar convertColumnData = require('../heatmap/convert_column_xyz');\r\nvar clean2dArray = require('../heatmap/clean_2d_array');\r\nvar interp2d = require('../heatmap/interp2d');\r\nvar findEmpties = require('../heatmap/find_empties');\r\nvar makeBoundArray = require('../heatmap/make_bound_array');\r\nvar supplyDefaults = require('./defaults');\r\nvar lookupCarpet = require('../carpet/lookup_carpetid');\r\nvar setContours = require('../contour/set_contours');\r\n\r\n// most is the same as heatmap calc, then adjust it\r\n// though a few things inside heatmap calc still look for\r\n// contour maps, because the makeBoundArray calls are too entangled\r\nmodule.exports = function calc(gd, trace) {\r\n    var carpet = trace._carpetTrace = lookupCarpet(gd, trace);\r\n    if(!carpet || !carpet.visible || carpet.visible === 'legendonly') return;\r\n\r\n    if(!trace.a || !trace.b) {\r\n        // Look up the original incoming carpet data:\r\n        var carpetdata = gd.data[carpet.index];\r\n\r\n        // Look up the incoming trace data, *except* perform a shallow\r\n        // copy so that we're not actually modifying it when we use it\r\n        // to supply defaults:\r\n        var tracedata = gd.data[trace.index];\r\n        // var tracedata = extendFlat({}, gd.data[trace.index]);\r\n\r\n        // If the data is not specified\r\n        if(!tracedata.a) tracedata.a = carpetdata.a;\r\n        if(!tracedata.b) tracedata.b = carpetdata.b;\r\n\r\n        supplyDefaults(tracedata, trace, trace._defaultColor, gd._fullLayout);\r\n    }\r\n\r\n    var cd = heatmappishCalc(gd, trace);\r\n    setContours(trace, trace._z);\r\n\r\n    return cd;\r\n};\r\n\r\nfunction heatmappishCalc(gd, trace) {\r\n    // prepare the raw data\r\n    // run makeCalcdata on x and y even for heatmaps, in case of category mappings\r\n    var carpet = trace._carpetTrace;\r\n    var aax = carpet.aaxis;\r\n    var bax = carpet.baxis;\r\n    var a,\r\n        a0,\r\n        da,\r\n        b,\r\n        b0,\r\n        db,\r\n        z;\r\n\r\n    // cancel minimum tick spacings (only applies to bars and boxes)\r\n    aax._minDtick = 0;\r\n    bax._minDtick = 0;\r\n\r\n    if(Lib.isArray1D(trace.z)) convertColumnData(trace, aax, bax, 'a', 'b', ['z']);\r\n    a = trace._a = trace._a || trace.a;\r\n    b = trace._b = trace._b || trace.b;\r\n\r\n    a = a ? aax.makeCalcdata(trace, '_a') : [];\r\n    b = b ? bax.makeCalcdata(trace, '_b') : [];\r\n    a0 = trace.a0 || 0;\r\n    da = trace.da || 1;\r\n    b0 = trace.b0 || 0;\r\n    db = trace.db || 1;\r\n\r\n    z = trace._z = clean2dArray(trace._z || trace.z, trace.transpose);\r\n\r\n    trace._emptypoints = findEmpties(z);\r\n    interp2d(z, trace._emptypoints);\r\n\r\n    // create arrays of brick boundaries, to be used by autorange and heatmap.plot\r\n    var xlen = Lib.maxRowLength(z);\r\n    var xIn = trace.xtype === 'scaled' ? '' : a;\r\n    var xArray = makeBoundArray(trace, xIn, a0, da, xlen, aax);\r\n    var yIn = trace.ytype === 'scaled' ? '' : b;\r\n    var yArray = makeBoundArray(trace, yIn, b0, db, z.length, bax);\r\n\r\n    var cd0 = {\r\n        a: xArray,\r\n        b: yArray,\r\n        z: z,\r\n    };\r\n\r\n    if(trace.contours.type === 'levels' && trace.contours.coloring !== 'none') {\r\n        // auto-z and autocolorscale if applicable\r\n        colorscaleCalc(gd, trace, {\r\n            vals: z,\r\n            containerStr: '',\r\n            cLetter: 'z'\r\n        });\r\n    }\r\n\r\n    return [cd0];\r\n}\r\n"]},"metadata":{},"sourceType":"script"}