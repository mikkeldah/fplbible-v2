{"ast":null,"code":"'use strict';\n\nvar d3 = require('@plotly/d3');\n\nvar isNumeric = require('fast-isnumeric');\n\nvar NOTEDATA = [];\n/**\r\n * notifier\r\n * @param {String} text The person's user name\r\n * @param {Number} [delay=1000] The delay time in milliseconds\r\n *          or 'long' which provides 2000 ms delay time.\r\n * @return {undefined} this function does not return a value\r\n */\n\nmodule.exports = function (text, displayLength) {\n  if (NOTEDATA.indexOf(text) !== -1) return;\n  NOTEDATA.push(text);\n  var ts = 1000;\n  if (isNumeric(displayLength)) ts = displayLength;else if (displayLength === 'long') ts = 3000;\n  var notifierContainer = d3.select('body').selectAll('.plotly-notifier').data([0]);\n  notifierContainer.enter().append('div').classed('plotly-notifier', true);\n  var notes = notifierContainer.selectAll('.notifier-note').data(NOTEDATA);\n\n  function killNote(transition) {\n    transition.duration(700).style('opacity', 0).each('end', function (thisText) {\n      var thisIndex = NOTEDATA.indexOf(thisText);\n      if (thisIndex !== -1) NOTEDATA.splice(thisIndex, 1);\n      d3.select(this).remove();\n    });\n  }\n\n  notes.enter().append('div').classed('notifier-note', true).style('opacity', 0).each(function (thisText) {\n    var note = d3.select(this);\n    note.append('button').classed('notifier-close', true).html('&times;').on('click', function () {\n      note.transition().call(killNote);\n    });\n    var p = note.append('p');\n    var lines = thisText.split(/<br\\s*\\/?>/g);\n\n    for (var i = 0; i < lines.length; i++) {\n      if (i) p.append('br');\n      p.append('span').text(lines[i]);\n    }\n\n    if (displayLength === 'stick') {\n      note.transition().duration(350).style('opacity', 1);\n    } else {\n      note.transition().duration(700).style('opacity', 1).transition().delay(ts).call(killNote);\n    }\n  });\n};","map":{"version":3,"sources":["C:/Users/mikke/VSC/fantasy-django-react/fantasy-django/fantasy-react-app/node_modules/plotly.js/src/lib/notifier.js"],"names":["d3","require","isNumeric","NOTEDATA","module","exports","text","displayLength","indexOf","push","ts","notifierContainer","select","selectAll","data","enter","append","classed","notes","killNote","transition","duration","style","each","thisText","thisIndex","splice","remove","note","html","on","call","p","lines","split","i","length","delay"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nvar d3 = require('@plotly/d3');\r\nvar isNumeric = require('fast-isnumeric');\r\n\r\nvar NOTEDATA = [];\r\n\r\n/**\r\n * notifier\r\n * @param {String} text The person's user name\r\n * @param {Number} [delay=1000] The delay time in milliseconds\r\n *          or 'long' which provides 2000 ms delay time.\r\n * @return {undefined} this function does not return a value\r\n */\r\nmodule.exports = function(text, displayLength) {\r\n    if(NOTEDATA.indexOf(text) !== -1) return;\r\n\r\n    NOTEDATA.push(text);\r\n\r\n    var ts = 1000;\r\n    if(isNumeric(displayLength)) ts = displayLength;\r\n    else if(displayLength === 'long') ts = 3000;\r\n\r\n    var notifierContainer = d3.select('body')\r\n        .selectAll('.plotly-notifier')\r\n        .data([0]);\r\n    notifierContainer.enter()\r\n        .append('div')\r\n        .classed('plotly-notifier', true);\r\n\r\n    var notes = notifierContainer.selectAll('.notifier-note').data(NOTEDATA);\r\n\r\n    function killNote(transition) {\r\n        transition\r\n            .duration(700)\r\n            .style('opacity', 0)\r\n            .each('end', function(thisText) {\r\n                var thisIndex = NOTEDATA.indexOf(thisText);\r\n                if(thisIndex !== -1) NOTEDATA.splice(thisIndex, 1);\r\n                d3.select(this).remove();\r\n            });\r\n    }\r\n\r\n    notes.enter().append('div')\r\n        .classed('notifier-note', true)\r\n        .style('opacity', 0)\r\n        .each(function(thisText) {\r\n            var note = d3.select(this);\r\n\r\n            note.append('button')\r\n                .classed('notifier-close', true)\r\n                .html('&times;')\r\n                .on('click', function() {\r\n                    note.transition().call(killNote);\r\n                });\r\n\r\n            var p = note.append('p');\r\n            var lines = thisText.split(/<br\\s*\\/?>/g);\r\n            for(var i = 0; i < lines.length; i++) {\r\n                if(i) p.append('br');\r\n                p.append('span').text(lines[i]);\r\n            }\r\n\r\n            if(displayLength === 'stick') {\r\n                note.transition()\r\n                        .duration(350)\r\n                        .style('opacity', 1);\r\n            } else {\r\n                note.transition()\r\n                        .duration(700)\r\n                        .style('opacity', 1)\r\n                    .transition()\r\n                        .delay(ts)\r\n                        .call(killNote);\r\n            }\r\n        });\r\n};\r\n"]},"metadata":{},"sourceType":"script"}