{"ast":null,"code":"/*\r\n * World Calendars\r\n * https://github.com/alexcjohnson/world-calendars\r\n *\r\n * Batch-converted from kbwood/calendars\r\n * Many thanks to Keith Wood and all of the contributors to the original project!\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\n\n/* http://keith-wood.name/calendars.html\r\n  Discworld calendar for jQuery v2.0.2.\r\n  Written by Keith Wood (wood.keith{at}optusnet.com.au) January 2016.\r\n  Available under the MIT (http://keith-wood.name/licence.html) license. \r\n  Please attribute the author if you use it. */\nvar main = require('../main');\n\nvar assign = require('object-assign');\n/** Implementation of the Discworld calendar - Unseen University version.\r\n    See also <a href=\"http://wiki.lspace.org/mediawiki/Discworld_calendar\">http://wiki.lspace.org/mediawiki/Discworld_calendar</a>\r\n    and <a href=\"http://discworld.wikia.com/wiki/Discworld_calendar\">http://discworld.wikia.com/wiki/Discworld_calendar</a>.\r\n    @class DiscworldCalendar\r\n    @param [language=''] {string} The language code (default English) for localisation. */\n\n\nfunction DiscworldCalendar(language) {\n  this.local = this.regionalOptions[language || ''] || this.regionalOptions[''];\n}\n\nDiscworldCalendar.prototype = new main.baseCalendar();\nassign(DiscworldCalendar.prototype, {\n  /** The calendar name.\r\n      @memberof DiscworldCalendar */\n  name: 'Discworld',\n\n  /** Julian date of start of Discworld epoch: 1 January 0001 CE.\r\n      @memberof DiscworldCalendar */\n  jdEpoch: 1721425.5,\n\n  /** Days per month in a common year.\r\n      @memberof DiscworldCalendar */\n  daysPerMonth: [16, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32],\n\n  /** <code>true</code> if has a year zero, <code>false</code> if not.\r\n      @memberof DiscworldCalendar */\n  hasYearZero: false,\n\n  /** The minimum month number.\r\n      @memberof DiscworldCalendar */\n  minMonth: 1,\n\n  /** The first month in the year.\r\n      @memberof DiscworldCalendar */\n  firstMonth: 1,\n\n  /** The minimum day number.\r\n      @memberof DiscworldCalendar */\n  minDay: 1,\n\n  /** Localisations for the plugin.\r\n      Entries are objects indexed by the language code ('' being the default US/English).\r\n      Each object has the following attributes.\r\n      @memberof DiscworldCalendar\r\n      @property name {string} The calendar name.\r\n      @property epochs {string[]} The epoch names.\r\n      @property monthNames {string[]} The long names of the months of the year.\r\n      @property monthNamesShort {string[]} The short names of the months of the year.\r\n      @property dayNames {string[]} The long names of the days of the week.\r\n      @property dayNamesShort {string[]} The short names of the days of the week.\r\n      @property dayNamesMin {string[]} The minimal names of the days of the week.\r\n      @property dateFormat {string} The date format for this calendar.\r\n              See the options on <a href=\"BaseCalendar.html#formatDate\"><code>formatDate</code></a> for details.\r\n      @property firstDay {number} The number of the first day of the week, starting at 0.\r\n      @property isRTL {number} <code>true</code> if this localisation reads right-to-left. */\n  regionalOptions: {\n    // Localisations\n    '': {\n      name: 'Discworld',\n      epochs: ['BUC', 'UC'],\n      monthNames: ['Ick', 'Offle', 'February', 'March', 'April', 'May', 'June', 'Grune', 'August', 'Spune', 'Sektober', 'Ember', 'December'],\n      monthNamesShort: ['Ick', 'Off', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Gru', 'Aug', 'Spu', 'Sek', 'Emb', 'Dec'],\n      dayNames: ['Sunday', 'Octeday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n      dayNamesShort: ['Sun', 'Oct', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n      dayNamesMin: ['Su', 'Oc', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],\n      digits: null,\n      dateFormat: 'yyyy/mm/dd',\n      firstDay: 2,\n      isRTL: false\n    }\n  },\n\n  /** Determine whether this date is in a leap year.\r\n      @memberof DiscworldCalendar\r\n      @param year {CDate|number} The date to examine or the year to examine.\r\n      @return {boolean} <code>true</code> if this is a leap year, <code>false</code> if not.\r\n      @throws Error if an invalid year or a different calendar used. */\n  leapYear: function (year) {\n    this._validate(year, this.minMonth, this.minDay, main.local.invalidYear);\n\n    return false;\n  },\n\n  /** Retrieve the number of months in a year.\r\n      @memberof DiscworldCalendar\r\n      @param year {CDate|number} The date to examine or the year to examine.\r\n      @return {number} The number of months.\r\n      @throws Error if an invalid year or a different calendar used. */\n  monthsInYear: function (year) {\n    this._validate(year, this.minMonth, this.minDay, main.local.invalidYear);\n\n    return 13;\n  },\n\n  /** Retrieve the number of days in a year.\r\n      @memberof DiscworldCalendar\r\n      @param year {CDate|number} The date to examine or the year to examine.\r\n      @return {number} The number of days.\r\n      @throws Error if an invalid year or a different calendar used. */\n  daysInYear: function (year) {\n    this._validate(year, this.minMonth, this.minDay, main.local.invalidYear);\n\n    return 400;\n  },\n\n  /** Determine the week of the year for a date.\r\n      @memberof DiscworldCalendar\r\n      @param year {CDate|number} The date to examine or the year to examine.\r\n      @param [month] {number} The month to examine.\r\n      @param [day] {number} The day to examine.\r\n      @return {number} The week of the year.\r\n      @throws Error if an invalid date or a different calendar used. */\n  weekOfYear: function (year, month, day) {\n    // Find Sunday of this week starting on Sunday\n    var checkDate = this.newDate(year, month, day);\n    checkDate.add(-checkDate.dayOfWeek(), 'd');\n    return Math.floor((checkDate.dayOfYear() - 1) / 8) + 1;\n  },\n\n  /** Retrieve the number of days in a month.\r\n      @memberof DiscworldCalendar\r\n      @param year {CDate|number} The date to examine or the year of the month.\r\n      @param [month] {number} The month.\r\n      @return {number} The number of days in this month.\r\n      @throws Error if an invalid month/year or a different calendar used. */\n  daysInMonth: function (year, month) {\n    var date = this._validate(year, month, this.minDay, main.local.invalidMonth);\n\n    return this.daysPerMonth[date.month() - 1];\n  },\n\n  /** Retrieve the number of days in a week.\r\n      @memberof DiscworldCalendar\r\n      @return {number} The number of days. */\n  daysInWeek: function () {\n    return 8;\n  },\n\n  /** Retrieve the day of the week for a date.\r\n      @memberof DiscworldCalendar\r\n      @param year {CDate|number} The date to examine or the year to examine.\r\n      @param [month] {number} The month to examine.\r\n      @param [day] {number} The day to examine.\r\n      @return {number} The day of the week: 0 to number of days - 1.\r\n      @throws Error if an invalid date or a different calendar used. */\n  dayOfWeek: function (year, month, day) {\n    var date = this._validate(year, month, day, main.local.invalidDate);\n\n    return (date.day() + 1) % 8;\n  },\n\n  /** Determine whether this date is a week day.\r\n      @memberof DiscworldCalendar\r\n      @param year {CDate|number} The date to examine or the year to examine.\r\n      @param [month] {number} The month to examine.\r\n      @param [day] {number} The day to examine.\r\n      @return {boolean} <code>true</code> if a week day, <code>false</code> if not.\r\n      @throws Error if an invalid date or a different calendar used. */\n  weekDay: function (year, month, day) {\n    var dow = this.dayOfWeek(year, month, day);\n    return dow >= 2 && dow <= 6;\n  },\n\n  /** Retrieve additional information about a date.\r\n      @memberof DiscworldCalendar\r\n      @param year {CDate|number} The date to examine or the year to examine.\r\n      @param [month] {number} The month to examine.\r\n      @param [day] {number} The day to examine.\r\n      @return {object} Additional information - contents depends on calendar.\r\n      @throws Error if an invalid date or a different calendar used. */\n  extraInfo: function (year, month, day) {\n    var date = this._validate(year, month, day, main.local.invalidDate);\n\n    return {\n      century: centuries[Math.floor((date.year() - 1) / 100) + 1] || ''\n    };\n  },\n\n  /** Retrieve the Julian date equivalent for this date,\r\n      i.e. days since January 1, 4713 BCE Greenwich noon.\r\n      @memberof DiscworldCalendar\r\n      @param year {CDate|number} The date to convert or the year to convert.\r\n      @param [month] {number} The month to convert.\r\n      @param [day] {number} The day to convert.\r\n      @return {number} The equivalent Julian date.\r\n      @throws Error if an invalid date or a different calendar used. */\n  toJD: function (year, month, day) {\n    var date = this._validate(year, month, day, main.local.invalidDate);\n\n    year = date.year() + (date.year() < 0 ? 1 : 0);\n    month = date.month();\n    day = date.day();\n    return day + (month > 1 ? 16 : 0) + (month > 2 ? (month - 2) * 32 : 0) + (year - 1) * 400 + this.jdEpoch - 1;\n  },\n\n  /** Create a new date from a Julian date.\r\n      @memberof DiscworldCalendar\r\n      @param jd {number} The Julian date to convert.\r\n      @return {CDate} The equivalent date. */\n  fromJD: function (jd) {\n    jd = Math.floor(jd + 0.5) - Math.floor(this.jdEpoch) - 1;\n    var year = Math.floor(jd / 400) + 1;\n    jd -= (year - 1) * 400;\n    jd += jd > 15 ? 16 : 0;\n    var month = Math.floor(jd / 32) + 1;\n    var day = jd - (month - 1) * 32 + 1;\n    return this.newDate(year <= 0 ? year - 1 : year, month, day);\n  }\n}); // Names of the centuries\n\nvar centuries = {\n  20: 'Fruitbat',\n  21: 'Anchovy'\n}; // Discworld calendar implementation\n\nmain.calendars.discworld = DiscworldCalendar;","map":{"version":3,"sources":["C:/Users/mikke/VSC/fantasy-django-react/fantasy-django/fantasy-react-app/node_modules/world-calendars/dist/calendars/discworld.js"],"names":["main","require","assign","DiscworldCalendar","language","local","regionalOptions","prototype","baseCalendar","name","jdEpoch","daysPerMonth","hasYearZero","minMonth","firstMonth","minDay","epochs","monthNames","monthNamesShort","dayNames","dayNamesShort","dayNamesMin","digits","dateFormat","firstDay","isRTL","leapYear","year","_validate","invalidYear","monthsInYear","daysInYear","weekOfYear","month","day","checkDate","newDate","add","dayOfWeek","Math","floor","dayOfYear","daysInMonth","date","invalidMonth","daysInWeek","invalidDate","weekDay","dow","extraInfo","century","centuries","toJD","fromJD","jd","calendars","discworld"],"mappings":"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","sourcesContent":["/*\r\n * World Calendars\r\n * https://github.com/alexcjohnson/world-calendars\r\n *\r\n * Batch-converted from kbwood/calendars\r\n * Many thanks to Keith Wood and all of the contributors to the original project!\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n\r\n﻿/* http://keith-wood.name/calendars.html\r\n   Discworld calendar for jQuery v2.0.2.\r\n   Written by Keith Wood (wood.keith{at}optusnet.com.au) January 2016.\r\n   Available under the MIT (http://keith-wood.name/licence.html) license. \r\n   Please attribute the author if you use it. */\r\n\r\nvar main = require('../main');\r\nvar assign = require('object-assign');\r\n\r\n\r\n/** Implementation of the Discworld calendar - Unseen University version.\r\n    See also <a href=\"http://wiki.lspace.org/mediawiki/Discworld_calendar\">http://wiki.lspace.org/mediawiki/Discworld_calendar</a>\r\n    and <a href=\"http://discworld.wikia.com/wiki/Discworld_calendar\">http://discworld.wikia.com/wiki/Discworld_calendar</a>.\r\n    @class DiscworldCalendar\r\n    @param [language=''] {string} The language code (default English) for localisation. */\r\nfunction DiscworldCalendar(language) {\r\n    this.local = this.regionalOptions[language || ''] || this.regionalOptions[''];\r\n}\r\n\r\nDiscworldCalendar.prototype = new main.baseCalendar;\r\n\r\nassign(DiscworldCalendar.prototype, {\r\n    /** The calendar name.\r\n        @memberof DiscworldCalendar */\r\n    name: 'Discworld',\r\n    /** Julian date of start of Discworld epoch: 1 January 0001 CE.\r\n        @memberof DiscworldCalendar */\r\n    jdEpoch: 1721425.5,\r\n    /** Days per month in a common year.\r\n        @memberof DiscworldCalendar */\r\n    daysPerMonth: [16, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32],\r\n    /** <code>true</code> if has a year zero, <code>false</code> if not.\r\n        @memberof DiscworldCalendar */\r\n    hasYearZero: false,\r\n    /** The minimum month number.\r\n        @memberof DiscworldCalendar */\r\n    minMonth: 1,\r\n    /** The first month in the year.\r\n        @memberof DiscworldCalendar */\r\n    firstMonth: 1,\r\n    /** The minimum day number.\r\n        @memberof DiscworldCalendar */\r\n    minDay: 1,\r\n\r\n    /** Localisations for the plugin.\r\n        Entries are objects indexed by the language code ('' being the default US/English).\r\n        Each object has the following attributes.\r\n        @memberof DiscworldCalendar\r\n        @property name {string} The calendar name.\r\n        @property epochs {string[]} The epoch names.\r\n        @property monthNames {string[]} The long names of the months of the year.\r\n        @property monthNamesShort {string[]} The short names of the months of the year.\r\n        @property dayNames {string[]} The long names of the days of the week.\r\n        @property dayNamesShort {string[]} The short names of the days of the week.\r\n        @property dayNamesMin {string[]} The minimal names of the days of the week.\r\n        @property dateFormat {string} The date format for this calendar.\r\n                See the options on <a href=\"BaseCalendar.html#formatDate\"><code>formatDate</code></a> for details.\r\n        @property firstDay {number} The number of the first day of the week, starting at 0.\r\n        @property isRTL {number} <code>true</code> if this localisation reads right-to-left. */\r\n    regionalOptions: { // Localisations\r\n        '': {\r\n            name: 'Discworld',\r\n            epochs: ['BUC', 'UC'],\r\n            monthNames: ['Ick', 'Offle', 'February', 'March', 'April', 'May', 'June',\r\n            'Grune', 'August', 'Spune', 'Sektober', 'Ember', 'December'],\r\n            monthNamesShort: ['Ick', 'Off', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Gru', 'Aug', 'Spu', 'Sek', 'Emb', 'Dec'],\r\n            dayNames: ['Sunday', 'Octeday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\r\n            dayNamesShort: ['Sun', 'Oct', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\r\n            dayNamesMin: ['Su', 'Oc', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],\r\n            digits: null,\r\n            dateFormat: 'yyyy/mm/dd',\r\n            firstDay: 2,\r\n            isRTL: false\r\n        }\r\n    },\r\n\r\n    /** Determine whether this date is in a leap year.\r\n        @memberof DiscworldCalendar\r\n        @param year {CDate|number} The date to examine or the year to examine.\r\n        @return {boolean} <code>true</code> if this is a leap year, <code>false</code> if not.\r\n        @throws Error if an invalid year or a different calendar used. */\r\n    leapYear: function(year) {\r\n        this._validate(year, this.minMonth, this.minDay, main.local.invalidYear);\r\n        return false;\r\n    },\r\n\r\n    /** Retrieve the number of months in a year.\r\n        @memberof DiscworldCalendar\r\n        @param year {CDate|number} The date to examine or the year to examine.\r\n        @return {number} The number of months.\r\n        @throws Error if an invalid year or a different calendar used. */\r\n    monthsInYear: function(year) {\r\n        this._validate(year, this.minMonth, this.minDay, main.local.invalidYear);\r\n        return 13;\r\n    },\r\n\r\n    /** Retrieve the number of days in a year.\r\n        @memberof DiscworldCalendar\r\n        @param year {CDate|number} The date to examine or the year to examine.\r\n        @return {number} The number of days.\r\n        @throws Error if an invalid year or a different calendar used. */\r\n    daysInYear: function(year) {\r\n        this._validate(year, this.minMonth, this.minDay, main.local.invalidYear);\r\n        return 400;\r\n    },\r\n\r\n    /** Determine the week of the year for a date.\r\n        @memberof DiscworldCalendar\r\n        @param year {CDate|number} The date to examine or the year to examine.\r\n        @param [month] {number} The month to examine.\r\n        @param [day] {number} The day to examine.\r\n        @return {number} The week of the year.\r\n        @throws Error if an invalid date or a different calendar used. */\r\n    weekOfYear: function(year, month, day) {\r\n        // Find Sunday of this week starting on Sunday\r\n        var checkDate = this.newDate(year, month, day);\r\n        checkDate.add(-checkDate.dayOfWeek(), 'd');\r\n        return Math.floor((checkDate.dayOfYear() - 1) / 8) + 1;\r\n    },\r\n\r\n    /** Retrieve the number of days in a month.\r\n        @memberof DiscworldCalendar\r\n        @param year {CDate|number} The date to examine or the year of the month.\r\n        @param [month] {number} The month.\r\n        @return {number} The number of days in this month.\r\n        @throws Error if an invalid month/year or a different calendar used. */\r\n    daysInMonth: function(year, month) {\r\n        var date = this._validate(year, month, this.minDay, main.local.invalidMonth);\r\n        return this.daysPerMonth[date.month() - 1];\r\n    },\r\n\r\n    /** Retrieve the number of days in a week.\r\n        @memberof DiscworldCalendar\r\n        @return {number} The number of days. */\r\n    daysInWeek: function() {\r\n        return 8;\r\n    },\r\n\r\n    /** Retrieve the day of the week for a date.\r\n        @memberof DiscworldCalendar\r\n        @param year {CDate|number} The date to examine or the year to examine.\r\n        @param [month] {number} The month to examine.\r\n        @param [day] {number} The day to examine.\r\n        @return {number} The day of the week: 0 to number of days - 1.\r\n        @throws Error if an invalid date or a different calendar used. */\r\n    dayOfWeek: function(year, month, day) {\r\n        var date = this._validate(year, month, day, main.local.invalidDate);\r\n        return (date.day() + 1) % 8;\r\n    },\r\n\r\n    /** Determine whether this date is a week day.\r\n        @memberof DiscworldCalendar\r\n        @param year {CDate|number} The date to examine or the year to examine.\r\n        @param [month] {number} The month to examine.\r\n        @param [day] {number} The day to examine.\r\n        @return {boolean} <code>true</code> if a week day, <code>false</code> if not.\r\n        @throws Error if an invalid date or a different calendar used. */\r\n    weekDay: function(year, month, day) {\r\n        var dow = this.dayOfWeek(year, month, day);\r\n        return (dow >= 2 && dow <= 6);\r\n    },\r\n\r\n    /** Retrieve additional information about a date.\r\n        @memberof DiscworldCalendar\r\n        @param year {CDate|number} The date to examine or the year to examine.\r\n        @param [month] {number} The month to examine.\r\n        @param [day] {number} The day to examine.\r\n        @return {object} Additional information - contents depends on calendar.\r\n        @throws Error if an invalid date or a different calendar used. */\r\n    extraInfo: function(year, month, day) {\r\n        var date = this._validate(year, month, day, main.local.invalidDate);\r\n        return {century: centuries[Math.floor((date.year() - 1) / 100) + 1] || ''};\r\n    },\r\n\r\n    /** Retrieve the Julian date equivalent for this date,\r\n        i.e. days since January 1, 4713 BCE Greenwich noon.\r\n        @memberof DiscworldCalendar\r\n        @param year {CDate|number} The date to convert or the year to convert.\r\n        @param [month] {number} The month to convert.\r\n        @param [day] {number} The day to convert.\r\n        @return {number} The equivalent Julian date.\r\n        @throws Error if an invalid date or a different calendar used. */\r\n    toJD: function(year, month, day) {\r\n        var date = this._validate(year, month, day, main.local.invalidDate);\r\n        year = date.year() + (date.year() < 0 ? 1 : 0);\r\n        month = date.month();\r\n        day = date.day();\r\n        return day + (month > 1 ? 16 : 0) + (month > 2 ? (month - 2) * 32 : 0) +\r\n            (year - 1) * 400 + this.jdEpoch - 1;\r\n    },\r\n\r\n    /** Create a new date from a Julian date.\r\n        @memberof DiscworldCalendar\r\n        @param jd {number} The Julian date to convert.\r\n        @return {CDate} The equivalent date. */\r\n    fromJD: function(jd) {\r\n        jd = Math.floor(jd + 0.5) - Math.floor(this.jdEpoch) - 1;\r\n        var year = Math.floor(jd / 400) + 1;\r\n        jd -= (year - 1) * 400;\r\n        jd += (jd > 15 ? 16 : 0);\r\n        var month = Math.floor(jd / 32) + 1;\r\n        var day = jd - (month - 1) * 32 + 1;\r\n        return this.newDate(year <= 0 ? year - 1 : year, month, day);\r\n    }\r\n});\r\n\r\n// Names of the centuries\r\nvar centuries = {\r\n    20: 'Fruitbat',\r\n    21: 'Anchovy'\r\n};\r\n\r\n// Discworld calendar implementation\r\nmain.calendars.discworld = DiscworldCalendar;\r\n\r\n"]},"metadata":{},"sourceType":"script"}