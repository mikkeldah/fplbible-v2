{"ast":null,"code":"'use strict';\n\nvar d3 = require('@plotly/d3');\n\nvar Lib = require('../../lib');\n\nvar Drawing = require('../../components/drawing');\n\nvar svgTextUtils = require('../../lib/svg_text_utils');\n\nvar partition = require('./partition');\n\nvar styleOne = require('./style').styleOne;\n\nvar constants = require('../treemap/constants');\n\nvar helpers = require('../sunburst/helpers');\n\nvar attachFxHandlers = require('../sunburst/fx');\n\nvar formatSliceLabel = require('../sunburst/plot').formatSliceLabel;\n\nvar onPathbar = false; // for Descendants\n\nmodule.exports = function drawDescendants(gd, cd, entry, slices, opts) {\n  var width = opts.width;\n  var height = opts.height;\n  var viewX = opts.viewX;\n  var viewY = opts.viewY;\n  var pathSlice = opts.pathSlice;\n  var toMoveInsideSlice = opts.toMoveInsideSlice;\n  var strTransform = opts.strTransform;\n  var hasTransition = opts.hasTransition;\n  var handleSlicesExit = opts.handleSlicesExit;\n  var makeUpdateSliceInterpolator = opts.makeUpdateSliceInterpolator;\n  var makeUpdateTextInterpolator = opts.makeUpdateTextInterpolator;\n  var prevEntry = opts.prevEntry;\n  var refRect = {};\n  var fullLayout = gd._fullLayout;\n  var cd0 = cd[0];\n  var trace = cd0.trace;\n  var hasLeft = trace.textposition.indexOf('left') !== -1;\n  var hasRight = trace.textposition.indexOf('right') !== -1;\n  var hasBottom = trace.textposition.indexOf('bottom') !== -1; // N.B. slice data isn't the calcdata,\n  // grab corresponding calcdata item in sliceData[i].data.data\n\n  var allData = partition(entry, [width, height], {\n    flipX: trace.tiling.flip.indexOf('x') > -1,\n    flipY: trace.tiling.flip.indexOf('y') > -1,\n    orientation: trace.tiling.orientation,\n    pad: {\n      inner: trace.tiling.pad\n    },\n    maxDepth: trace._maxDepth\n  });\n  var sliceData = allData.descendants();\n  var minVisibleDepth = Infinity;\n  var maxVisibleDepth = -Infinity;\n  sliceData.forEach(function (pt) {\n    var depth = pt.depth;\n\n    if (depth >= trace._maxDepth) {\n      // hide slices that won't show up on graph\n      pt.x0 = pt.x1 = (pt.x0 + pt.x1) / 2;\n      pt.y0 = pt.y1 = (pt.y0 + pt.y1) / 2;\n    } else {\n      minVisibleDepth = Math.min(minVisibleDepth, depth);\n      maxVisibleDepth = Math.max(maxVisibleDepth, depth);\n    }\n  });\n  slices = slices.data(sliceData, helpers.getPtId);\n  trace._maxVisibleLayers = isFinite(maxVisibleDepth) ? maxVisibleDepth - minVisibleDepth + 1 : 0;\n  slices.enter().append('g').classed('slice', true);\n  handleSlicesExit(slices, onPathbar, refRect, [width, height], pathSlice);\n  slices.order(); // next coords of previous entry\n\n  var nextOfPrevEntry = null;\n\n  if (hasTransition && prevEntry) {\n    var prevEntryId = helpers.getPtId(prevEntry);\n    slices.each(function (pt) {\n      if (nextOfPrevEntry === null && helpers.getPtId(pt) === prevEntryId) {\n        nextOfPrevEntry = {\n          x0: pt.x0,\n          x1: pt.x1,\n          y0: pt.y0,\n          y1: pt.y1\n        };\n      }\n    });\n  }\n\n  var getRefRect = function () {\n    return nextOfPrevEntry || {\n      x0: 0,\n      x1: width,\n      y0: 0,\n      y1: height\n    };\n  };\n\n  var updateSlices = slices;\n\n  if (hasTransition) {\n    updateSlices = updateSlices.transition().each('end', function () {\n      // N.B. gd._transitioning is (still) *true* by the time\n      // transition updates get here\n      var sliceTop = d3.select(this);\n      helpers.setSliceCursor(sliceTop, gd, {\n        hideOnRoot: true,\n        hideOnLeaves: false,\n        isTransitioning: false\n      });\n    });\n  }\n\n  updateSlices.each(function (pt) {\n    pt._hoverX = viewX(pt.x1 - trace.tiling.pad), pt._hoverY = hasBottom ? viewY(pt.y1 - trace.tiling.pad / 2) : viewY(pt.y0 + trace.tiling.pad / 2);\n    var sliceTop = d3.select(this);\n    var slicePath = Lib.ensureSingle(sliceTop, 'path', 'surface', function (s) {\n      s.style('pointer-events', 'all');\n    });\n\n    if (hasTransition) {\n      slicePath.transition().attrTween('d', function (pt2) {\n        var interp = makeUpdateSliceInterpolator(pt2, onPathbar, getRefRect(), [width, height], {\n          orientation: trace.tiling.orientation,\n          flipX: trace.tiling.flip.indexOf('x') > -1,\n          flipY: trace.tiling.flip.indexOf('y') > -1\n        });\n        return function (t) {\n          return pathSlice(interp(t));\n        };\n      });\n    } else {\n      slicePath.attr('d', pathSlice);\n    }\n\n    sliceTop.call(attachFxHandlers, entry, gd, cd, {\n      styleOne: styleOne,\n      eventDataKeys: constants.eventDataKeys,\n      transitionTime: constants.CLICK_TRANSITION_TIME,\n      transitionEasing: constants.CLICK_TRANSITION_EASING\n    }).call(helpers.setSliceCursor, gd, {\n      isTransitioning: gd._transitioning\n    });\n    slicePath.call(styleOne, pt, trace, {\n      hovered: false\n    });\n\n    if (pt.x0 === pt.x1 || pt.y0 === pt.y1) {\n      pt._text = '';\n    } else {\n      pt._text = formatSliceLabel(pt, entry, trace, cd, fullLayout) || '';\n    }\n\n    var sliceTextGroup = Lib.ensureSingle(sliceTop, 'g', 'slicetext');\n    var sliceText = Lib.ensureSingle(sliceTextGroup, 'text', '', function (s) {\n      // prohibit tex interpretation until we can handle\n      // tex and regular text together\n      s.attr('data-notex', 1);\n    });\n    var font = Lib.ensureUniformFontSize(gd, helpers.determineTextFont(trace, pt, fullLayout.font));\n    sliceText.text(pt._text || ' ') // use one space character instead of a blank string to avoid jumps during transition\n    .classed('slicetext', true).attr('text-anchor', hasRight ? 'end' : hasLeft ? 'start' : 'middle').call(Drawing.font, font).call(svgTextUtils.convertToTspans, gd);\n    pt.textBB = Drawing.bBox(sliceText.node());\n    pt.transform = toMoveInsideSlice(pt, {\n      fontSize: font.size\n    });\n    pt.transform.fontSize = font.size;\n\n    if (hasTransition) {\n      sliceText.transition().attrTween('transform', function (pt2) {\n        var interp = makeUpdateTextInterpolator(pt2, onPathbar, getRefRect(), [width, height]);\n        return function (t) {\n          return strTransform(interp(t));\n        };\n      });\n    } else {\n      sliceText.attr('transform', strTransform(pt));\n    }\n  });\n  return nextOfPrevEntry;\n};","map":{"version":3,"sources":["C:/Users/mikke/VSC/fantasy-django-react/fantasy-django/fantasy-react-app/node_modules/plotly.js/src/traces/icicle/draw_descendants.js"],"names":["d3","require","Lib","Drawing","svgTextUtils","partition","styleOne","constants","helpers","attachFxHandlers","formatSliceLabel","onPathbar","module","exports","drawDescendants","gd","cd","entry","slices","opts","width","height","viewX","viewY","pathSlice","toMoveInsideSlice","strTransform","hasTransition","handleSlicesExit","makeUpdateSliceInterpolator","makeUpdateTextInterpolator","prevEntry","refRect","fullLayout","_fullLayout","cd0","trace","hasLeft","textposition","indexOf","hasRight","hasBottom","allData","flipX","tiling","flip","flipY","orientation","pad","inner","maxDepth","_maxDepth","sliceData","descendants","minVisibleDepth","Infinity","maxVisibleDepth","forEach","pt","depth","x0","x1","y0","y1","Math","min","max","data","getPtId","_maxVisibleLayers","isFinite","enter","append","classed","order","nextOfPrevEntry","prevEntryId","each","getRefRect","updateSlices","transition","sliceTop","select","setSliceCursor","hideOnRoot","hideOnLeaves","isTransitioning","_hoverX","_hoverY","slicePath","ensureSingle","s","style","attrTween","pt2","interp","t","attr","call","eventDataKeys","transitionTime","CLICK_TRANSITION_TIME","transitionEasing","CLICK_TRANSITION_EASING","_transitioning","hovered","_text","sliceTextGroup","sliceText","font","ensureUniformFontSize","determineTextFont","text","convertToTspans","textBB","bBox","node","transform","fontSize","size"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nvar d3 = require('@plotly/d3');\r\nvar Lib = require('../../lib');\r\nvar Drawing = require('../../components/drawing');\r\nvar svgTextUtils = require('../../lib/svg_text_utils');\r\n\r\nvar partition = require('./partition');\r\nvar styleOne = require('./style').styleOne;\r\nvar constants = require('../treemap/constants');\r\nvar helpers = require('../sunburst/helpers');\r\nvar attachFxHandlers = require('../sunburst/fx');\r\nvar formatSliceLabel = require('../sunburst/plot').formatSliceLabel;\r\n\r\nvar onPathbar = false; // for Descendants\r\n\r\nmodule.exports = function drawDescendants(gd, cd, entry, slices, opts) {\r\n    var width = opts.width;\r\n    var height = opts.height;\r\n    var viewX = opts.viewX;\r\n    var viewY = opts.viewY;\r\n    var pathSlice = opts.pathSlice;\r\n    var toMoveInsideSlice = opts.toMoveInsideSlice;\r\n    var strTransform = opts.strTransform;\r\n    var hasTransition = opts.hasTransition;\r\n    var handleSlicesExit = opts.handleSlicesExit;\r\n    var makeUpdateSliceInterpolator = opts.makeUpdateSliceInterpolator;\r\n    var makeUpdateTextInterpolator = opts.makeUpdateTextInterpolator;\r\n    var prevEntry = opts.prevEntry;\r\n    var refRect = {};\r\n\r\n    var fullLayout = gd._fullLayout;\r\n    var cd0 = cd[0];\r\n    var trace = cd0.trace;\r\n\r\n    var hasLeft = trace.textposition.indexOf('left') !== -1;\r\n    var hasRight = trace.textposition.indexOf('right') !== -1;\r\n    var hasBottom = trace.textposition.indexOf('bottom') !== -1;\r\n\r\n    // N.B. slice data isn't the calcdata,\r\n    // grab corresponding calcdata item in sliceData[i].data.data\r\n    var allData = partition(entry, [width, height], {\r\n        flipX: trace.tiling.flip.indexOf('x') > -1,\r\n        flipY: trace.tiling.flip.indexOf('y') > -1,\r\n        orientation: trace.tiling.orientation,\r\n        pad: {\r\n            inner: trace.tiling.pad\r\n        },\r\n        maxDepth: trace._maxDepth\r\n    });\r\n\r\n    var sliceData = allData.descendants();\r\n\r\n    var minVisibleDepth = Infinity;\r\n    var maxVisibleDepth = -Infinity;\r\n    sliceData.forEach(function(pt) {\r\n        var depth = pt.depth;\r\n        if(depth >= trace._maxDepth) {\r\n            // hide slices that won't show up on graph\r\n            pt.x0 = pt.x1 = (pt.x0 + pt.x1) / 2;\r\n            pt.y0 = pt.y1 = (pt.y0 + pt.y1) / 2;\r\n        } else {\r\n            minVisibleDepth = Math.min(minVisibleDepth, depth);\r\n            maxVisibleDepth = Math.max(maxVisibleDepth, depth);\r\n        }\r\n    });\r\n\r\n    slices = slices.data(sliceData, helpers.getPtId);\r\n\r\n    trace._maxVisibleLayers = isFinite(maxVisibleDepth) ? maxVisibleDepth - minVisibleDepth + 1 : 0;\r\n\r\n    slices.enter().append('g')\r\n        .classed('slice', true);\r\n\r\n    handleSlicesExit(slices, onPathbar, refRect, [width, height], pathSlice);\r\n\r\n    slices.order();\r\n\r\n    // next coords of previous entry\r\n    var nextOfPrevEntry = null;\r\n    if(hasTransition && prevEntry) {\r\n        var prevEntryId = helpers.getPtId(prevEntry);\r\n        slices.each(function(pt) {\r\n            if(nextOfPrevEntry === null && (helpers.getPtId(pt) === prevEntryId)) {\r\n                nextOfPrevEntry = {\r\n                    x0: pt.x0,\r\n                    x1: pt.x1,\r\n                    y0: pt.y0,\r\n                    y1: pt.y1\r\n                };\r\n            }\r\n        });\r\n    }\r\n\r\n    var getRefRect = function() {\r\n        return nextOfPrevEntry || {\r\n            x0: 0,\r\n            x1: width,\r\n            y0: 0,\r\n            y1: height\r\n        };\r\n    };\r\n\r\n    var updateSlices = slices;\r\n    if(hasTransition) {\r\n        updateSlices = updateSlices.transition().each('end', function() {\r\n            // N.B. gd._transitioning is (still) *true* by the time\r\n            // transition updates get here\r\n            var sliceTop = d3.select(this);\r\n            helpers.setSliceCursor(sliceTop, gd, {\r\n                hideOnRoot: true,\r\n                hideOnLeaves: false,\r\n                isTransitioning: false\r\n            });\r\n        });\r\n    }\r\n\r\n    updateSlices.each(function(pt) {\r\n        pt._hoverX = viewX(pt.x1 - trace.tiling.pad),\r\n        pt._hoverY = hasBottom ?\r\n                viewY(pt.y1 - trace.tiling.pad / 2) :\r\n                viewY(pt.y0 + trace.tiling.pad / 2);\r\n\r\n        var sliceTop = d3.select(this);\r\n\r\n        var slicePath = Lib.ensureSingle(sliceTop, 'path', 'surface', function(s) {\r\n            s.style('pointer-events', 'all');\r\n        });\r\n\r\n        if(hasTransition) {\r\n            slicePath.transition().attrTween('d', function(pt2) {\r\n                var interp = makeUpdateSliceInterpolator(\r\n                    pt2,\r\n                    onPathbar,\r\n                    getRefRect(),\r\n                    [width, height],\r\n                    {\r\n                        orientation: trace.tiling.orientation,\r\n                        flipX: trace.tiling.flip.indexOf('x') > -1,\r\n                        flipY: trace.tiling.flip.indexOf('y') > -1,\r\n                    }\r\n                );\r\n                return function(t) { return pathSlice(interp(t)); };\r\n            });\r\n        } else {\r\n            slicePath.attr('d', pathSlice);\r\n        }\r\n\r\n        sliceTop\r\n            .call(attachFxHandlers, entry, gd, cd, {\r\n                styleOne: styleOne,\r\n                eventDataKeys: constants.eventDataKeys,\r\n                transitionTime: constants.CLICK_TRANSITION_TIME,\r\n                transitionEasing: constants.CLICK_TRANSITION_EASING\r\n            })\r\n            .call(helpers.setSliceCursor, gd, { isTransitioning: gd._transitioning });\r\n\r\n        slicePath.call(styleOne, pt, trace, {\r\n            hovered: false\r\n        });\r\n\r\n        if(pt.x0 === pt.x1 || pt.y0 === pt.y1) {\r\n            pt._text = '';\r\n        } else {\r\n            pt._text = formatSliceLabel(pt, entry, trace, cd, fullLayout) || '';\r\n        }\r\n\r\n        var sliceTextGroup = Lib.ensureSingle(sliceTop, 'g', 'slicetext');\r\n        var sliceText = Lib.ensureSingle(sliceTextGroup, 'text', '', function(s) {\r\n            // prohibit tex interpretation until we can handle\r\n            // tex and regular text together\r\n            s.attr('data-notex', 1);\r\n        });\r\n\r\n        var font = Lib.ensureUniformFontSize(gd, helpers.determineTextFont(trace, pt, fullLayout.font));\r\n\r\n        sliceText.text(pt._text || ' ') // use one space character instead of a blank string to avoid jumps during transition\r\n            .classed('slicetext', true)\r\n            .attr('text-anchor', hasRight ? 'end' : hasLeft ? 'start' : 'middle')\r\n            .call(Drawing.font, font)\r\n            .call(svgTextUtils.convertToTspans, gd);\r\n\r\n        pt.textBB = Drawing.bBox(sliceText.node());\r\n        pt.transform = toMoveInsideSlice(pt, {\r\n            fontSize: font.size\r\n        });\r\n        pt.transform.fontSize = font.size;\r\n\r\n        if(hasTransition) {\r\n            sliceText.transition().attrTween('transform', function(pt2) {\r\n                var interp = makeUpdateTextInterpolator(pt2, onPathbar, getRefRect(), [width, height]);\r\n                return function(t) { return strTransform(interp(t)); };\r\n            });\r\n        } else {\r\n            sliceText.attr('transform', strTransform(pt));\r\n        }\r\n    });\r\n\r\n    return nextOfPrevEntry;\r\n};\r\n"]},"metadata":{},"sourceType":"script"}