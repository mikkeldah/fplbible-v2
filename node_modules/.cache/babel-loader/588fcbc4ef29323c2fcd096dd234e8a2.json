{"ast":null,"code":"'use strict';\n\nvar Registry = require('../registry');\n/**\r\n * localize: translate a string for the current locale\r\n *\r\n * @param {object} gd: the graphDiv for context\r\n *  gd._context.locale determines the language (& optional region/country)\r\n *  the dictionary for each locale may either be supplied in\r\n *  gd._context.locales or globally via Plotly.register\r\n * @param {string} s: the string to translate\r\n */\n\n\nmodule.exports = function localize(gd, s) {\n  var locale = gd._context.locale;\n  /*\r\n   * Priority of lookup:\r\n   *     contextDicts[locale],\r\n   *     registeredDicts[locale],\r\n   *     contextDicts[baseLocale], (if baseLocale is distinct)\r\n   *     registeredDicts[baseLocale]\r\n   * Return the first translation we find.\r\n   * This way if you have a regionalization you are allowed to specify\r\n   * only what's different from the base locale, everything else will\r\n   * fall back on the base.\r\n   */\n\n  for (var i = 0; i < 2; i++) {\n    var locales = gd._context.locales;\n\n    for (var j = 0; j < 2; j++) {\n      var dict = (locales[locale] || {}).dictionary;\n\n      if (dict) {\n        var out = dict[s];\n        if (out) return out;\n      }\n\n      locales = Registry.localeRegistry;\n    }\n\n    var baseLocale = locale.split('-')[0];\n    if (baseLocale === locale) break;\n    locale = baseLocale;\n  }\n\n  return s;\n};","map":{"version":3,"sources":["C:/Users/mikke/VSC/fantasy-django-react/fantasy-django/fantasy-react-app/node_modules/plotly.js/src/lib/localize.js"],"names":["Registry","require","module","exports","localize","gd","s","locale","_context","i","locales","j","dict","dictionary","out","localeRegistry","baseLocale","split"],"mappings":"AAAA;;AAEA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,aAAD,CAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,SAASC,QAAT,CAAkBC,EAAlB,EAAsBC,CAAtB,EAAyB;AACtC,MAAIC,MAAM,GAAGF,EAAE,CAACG,QAAH,CAAYD,MAAzB;AAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACI,OAAI,IAAIE,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG,CAAnB,EAAsBA,CAAC,EAAvB,EAA2B;AACvB,QAAIC,OAAO,GAAGL,EAAE,CAACG,QAAH,CAAYE,OAA1B;;AACA,SAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG,CAAnB,EAAsBA,CAAC,EAAvB,EAA2B;AACvB,UAAIC,IAAI,GAAG,CAACF,OAAO,CAACH,MAAD,CAAP,IAAmB,EAApB,EAAwBM,UAAnC;;AACA,UAAGD,IAAH,EAAS;AACL,YAAIE,GAAG,GAAGF,IAAI,CAACN,CAAD,CAAd;AACA,YAAGQ,GAAH,EAAQ,OAAOA,GAAP;AACX;;AACDJ,MAAAA,OAAO,GAAGV,QAAQ,CAACe,cAAnB;AACH;;AAED,QAAIC,UAAU,GAAGT,MAAM,CAACU,KAAP,CAAa,GAAb,EAAkB,CAAlB,CAAjB;AACA,QAAGD,UAAU,KAAKT,MAAlB,EAA0B;AAC1BA,IAAAA,MAAM,GAAGS,UAAT;AACH;;AAED,SAAOV,CAAP;AACH,CA/BD","sourcesContent":["'use strict';\r\n\r\nvar Registry = require('../registry');\r\n\r\n/**\r\n * localize: translate a string for the current locale\r\n *\r\n * @param {object} gd: the graphDiv for context\r\n *  gd._context.locale determines the language (& optional region/country)\r\n *  the dictionary for each locale may either be supplied in\r\n *  gd._context.locales or globally via Plotly.register\r\n * @param {string} s: the string to translate\r\n */\r\nmodule.exports = function localize(gd, s) {\r\n    var locale = gd._context.locale;\r\n\r\n    /*\r\n     * Priority of lookup:\r\n     *     contextDicts[locale],\r\n     *     registeredDicts[locale],\r\n     *     contextDicts[baseLocale], (if baseLocale is distinct)\r\n     *     registeredDicts[baseLocale]\r\n     * Return the first translation we find.\r\n     * This way if you have a regionalization you are allowed to specify\r\n     * only what's different from the base locale, everything else will\r\n     * fall back on the base.\r\n     */\r\n    for(var i = 0; i < 2; i++) {\r\n        var locales = gd._context.locales;\r\n        for(var j = 0; j < 2; j++) {\r\n            var dict = (locales[locale] || {}).dictionary;\r\n            if(dict) {\r\n                var out = dict[s];\r\n                if(out) return out;\r\n            }\r\n            locales = Registry.localeRegistry;\r\n        }\r\n\r\n        var baseLocale = locale.split('-')[0];\r\n        if(baseLocale === locale) break;\r\n        locale = baseLocale;\r\n    }\r\n\r\n    return s;\r\n};\r\n"]},"metadata":{},"sourceType":"script"}