{"ast":null,"code":"\"use strict\";\n\nvar compile = require(\"cwise-compiler\");\n\nvar EmptyProc = {\n  body: \"\",\n  args: [],\n  thisVars: [],\n  localVars: []\n};\n\nfunction fixup(x) {\n  if (!x) {\n    return EmptyProc;\n  }\n\n  for (var i = 0; i < x.args.length; ++i) {\n    var a = x.args[i];\n\n    if (i === 0) {\n      x.args[i] = {\n        name: a,\n        lvalue: true,\n        rvalue: !!x.rvalue,\n        count: x.count || 1\n      };\n    } else {\n      x.args[i] = {\n        name: a,\n        lvalue: false,\n        rvalue: true,\n        count: 1\n      };\n    }\n  }\n\n  if (!x.thisVars) {\n    x.thisVars = [];\n  }\n\n  if (!x.localVars) {\n    x.localVars = [];\n  }\n\n  return x;\n}\n\nfunction pcompile(user_args) {\n  return compile({\n    args: user_args.args,\n    pre: fixup(user_args.pre),\n    body: fixup(user_args.body),\n    post: fixup(user_args.proc),\n    funcName: user_args.funcName\n  });\n}\n\nfunction makeOp(user_args) {\n  var args = [];\n\n  for (var i = 0; i < user_args.args.length; ++i) {\n    args.push(\"a\" + i);\n  }\n\n  var wrapper = new Function(\"P\", [\"return function \", user_args.funcName, \"_ndarrayops(\", args.join(\",\"), \") {P(\", args.join(\",\"), \");return a0}\"].join(\"\"));\n  return wrapper(pcompile(user_args));\n}\n\nvar assign_ops = {\n  add: \"+\",\n  sub: \"-\",\n  mul: \"*\",\n  div: \"/\",\n  mod: \"%\",\n  band: \"&\",\n  bor: \"|\",\n  bxor: \"^\",\n  lshift: \"<<\",\n  rshift: \">>\",\n  rrshift: \">>>\"\n};\n\n(function () {\n  for (var id in assign_ops) {\n    var op = assign_ops[id];\n    exports[id] = makeOp({\n      args: [\"array\", \"array\", \"array\"],\n      body: {\n        args: [\"a\", \"b\", \"c\"],\n        body: \"a=b\" + op + \"c\"\n      },\n      funcName: id\n    });\n    exports[id + \"eq\"] = makeOp({\n      args: [\"array\", \"array\"],\n      body: {\n        args: [\"a\", \"b\"],\n        body: \"a\" + op + \"=b\"\n      },\n      rvalue: true,\n      funcName: id + \"eq\"\n    });\n    exports[id + \"s\"] = makeOp({\n      args: [\"array\", \"array\", \"scalar\"],\n      body: {\n        args: [\"a\", \"b\", \"s\"],\n        body: \"a=b\" + op + \"s\"\n      },\n      funcName: id + \"s\"\n    });\n    exports[id + \"seq\"] = makeOp({\n      args: [\"array\", \"scalar\"],\n      body: {\n        args: [\"a\", \"s\"],\n        body: \"a\" + op + \"=s\"\n      },\n      rvalue: true,\n      funcName: id + \"seq\"\n    });\n  }\n})();\n\nvar unary_ops = {\n  not: \"!\",\n  bnot: \"~\",\n  neg: \"-\",\n  recip: \"1.0/\"\n};\n\n(function () {\n  for (var id in unary_ops) {\n    var op = unary_ops[id];\n    exports[id] = makeOp({\n      args: [\"array\", \"array\"],\n      body: {\n        args: [\"a\", \"b\"],\n        body: \"a=\" + op + \"b\"\n      },\n      funcName: id\n    });\n    exports[id + \"eq\"] = makeOp({\n      args: [\"array\"],\n      body: {\n        args: [\"a\"],\n        body: \"a=\" + op + \"a\"\n      },\n      rvalue: true,\n      count: 2,\n      funcName: id + \"eq\"\n    });\n  }\n})();\n\nvar binary_ops = {\n  and: \"&&\",\n  or: \"||\",\n  eq: \"===\",\n  neq: \"!==\",\n  lt: \"<\",\n  gt: \">\",\n  leq: \"<=\",\n  geq: \">=\"\n};\n\n(function () {\n  for (var id in binary_ops) {\n    var op = binary_ops[id];\n    exports[id] = makeOp({\n      args: [\"array\", \"array\", \"array\"],\n      body: {\n        args: [\"a\", \"b\", \"c\"],\n        body: \"a=b\" + op + \"c\"\n      },\n      funcName: id\n    });\n    exports[id + \"s\"] = makeOp({\n      args: [\"array\", \"array\", \"scalar\"],\n      body: {\n        args: [\"a\", \"b\", \"s\"],\n        body: \"a=b\" + op + \"s\"\n      },\n      funcName: id + \"s\"\n    });\n    exports[id + \"eq\"] = makeOp({\n      args: [\"array\", \"array\"],\n      body: {\n        args: [\"a\", \"b\"],\n        body: \"a=a\" + op + \"b\"\n      },\n      rvalue: true,\n      count: 2,\n      funcName: id + \"eq\"\n    });\n    exports[id + \"seq\"] = makeOp({\n      args: [\"array\", \"scalar\"],\n      body: {\n        args: [\"a\", \"s\"],\n        body: \"a=a\" + op + \"s\"\n      },\n      rvalue: true,\n      count: 2,\n      funcName: id + \"seq\"\n    });\n  }\n})();\n\nvar math_unary = [\"abs\", \"acos\", \"asin\", \"atan\", \"ceil\", \"cos\", \"exp\", \"floor\", \"log\", \"round\", \"sin\", \"sqrt\", \"tan\"];\n\n(function () {\n  for (var i = 0; i < math_unary.length; ++i) {\n    var f = math_unary[i];\n    exports[f] = makeOp({\n      args: [\"array\", \"array\"],\n      pre: {\n        args: [],\n        body: \"this_f=Math.\" + f,\n        thisVars: [\"this_f\"]\n      },\n      body: {\n        args: [\"a\", \"b\"],\n        body: \"a=this_f(b)\",\n        thisVars: [\"this_f\"]\n      },\n      funcName: f\n    });\n    exports[f + \"eq\"] = makeOp({\n      args: [\"array\"],\n      pre: {\n        args: [],\n        body: \"this_f=Math.\" + f,\n        thisVars: [\"this_f\"]\n      },\n      body: {\n        args: [\"a\"],\n        body: \"a=this_f(a)\",\n        thisVars: [\"this_f\"]\n      },\n      rvalue: true,\n      count: 2,\n      funcName: f + \"eq\"\n    });\n  }\n})();\n\nvar math_comm = [\"max\", \"min\", \"atan2\", \"pow\"];\n\n(function () {\n  for (var i = 0; i < math_comm.length; ++i) {\n    var f = math_comm[i];\n    exports[f] = makeOp({\n      args: [\"array\", \"array\", \"array\"],\n      pre: {\n        args: [],\n        body: \"this_f=Math.\" + f,\n        thisVars: [\"this_f\"]\n      },\n      body: {\n        args: [\"a\", \"b\", \"c\"],\n        body: \"a=this_f(b,c)\",\n        thisVars: [\"this_f\"]\n      },\n      funcName: f\n    });\n    exports[f + \"s\"] = makeOp({\n      args: [\"array\", \"array\", \"scalar\"],\n      pre: {\n        args: [],\n        body: \"this_f=Math.\" + f,\n        thisVars: [\"this_f\"]\n      },\n      body: {\n        args: [\"a\", \"b\", \"c\"],\n        body: \"a=this_f(b,c)\",\n        thisVars: [\"this_f\"]\n      },\n      funcName: f + \"s\"\n    });\n    exports[f + \"eq\"] = makeOp({\n      args: [\"array\", \"array\"],\n      pre: {\n        args: [],\n        body: \"this_f=Math.\" + f,\n        thisVars: [\"this_f\"]\n      },\n      body: {\n        args: [\"a\", \"b\"],\n        body: \"a=this_f(a,b)\",\n        thisVars: [\"this_f\"]\n      },\n      rvalue: true,\n      count: 2,\n      funcName: f + \"eq\"\n    });\n    exports[f + \"seq\"] = makeOp({\n      args: [\"array\", \"scalar\"],\n      pre: {\n        args: [],\n        body: \"this_f=Math.\" + f,\n        thisVars: [\"this_f\"]\n      },\n      body: {\n        args: [\"a\", \"b\"],\n        body: \"a=this_f(a,b)\",\n        thisVars: [\"this_f\"]\n      },\n      rvalue: true,\n      count: 2,\n      funcName: f + \"seq\"\n    });\n  }\n})();\n\nvar math_noncomm = [\"atan2\", \"pow\"];\n\n(function () {\n  for (var i = 0; i < math_noncomm.length; ++i) {\n    var f = math_noncomm[i];\n    exports[f + \"op\"] = makeOp({\n      args: [\"array\", \"array\", \"array\"],\n      pre: {\n        args: [],\n        body: \"this_f=Math.\" + f,\n        thisVars: [\"this_f\"]\n      },\n      body: {\n        args: [\"a\", \"b\", \"c\"],\n        body: \"a=this_f(c,b)\",\n        thisVars: [\"this_f\"]\n      },\n      funcName: f + \"op\"\n    });\n    exports[f + \"ops\"] = makeOp({\n      args: [\"array\", \"array\", \"scalar\"],\n      pre: {\n        args: [],\n        body: \"this_f=Math.\" + f,\n        thisVars: [\"this_f\"]\n      },\n      body: {\n        args: [\"a\", \"b\", \"c\"],\n        body: \"a=this_f(c,b)\",\n        thisVars: [\"this_f\"]\n      },\n      funcName: f + \"ops\"\n    });\n    exports[f + \"opeq\"] = makeOp({\n      args: [\"array\", \"array\"],\n      pre: {\n        args: [],\n        body: \"this_f=Math.\" + f,\n        thisVars: [\"this_f\"]\n      },\n      body: {\n        args: [\"a\", \"b\"],\n        body: \"a=this_f(b,a)\",\n        thisVars: [\"this_f\"]\n      },\n      rvalue: true,\n      count: 2,\n      funcName: f + \"opeq\"\n    });\n    exports[f + \"opseq\"] = makeOp({\n      args: [\"array\", \"scalar\"],\n      pre: {\n        args: [],\n        body: \"this_f=Math.\" + f,\n        thisVars: [\"this_f\"]\n      },\n      body: {\n        args: [\"a\", \"b\"],\n        body: \"a=this_f(b,a)\",\n        thisVars: [\"this_f\"]\n      },\n      rvalue: true,\n      count: 2,\n      funcName: f + \"opseq\"\n    });\n  }\n})();\n\nexports.any = compile({\n  args: [\"array\"],\n  pre: EmptyProc,\n  body: {\n    args: [{\n      name: \"a\",\n      lvalue: false,\n      rvalue: true,\n      count: 1\n    }],\n    body: \"if(a){return true}\",\n    localVars: [],\n    thisVars: []\n  },\n  post: {\n    args: [],\n    localVars: [],\n    thisVars: [],\n    body: \"return false\"\n  },\n  funcName: \"any\"\n});\nexports.all = compile({\n  args: [\"array\"],\n  pre: EmptyProc,\n  body: {\n    args: [{\n      name: \"x\",\n      lvalue: false,\n      rvalue: true,\n      count: 1\n    }],\n    body: \"if(!x){return false}\",\n    localVars: [],\n    thisVars: []\n  },\n  post: {\n    args: [],\n    localVars: [],\n    thisVars: [],\n    body: \"return true\"\n  },\n  funcName: \"all\"\n});\nexports.sum = compile({\n  args: [\"array\"],\n  pre: {\n    args: [],\n    localVars: [],\n    thisVars: [\"this_s\"],\n    body: \"this_s=0\"\n  },\n  body: {\n    args: [{\n      name: \"a\",\n      lvalue: false,\n      rvalue: true,\n      count: 1\n    }],\n    body: \"this_s+=a\",\n    localVars: [],\n    thisVars: [\"this_s\"]\n  },\n  post: {\n    args: [],\n    localVars: [],\n    thisVars: [\"this_s\"],\n    body: \"return this_s\"\n  },\n  funcName: \"sum\"\n});\nexports.prod = compile({\n  args: [\"array\"],\n  pre: {\n    args: [],\n    localVars: [],\n    thisVars: [\"this_s\"],\n    body: \"this_s=1\"\n  },\n  body: {\n    args: [{\n      name: \"a\",\n      lvalue: false,\n      rvalue: true,\n      count: 1\n    }],\n    body: \"this_s*=a\",\n    localVars: [],\n    thisVars: [\"this_s\"]\n  },\n  post: {\n    args: [],\n    localVars: [],\n    thisVars: [\"this_s\"],\n    body: \"return this_s\"\n  },\n  funcName: \"prod\"\n});\nexports.norm2squared = compile({\n  args: [\"array\"],\n  pre: {\n    args: [],\n    localVars: [],\n    thisVars: [\"this_s\"],\n    body: \"this_s=0\"\n  },\n  body: {\n    args: [{\n      name: \"a\",\n      lvalue: false,\n      rvalue: true,\n      count: 2\n    }],\n    body: \"this_s+=a*a\",\n    localVars: [],\n    thisVars: [\"this_s\"]\n  },\n  post: {\n    args: [],\n    localVars: [],\n    thisVars: [\"this_s\"],\n    body: \"return this_s\"\n  },\n  funcName: \"norm2squared\"\n});\nexports.norm2 = compile({\n  args: [\"array\"],\n  pre: {\n    args: [],\n    localVars: [],\n    thisVars: [\"this_s\"],\n    body: \"this_s=0\"\n  },\n  body: {\n    args: [{\n      name: \"a\",\n      lvalue: false,\n      rvalue: true,\n      count: 2\n    }],\n    body: \"this_s+=a*a\",\n    localVars: [],\n    thisVars: [\"this_s\"]\n  },\n  post: {\n    args: [],\n    localVars: [],\n    thisVars: [\"this_s\"],\n    body: \"return Math.sqrt(this_s)\"\n  },\n  funcName: \"norm2\"\n});\nexports.norminf = compile({\n  args: [\"array\"],\n  pre: {\n    args: [],\n    localVars: [],\n    thisVars: [\"this_s\"],\n    body: \"this_s=0\"\n  },\n  body: {\n    args: [{\n      name: \"a\",\n      lvalue: false,\n      rvalue: true,\n      count: 4\n    }],\n    body: \"if(-a>this_s){this_s=-a}else if(a>this_s){this_s=a}\",\n    localVars: [],\n    thisVars: [\"this_s\"]\n  },\n  post: {\n    args: [],\n    localVars: [],\n    thisVars: [\"this_s\"],\n    body: \"return this_s\"\n  },\n  funcName: \"norminf\"\n});\nexports.norm1 = compile({\n  args: [\"array\"],\n  pre: {\n    args: [],\n    localVars: [],\n    thisVars: [\"this_s\"],\n    body: \"this_s=0\"\n  },\n  body: {\n    args: [{\n      name: \"a\",\n      lvalue: false,\n      rvalue: true,\n      count: 3\n    }],\n    body: \"this_s+=a<0?-a:a\",\n    localVars: [],\n    thisVars: [\"this_s\"]\n  },\n  post: {\n    args: [],\n    localVars: [],\n    thisVars: [\"this_s\"],\n    body: \"return this_s\"\n  },\n  funcName: \"norm1\"\n});\nexports.sup = compile({\n  args: [\"array\"],\n  pre: {\n    body: \"this_h=-Infinity\",\n    args: [],\n    thisVars: [\"this_h\"],\n    localVars: []\n  },\n  body: {\n    body: \"if(_inline_1_arg0_>this_h)this_h=_inline_1_arg0_\",\n    args: [{\n      \"name\": \"_inline_1_arg0_\",\n      \"lvalue\": false,\n      \"rvalue\": true,\n      \"count\": 2\n    }],\n    thisVars: [\"this_h\"],\n    localVars: []\n  },\n  post: {\n    body: \"return this_h\",\n    args: [],\n    thisVars: [\"this_h\"],\n    localVars: []\n  }\n});\nexports.inf = compile({\n  args: [\"array\"],\n  pre: {\n    body: \"this_h=Infinity\",\n    args: [],\n    thisVars: [\"this_h\"],\n    localVars: []\n  },\n  body: {\n    body: \"if(_inline_1_arg0_<this_h)this_h=_inline_1_arg0_\",\n    args: [{\n      \"name\": \"_inline_1_arg0_\",\n      \"lvalue\": false,\n      \"rvalue\": true,\n      \"count\": 2\n    }],\n    thisVars: [\"this_h\"],\n    localVars: []\n  },\n  post: {\n    body: \"return this_h\",\n    args: [],\n    thisVars: [\"this_h\"],\n    localVars: []\n  }\n});\nexports.argmin = compile({\n  args: [\"index\", \"array\", \"shape\"],\n  pre: {\n    body: \"{this_v=Infinity;this_i=_inline_0_arg2_.slice(0)}\",\n    args: [{\n      name: \"_inline_0_arg0_\",\n      lvalue: false,\n      rvalue: false,\n      count: 0\n    }, {\n      name: \"_inline_0_arg1_\",\n      lvalue: false,\n      rvalue: false,\n      count: 0\n    }, {\n      name: \"_inline_0_arg2_\",\n      lvalue: false,\n      rvalue: true,\n      count: 1\n    }],\n    thisVars: [\"this_i\", \"this_v\"],\n    localVars: []\n  },\n  body: {\n    body: \"{if(_inline_1_arg1_<this_v){this_v=_inline_1_arg1_;for(var _inline_1_k=0;_inline_1_k<_inline_1_arg0_.length;++_inline_1_k){this_i[_inline_1_k]=_inline_1_arg0_[_inline_1_k]}}}\",\n    args: [{\n      name: \"_inline_1_arg0_\",\n      lvalue: false,\n      rvalue: true,\n      count: 2\n    }, {\n      name: \"_inline_1_arg1_\",\n      lvalue: false,\n      rvalue: true,\n      count: 2\n    }],\n    thisVars: [\"this_i\", \"this_v\"],\n    localVars: [\"_inline_1_k\"]\n  },\n  post: {\n    body: \"{return this_i}\",\n    args: [],\n    thisVars: [\"this_i\"],\n    localVars: []\n  }\n});\nexports.argmax = compile({\n  args: [\"index\", \"array\", \"shape\"],\n  pre: {\n    body: \"{this_v=-Infinity;this_i=_inline_0_arg2_.slice(0)}\",\n    args: [{\n      name: \"_inline_0_arg0_\",\n      lvalue: false,\n      rvalue: false,\n      count: 0\n    }, {\n      name: \"_inline_0_arg1_\",\n      lvalue: false,\n      rvalue: false,\n      count: 0\n    }, {\n      name: \"_inline_0_arg2_\",\n      lvalue: false,\n      rvalue: true,\n      count: 1\n    }],\n    thisVars: [\"this_i\", \"this_v\"],\n    localVars: []\n  },\n  body: {\n    body: \"{if(_inline_1_arg1_>this_v){this_v=_inline_1_arg1_;for(var _inline_1_k=0;_inline_1_k<_inline_1_arg0_.length;++_inline_1_k){this_i[_inline_1_k]=_inline_1_arg0_[_inline_1_k]}}}\",\n    args: [{\n      name: \"_inline_1_arg0_\",\n      lvalue: false,\n      rvalue: true,\n      count: 2\n    }, {\n      name: \"_inline_1_arg1_\",\n      lvalue: false,\n      rvalue: true,\n      count: 2\n    }],\n    thisVars: [\"this_i\", \"this_v\"],\n    localVars: [\"_inline_1_k\"]\n  },\n  post: {\n    body: \"{return this_i}\",\n    args: [],\n    thisVars: [\"this_i\"],\n    localVars: []\n  }\n});\nexports.random = makeOp({\n  args: [\"array\"],\n  pre: {\n    args: [],\n    body: \"this_f=Math.random\",\n    thisVars: [\"this_f\"]\n  },\n  body: {\n    args: [\"a\"],\n    body: \"a=this_f()\",\n    thisVars: [\"this_f\"]\n  },\n  funcName: \"random\"\n});\nexports.assign = makeOp({\n  args: [\"array\", \"array\"],\n  body: {\n    args: [\"a\", \"b\"],\n    body: \"a=b\"\n  },\n  funcName: \"assign\"\n});\nexports.assigns = makeOp({\n  args: [\"array\", \"scalar\"],\n  body: {\n    args: [\"a\", \"b\"],\n    body: \"a=b\"\n  },\n  funcName: \"assigns\"\n});\nexports.equals = compile({\n  args: [\"array\", \"array\"],\n  pre: EmptyProc,\n  body: {\n    args: [{\n      name: \"x\",\n      lvalue: false,\n      rvalue: true,\n      count: 1\n    }, {\n      name: \"y\",\n      lvalue: false,\n      rvalue: true,\n      count: 1\n    }],\n    body: \"if(x!==y){return false}\",\n    localVars: [],\n    thisVars: []\n  },\n  post: {\n    args: [],\n    localVars: [],\n    thisVars: [],\n    body: \"return true\"\n  },\n  funcName: \"equals\"\n});","map":{"version":3,"sources":["C:/Users/mikke/VSC/fantasy-django-react/fantasy-django/fantasy-react-app/node_modules/ndarray-ops/ndarray-ops.js"],"names":["compile","require","EmptyProc","body","args","thisVars","localVars","fixup","x","i","length","a","name","lvalue","rvalue","count","pcompile","user_args","pre","post","proc","funcName","makeOp","push","wrapper","Function","join","assign_ops","add","sub","mul","div","mod","band","bor","bxor","lshift","rshift","rrshift","id","op","exports","unary_ops","not","bnot","neg","recip","binary_ops","and","or","eq","neq","lt","gt","leq","geq","math_unary","f","math_comm","math_noncomm","any","all","sum","prod","norm2squared","norm2","norminf","norm1","sup","inf","argmin","argmax","random","assign","assigns","equals"],"mappings":"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","sourcesContent":["\"use strict\"\r\n\r\nvar compile = require(\"cwise-compiler\")\r\n\r\nvar EmptyProc = {\r\n  body: \"\",\r\n  args: [],\r\n  thisVars: [],\r\n  localVars: []\r\n}\r\n\r\nfunction fixup(x) {\r\n  if(!x) {\r\n    return EmptyProc\r\n  }\r\n  for(var i=0; i<x.args.length; ++i) {\r\n    var a = x.args[i]\r\n    if(i === 0) {\r\n      x.args[i] = {name: a, lvalue:true, rvalue: !!x.rvalue, count:x.count||1 }\r\n    } else {\r\n      x.args[i] = {name: a, lvalue:false, rvalue:true, count: 1}\r\n    }\r\n  }\r\n  if(!x.thisVars) {\r\n    x.thisVars = []\r\n  }\r\n  if(!x.localVars) {\r\n    x.localVars = []\r\n  }\r\n  return x\r\n}\r\n\r\nfunction pcompile(user_args) {\r\n  return compile({\r\n    args:     user_args.args,\r\n    pre:      fixup(user_args.pre),\r\n    body:     fixup(user_args.body),\r\n    post:     fixup(user_args.proc),\r\n    funcName: user_args.funcName\r\n  })\r\n}\r\n\r\nfunction makeOp(user_args) {\r\n  var args = []\r\n  for(var i=0; i<user_args.args.length; ++i) {\r\n    args.push(\"a\"+i)\r\n  }\r\n  var wrapper = new Function(\"P\", [\r\n    \"return function \", user_args.funcName, \"_ndarrayops(\", args.join(\",\"), \") {P(\", args.join(\",\"), \");return a0}\"\r\n  ].join(\"\"))\r\n  return wrapper(pcompile(user_args))\r\n}\r\n\r\nvar assign_ops = {\r\n  add:  \"+\",\r\n  sub:  \"-\",\r\n  mul:  \"*\",\r\n  div:  \"/\",\r\n  mod:  \"%\",\r\n  band: \"&\",\r\n  bor:  \"|\",\r\n  bxor: \"^\",\r\n  lshift: \"<<\",\r\n  rshift: \">>\",\r\n  rrshift: \">>>\"\r\n}\r\n;(function(){\r\n  for(var id in assign_ops) {\r\n    var op = assign_ops[id]\r\n    exports[id] = makeOp({\r\n      args: [\"array\",\"array\",\"array\"],\r\n      body: {args:[\"a\",\"b\",\"c\"],\r\n             body: \"a=b\"+op+\"c\"},\r\n      funcName: id\r\n    })\r\n    exports[id+\"eq\"] = makeOp({\r\n      args: [\"array\",\"array\"],\r\n      body: {args:[\"a\",\"b\"],\r\n             body:\"a\"+op+\"=b\"},\r\n      rvalue: true,\r\n      funcName: id+\"eq\"\r\n    })\r\n    exports[id+\"s\"] = makeOp({\r\n      args: [\"array\", \"array\", \"scalar\"],\r\n      body: {args:[\"a\",\"b\",\"s\"],\r\n             body:\"a=b\"+op+\"s\"},\r\n      funcName: id+\"s\"\r\n    })\r\n    exports[id+\"seq\"] = makeOp({\r\n      args: [\"array\",\"scalar\"],\r\n      body: {args:[\"a\",\"s\"],\r\n             body:\"a\"+op+\"=s\"},\r\n      rvalue: true,\r\n      funcName: id+\"seq\"\r\n    })\r\n  }\r\n})();\r\n\r\nvar unary_ops = {\r\n  not: \"!\",\r\n  bnot: \"~\",\r\n  neg: \"-\",\r\n  recip: \"1.0/\"\r\n}\r\n;(function(){\r\n  for(var id in unary_ops) {\r\n    var op = unary_ops[id]\r\n    exports[id] = makeOp({\r\n      args: [\"array\", \"array\"],\r\n      body: {args:[\"a\",\"b\"],\r\n             body:\"a=\"+op+\"b\"},\r\n      funcName: id\r\n    })\r\n    exports[id+\"eq\"] = makeOp({\r\n      args: [\"array\"],\r\n      body: {args:[\"a\"],\r\n             body:\"a=\"+op+\"a\"},\r\n      rvalue: true,\r\n      count: 2,\r\n      funcName: id+\"eq\"\r\n    })\r\n  }\r\n})();\r\n\r\nvar binary_ops = {\r\n  and: \"&&\",\r\n  or: \"||\",\r\n  eq: \"===\",\r\n  neq: \"!==\",\r\n  lt: \"<\",\r\n  gt: \">\",\r\n  leq: \"<=\",\r\n  geq: \">=\"\r\n}\r\n;(function() {\r\n  for(var id in binary_ops) {\r\n    var op = binary_ops[id]\r\n    exports[id] = makeOp({\r\n      args: [\"array\",\"array\",\"array\"],\r\n      body: {args:[\"a\", \"b\", \"c\"],\r\n             body:\"a=b\"+op+\"c\"},\r\n      funcName: id\r\n    })\r\n    exports[id+\"s\"] = makeOp({\r\n      args: [\"array\",\"array\",\"scalar\"],\r\n      body: {args:[\"a\", \"b\", \"s\"],\r\n             body:\"a=b\"+op+\"s\"},\r\n      funcName: id+\"s\"\r\n    })\r\n    exports[id+\"eq\"] = makeOp({\r\n      args: [\"array\", \"array\"],\r\n      body: {args:[\"a\", \"b\"],\r\n             body:\"a=a\"+op+\"b\"},\r\n      rvalue:true,\r\n      count:2,\r\n      funcName: id+\"eq\"\r\n    })\r\n    exports[id+\"seq\"] = makeOp({\r\n      args: [\"array\", \"scalar\"],\r\n      body: {args:[\"a\",\"s\"],\r\n             body:\"a=a\"+op+\"s\"},\r\n      rvalue:true,\r\n      count:2,\r\n      funcName: id+\"seq\"\r\n    })\r\n  }\r\n})();\r\n\r\nvar math_unary = [\r\n  \"abs\",\r\n  \"acos\",\r\n  \"asin\",\r\n  \"atan\",\r\n  \"ceil\",\r\n  \"cos\",\r\n  \"exp\",\r\n  \"floor\",\r\n  \"log\",\r\n  \"round\",\r\n  \"sin\",\r\n  \"sqrt\",\r\n  \"tan\"\r\n]\r\n;(function() {\r\n  for(var i=0; i<math_unary.length; ++i) {\r\n    var f = math_unary[i]\r\n    exports[f] = makeOp({\r\n                    args: [\"array\", \"array\"],\r\n                    pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\r\n                    body: {args:[\"a\",\"b\"], body:\"a=this_f(b)\", thisVars:[\"this_f\"]},\r\n                    funcName: f\r\n                  })\r\n    exports[f+\"eq\"] = makeOp({\r\n                      args: [\"array\"],\r\n                      pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\r\n                      body: {args: [\"a\"], body:\"a=this_f(a)\", thisVars:[\"this_f\"]},\r\n                      rvalue: true,\r\n                      count: 2,\r\n                      funcName: f+\"eq\"\r\n                    })\r\n  }\r\n})();\r\n\r\nvar math_comm = [\r\n  \"max\",\r\n  \"min\",\r\n  \"atan2\",\r\n  \"pow\"\r\n]\r\n;(function(){\r\n  for(var i=0; i<math_comm.length; ++i) {\r\n    var f= math_comm[i]\r\n    exports[f] = makeOp({\r\n                  args:[\"array\", \"array\", \"array\"],\r\n                  pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\r\n                  body: {args:[\"a\",\"b\",\"c\"], body:\"a=this_f(b,c)\", thisVars:[\"this_f\"]},\r\n                  funcName: f\r\n                })\r\n    exports[f+\"s\"] = makeOp({\r\n                  args:[\"array\", \"array\", \"scalar\"],\r\n                  pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\r\n                  body: {args:[\"a\",\"b\",\"c\"], body:\"a=this_f(b,c)\", thisVars:[\"this_f\"]},\r\n                  funcName: f+\"s\"\r\n                  })\r\n    exports[f+\"eq\"] = makeOp({ args:[\"array\", \"array\"],\r\n                  pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\r\n                  body: {args:[\"a\",\"b\"], body:\"a=this_f(a,b)\", thisVars:[\"this_f\"]},\r\n                  rvalue: true,\r\n                  count: 2,\r\n                  funcName: f+\"eq\"\r\n                  })\r\n    exports[f+\"seq\"] = makeOp({ args:[\"array\", \"scalar\"],\r\n                  pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\r\n                  body: {args:[\"a\",\"b\"], body:\"a=this_f(a,b)\", thisVars:[\"this_f\"]},\r\n                  rvalue:true,\r\n                  count:2,\r\n                  funcName: f+\"seq\"\r\n                  })\r\n  }\r\n})();\r\n\r\nvar math_noncomm = [\r\n  \"atan2\",\r\n  \"pow\"\r\n]\r\n;(function(){\r\n  for(var i=0; i<math_noncomm.length; ++i) {\r\n    var f= math_noncomm[i]\r\n    exports[f+\"op\"] = makeOp({\r\n                  args:[\"array\", \"array\", \"array\"],\r\n                  pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\r\n                  body: {args:[\"a\",\"b\",\"c\"], body:\"a=this_f(c,b)\", thisVars:[\"this_f\"]},\r\n                  funcName: f+\"op\"\r\n                })\r\n    exports[f+\"ops\"] = makeOp({\r\n                  args:[\"array\", \"array\", \"scalar\"],\r\n                  pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\r\n                  body: {args:[\"a\",\"b\",\"c\"], body:\"a=this_f(c,b)\", thisVars:[\"this_f\"]},\r\n                  funcName: f+\"ops\"\r\n                  })\r\n    exports[f+\"opeq\"] = makeOp({ args:[\"array\", \"array\"],\r\n                  pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\r\n                  body: {args:[\"a\",\"b\"], body:\"a=this_f(b,a)\", thisVars:[\"this_f\"]},\r\n                  rvalue: true,\r\n                  count: 2,\r\n                  funcName: f+\"opeq\"\r\n                  })\r\n    exports[f+\"opseq\"] = makeOp({ args:[\"array\", \"scalar\"],\r\n                  pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\r\n                  body: {args:[\"a\",\"b\"], body:\"a=this_f(b,a)\", thisVars:[\"this_f\"]},\r\n                  rvalue:true,\r\n                  count:2,\r\n                  funcName: f+\"opseq\"\r\n                  })\r\n  }\r\n})();\r\n\r\nexports.any = compile({\r\n  args:[\"array\"],\r\n  pre: EmptyProc,\r\n  body: {args:[{name:\"a\", lvalue:false, rvalue:true, count:1}], body: \"if(a){return true}\", localVars: [], thisVars: []},\r\n  post: {args:[], localVars:[], thisVars:[], body:\"return false\"},\r\n  funcName: \"any\"\r\n})\r\n\r\nexports.all = compile({\r\n  args:[\"array\"],\r\n  pre: EmptyProc,\r\n  body: {args:[{name:\"x\", lvalue:false, rvalue:true, count:1}], body: \"if(!x){return false}\", localVars: [], thisVars: []},\r\n  post: {args:[], localVars:[], thisVars:[], body:\"return true\"},\r\n  funcName: \"all\"\r\n})\r\n\r\nexports.sum = compile({\r\n  args:[\"array\"],\r\n  pre: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"this_s=0\"},\r\n  body: {args:[{name:\"a\", lvalue:false, rvalue:true, count:1}], body: \"this_s+=a\", localVars: [], thisVars: [\"this_s\"]},\r\n  post: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"return this_s\"},\r\n  funcName: \"sum\"\r\n})\r\n\r\nexports.prod = compile({\r\n  args:[\"array\"],\r\n  pre: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"this_s=1\"},\r\n  body: {args:[{name:\"a\", lvalue:false, rvalue:true, count:1}], body: \"this_s*=a\", localVars: [], thisVars: [\"this_s\"]},\r\n  post: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"return this_s\"},\r\n  funcName: \"prod\"\r\n})\r\n\r\nexports.norm2squared = compile({\r\n  args:[\"array\"],\r\n  pre: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"this_s=0\"},\r\n  body: {args:[{name:\"a\", lvalue:false, rvalue:true, count:2}], body: \"this_s+=a*a\", localVars: [], thisVars: [\"this_s\"]},\r\n  post: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"return this_s\"},\r\n  funcName: \"norm2squared\"\r\n})\r\n  \r\nexports.norm2 = compile({\r\n  args:[\"array\"],\r\n  pre: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"this_s=0\"},\r\n  body: {args:[{name:\"a\", lvalue:false, rvalue:true, count:2}], body: \"this_s+=a*a\", localVars: [], thisVars: [\"this_s\"]},\r\n  post: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"return Math.sqrt(this_s)\"},\r\n  funcName: \"norm2\"\r\n})\r\n  \r\n\r\nexports.norminf = compile({\r\n  args:[\"array\"],\r\n  pre: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"this_s=0\"},\r\n  body: {args:[{name:\"a\", lvalue:false, rvalue:true, count:4}], body:\"if(-a>this_s){this_s=-a}else if(a>this_s){this_s=a}\", localVars: [], thisVars: [\"this_s\"]},\r\n  post: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"return this_s\"},\r\n  funcName: \"norminf\"\r\n})\r\n\r\nexports.norm1 = compile({\r\n  args:[\"array\"],\r\n  pre: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"this_s=0\"},\r\n  body: {args:[{name:\"a\", lvalue:false, rvalue:true, count:3}], body: \"this_s+=a<0?-a:a\", localVars: [], thisVars: [\"this_s\"]},\r\n  post: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"return this_s\"},\r\n  funcName: \"norm1\"\r\n})\r\n\r\nexports.sup = compile({\r\n  args: [ \"array\" ],\r\n  pre:\r\n   { body: \"this_h=-Infinity\",\r\n     args: [],\r\n     thisVars: [ \"this_h\" ],\r\n     localVars: [] },\r\n  body:\r\n   { body: \"if(_inline_1_arg0_>this_h)this_h=_inline_1_arg0_\",\r\n     args: [{\"name\":\"_inline_1_arg0_\",\"lvalue\":false,\"rvalue\":true,\"count\":2} ],\r\n     thisVars: [ \"this_h\" ],\r\n     localVars: [] },\r\n  post:\r\n   { body: \"return this_h\",\r\n     args: [],\r\n     thisVars: [ \"this_h\" ],\r\n     localVars: [] }\r\n })\r\n\r\nexports.inf = compile({\r\n  args: [ \"array\" ],\r\n  pre:\r\n   { body: \"this_h=Infinity\",\r\n     args: [],\r\n     thisVars: [ \"this_h\" ],\r\n     localVars: [] },\r\n  body:\r\n   { body: \"if(_inline_1_arg0_<this_h)this_h=_inline_1_arg0_\",\r\n     args: [{\"name\":\"_inline_1_arg0_\",\"lvalue\":false,\"rvalue\":true,\"count\":2} ],\r\n     thisVars: [ \"this_h\" ],\r\n     localVars: [] },\r\n  post:\r\n   { body: \"return this_h\",\r\n     args: [],\r\n     thisVars: [ \"this_h\" ],\r\n     localVars: [] }\r\n })\r\n\r\nexports.argmin = compile({\r\n  args:[\"index\",\"array\",\"shape\"],\r\n  pre:{\r\n    body:\"{this_v=Infinity;this_i=_inline_0_arg2_.slice(0)}\",\r\n    args:[\r\n      {name:\"_inline_0_arg0_\",lvalue:false,rvalue:false,count:0},\r\n      {name:\"_inline_0_arg1_\",lvalue:false,rvalue:false,count:0},\r\n      {name:\"_inline_0_arg2_\",lvalue:false,rvalue:true,count:1}\r\n      ],\r\n    thisVars:[\"this_i\",\"this_v\"],\r\n    localVars:[]},\r\n  body:{\r\n    body:\"{if(_inline_1_arg1_<this_v){this_v=_inline_1_arg1_;for(var _inline_1_k=0;_inline_1_k<_inline_1_arg0_.length;++_inline_1_k){this_i[_inline_1_k]=_inline_1_arg0_[_inline_1_k]}}}\",\r\n    args:[\r\n      {name:\"_inline_1_arg0_\",lvalue:false,rvalue:true,count:2},\r\n      {name:\"_inline_1_arg1_\",lvalue:false,rvalue:true,count:2}],\r\n    thisVars:[\"this_i\",\"this_v\"],\r\n    localVars:[\"_inline_1_k\"]},\r\n  post:{\r\n    body:\"{return this_i}\",\r\n    args:[],\r\n    thisVars:[\"this_i\"],\r\n    localVars:[]}\r\n})\r\n\r\nexports.argmax = compile({\r\n  args:[\"index\",\"array\",\"shape\"],\r\n  pre:{\r\n    body:\"{this_v=-Infinity;this_i=_inline_0_arg2_.slice(0)}\",\r\n    args:[\r\n      {name:\"_inline_0_arg0_\",lvalue:false,rvalue:false,count:0},\r\n      {name:\"_inline_0_arg1_\",lvalue:false,rvalue:false,count:0},\r\n      {name:\"_inline_0_arg2_\",lvalue:false,rvalue:true,count:1}\r\n      ],\r\n    thisVars:[\"this_i\",\"this_v\"],\r\n    localVars:[]},\r\n  body:{\r\n    body:\"{if(_inline_1_arg1_>this_v){this_v=_inline_1_arg1_;for(var _inline_1_k=0;_inline_1_k<_inline_1_arg0_.length;++_inline_1_k){this_i[_inline_1_k]=_inline_1_arg0_[_inline_1_k]}}}\",\r\n    args:[\r\n      {name:\"_inline_1_arg0_\",lvalue:false,rvalue:true,count:2},\r\n      {name:\"_inline_1_arg1_\",lvalue:false,rvalue:true,count:2}],\r\n    thisVars:[\"this_i\",\"this_v\"],\r\n    localVars:[\"_inline_1_k\"]},\r\n  post:{\r\n    body:\"{return this_i}\",\r\n    args:[],\r\n    thisVars:[\"this_i\"],\r\n    localVars:[]}\r\n})  \r\n\r\nexports.random = makeOp({\r\n  args: [\"array\"],\r\n  pre: {args:[], body:\"this_f=Math.random\", thisVars:[\"this_f\"]},\r\n  body: {args: [\"a\"], body:\"a=this_f()\", thisVars:[\"this_f\"]},\r\n  funcName: \"random\"\r\n})\r\n\r\nexports.assign = makeOp({\r\n  args:[\"array\", \"array\"],\r\n  body: {args:[\"a\", \"b\"], body:\"a=b\"},\r\n  funcName: \"assign\" })\r\n\r\nexports.assigns = makeOp({\r\n  args:[\"array\", \"scalar\"],\r\n  body: {args:[\"a\", \"b\"], body:\"a=b\"},\r\n  funcName: \"assigns\" })\r\n\r\n\r\nexports.equals = compile({\r\n  args:[\"array\", \"array\"],\r\n  pre: EmptyProc,\r\n  body: {args:[{name:\"x\", lvalue:false, rvalue:true, count:1},\r\n               {name:\"y\", lvalue:false, rvalue:true, count:1}], \r\n        body: \"if(x!==y){return false}\", \r\n        localVars: [], \r\n        thisVars: []},\r\n  post: {args:[], localVars:[], thisVars:[], body:\"return true\"},\r\n  funcName: \"equals\"\r\n})\r\n\r\n\r\n"]},"metadata":{},"sourceType":"script"}