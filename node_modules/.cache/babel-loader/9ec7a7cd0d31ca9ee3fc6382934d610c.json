{"ast":null,"code":"'use strict';\n\nvar mod = require('./mod').mod;\n/*\r\n * look for intersection of two line segments\r\n *   (1->2 and 3->4) - returns array [x,y] if they do, null if not\r\n */\n\n\nexports.segmentsIntersect = segmentsIntersect;\n\nfunction segmentsIntersect(x1, y1, x2, y2, x3, y3, x4, y4) {\n  var a = x2 - x1;\n  var b = x3 - x1;\n  var c = x4 - x3;\n  var d = y2 - y1;\n  var e = y3 - y1;\n  var f = y4 - y3;\n  var det = a * f - c * d; // parallel lines? intersection is undefined\n  // ignore the case where they are colinear\n\n  if (det === 0) return null;\n  var t = (b * f - c * e) / det;\n  var u = (b * d - a * e) / det; // segments do not intersect?\n\n  if (u < 0 || u > 1 || t < 0 || t > 1) return null;\n  return {\n    x: x1 + a * t,\n    y: y1 + d * t\n  };\n}\n/*\r\n * find the minimum distance between two line segments (1->2 and 3->4)\r\n */\n\n\nexports.segmentDistance = function segmentDistance(x1, y1, x2, y2, x3, y3, x4, y4) {\n  if (segmentsIntersect(x1, y1, x2, y2, x3, y3, x4, y4)) return 0; // the two segments and their lengths squared\n\n  var x12 = x2 - x1;\n  var y12 = y2 - y1;\n  var x34 = x4 - x3;\n  var y34 = y4 - y3;\n  var ll12 = x12 * x12 + y12 * y12;\n  var ll34 = x34 * x34 + y34 * y34; // calculate distance squared, then take the sqrt at the very end\n\n  var dist2 = Math.min(perpDistance2(x12, y12, ll12, x3 - x1, y3 - y1), perpDistance2(x12, y12, ll12, x4 - x1, y4 - y1), perpDistance2(x34, y34, ll34, x1 - x3, y1 - y3), perpDistance2(x34, y34, ll34, x2 - x3, y2 - y3));\n  return Math.sqrt(dist2);\n};\n/*\r\n * distance squared from segment ab to point c\r\n * [xab, yab] is the vector b-a\r\n * [xac, yac] is the vector c-a\r\n * llab is the length squared of (b-a), just to simplify calculation\r\n */\n\n\nfunction perpDistance2(xab, yab, llab, xac, yac) {\n  var fcAB = xac * xab + yac * yab;\n\n  if (fcAB < 0) {\n    // point c is closer to point a\n    return xac * xac + yac * yac;\n  } else if (fcAB > llab) {\n    // point c is closer to point b\n    var xbc = xac - xab;\n    var ybc = yac - yab;\n    return xbc * xbc + ybc * ybc;\n  } else {\n    // perpendicular distance is the shortest\n    var crossProduct = xac * yab - yac * xab;\n    return crossProduct * crossProduct / llab;\n  }\n} // a very short-term cache for getTextLocation, just because\n// we're often looping over the same locations multiple times\n// invalidated as soon as we look at a different path\n\n\nvar locationCache, workingPath, workingTextWidth; // turn a path and position along it into x, y, and angle for the given text\n\nexports.getTextLocation = function getTextLocation(path, totalPathLen, positionOnPath, textWidth) {\n  if (path !== workingPath || textWidth !== workingTextWidth) {\n    locationCache = {};\n    workingPath = path;\n    workingTextWidth = textWidth;\n  }\n\n  if (locationCache[positionOnPath]) {\n    return locationCache[positionOnPath];\n  } // for the angle, use points on the path separated by the text width\n  // even though due to curvature, the text will cover a bit more than that\n\n\n  var p0 = path.getPointAtLength(mod(positionOnPath - textWidth / 2, totalPathLen));\n  var p1 = path.getPointAtLength(mod(positionOnPath + textWidth / 2, totalPathLen)); // note: atan handles 1/0 nicely\n\n  var theta = Math.atan((p1.y - p0.y) / (p1.x - p0.x)); // center the text at 2/3 of the center position plus 1/3 the p0/p1 midpoint\n  // that's the average position of this segment, assuming it's roughly quadratic\n\n  var pCenter = path.getPointAtLength(mod(positionOnPath, totalPathLen));\n  var x = (pCenter.x * 4 + p0.x + p1.x) / 6;\n  var y = (pCenter.y * 4 + p0.y + p1.y) / 6;\n  var out = {\n    x: x,\n    y: y,\n    theta: theta\n  };\n  locationCache[positionOnPath] = out;\n  return out;\n};\n\nexports.clearLocationCache = function () {\n  workingPath = null;\n};\n/*\r\n * Find the segment of `path` that's within the visible area\r\n * given by `bounds` {left, right, top, bottom}, to within a\r\n * precision of `buffer` px\r\n *\r\n * returns: undefined if nothing is visible, else object:\r\n * {\r\n *   min: position where the path first enters bounds, or 0 if it\r\n *        starts within bounds\r\n *   max: position where the path last exits bounds, or the path length\r\n *        if it finishes within bounds\r\n *   len: max - min, ie the length of visible path\r\n *   total: the total path length - just included so the caller doesn't\r\n *        need to call path.getTotalLength() again\r\n *   isClosed: true iff the start and end points of the path are both visible\r\n *        and are at the same point\r\n * }\r\n *\r\n * Works by starting from either end and repeatedly finding the distance from\r\n * that point to the plot area, and if it's outside the plot, moving along the\r\n * path by that distance (because the plot must be at least that far away on\r\n * the path). Note that if a path enters, exits, and re-enters the plot, we\r\n * will not capture this behavior.\r\n */\n\n\nexports.getVisibleSegment = function getVisibleSegment(path, bounds, buffer) {\n  var left = bounds.left;\n  var right = bounds.right;\n  var top = bounds.top;\n  var bottom = bounds.bottom;\n  var pMin = 0;\n  var pTotal = path.getTotalLength();\n  var pMax = pTotal;\n  var pt0, ptTotal;\n\n  function getDistToPlot(len) {\n    var pt = path.getPointAtLength(len); // hold on to the start and end points for `closed`\n\n    if (len === 0) pt0 = pt;else if (len === pTotal) ptTotal = pt;\n    var dx = pt.x < left ? left - pt.x : pt.x > right ? pt.x - right : 0;\n    var dy = pt.y < top ? top - pt.y : pt.y > bottom ? pt.y - bottom : 0;\n    return Math.sqrt(dx * dx + dy * dy);\n  }\n\n  var distToPlot = getDistToPlot(pMin);\n\n  while (distToPlot) {\n    pMin += distToPlot + buffer;\n    if (pMin > pMax) return;\n    distToPlot = getDistToPlot(pMin);\n  }\n\n  distToPlot = getDistToPlot(pMax);\n\n  while (distToPlot) {\n    pMax -= distToPlot + buffer;\n    if (pMin > pMax) return;\n    distToPlot = getDistToPlot(pMax);\n  }\n\n  return {\n    min: pMin,\n    max: pMax,\n    len: pMax - pMin,\n    total: pTotal,\n    isClosed: pMin === 0 && pMax === pTotal && Math.abs(pt0.x - ptTotal.x) < 0.1 && Math.abs(pt0.y - ptTotal.y) < 0.1\n  };\n};\n/**\r\n * Find point on SVG path corresponding to a given constraint coordinate\r\n *\r\n * @param {SVGPathElement} path\r\n * @param {Number} val : constraint coordinate value\r\n * @param {String} coord : 'x' or 'y' the constraint coordinate\r\n * @param {Object} opts :\r\n *  - {Number} pathLength : supply total path length before hand\r\n *  - {Number} tolerance\r\n *  - {Number} iterationLimit\r\n * @return {SVGPoint}\r\n */\n\n\nexports.findPointOnPath = function findPointOnPath(path, val, coord, opts) {\n  opts = opts || {};\n  var pathLength = opts.pathLength || path.getTotalLength();\n  var tolerance = opts.tolerance || 1e-3;\n  var iterationLimit = opts.iterationLimit || 30; // if path starts at a val greater than the path tail (like on vertical violins),\n  // we must flip the sign of the computed diff.\n\n  var mul = path.getPointAtLength(0)[coord] > path.getPointAtLength(pathLength)[coord] ? -1 : 1;\n  var i = 0;\n  var b0 = 0;\n  var b1 = pathLength;\n  var mid;\n  var pt;\n  var diff;\n\n  while (i < iterationLimit) {\n    mid = (b0 + b1) / 2;\n    pt = path.getPointAtLength(mid);\n    diff = pt[coord] - val;\n\n    if (Math.abs(diff) < tolerance) {\n      return pt;\n    } else {\n      if (mul * diff > 0) {\n        b1 = mid;\n      } else {\n        b0 = mid;\n      }\n\n      i++;\n    }\n  }\n\n  return pt;\n};","map":{"version":3,"sources":["C:/Users/mikke/VSC/fantasy-django-react/fantasy-django/fantasy-react-app/node_modules/plotly.js/src/lib/geometry2d.js"],"names":["mod","require","exports","segmentsIntersect","x1","y1","x2","y2","x3","y3","x4","y4","a","b","c","d","e","f","det","t","u","x","y","segmentDistance","x12","y12","x34","y34","ll12","ll34","dist2","Math","min","perpDistance2","sqrt","xab","yab","llab","xac","yac","fcAB","xbc","ybc","crossProduct","locationCache","workingPath","workingTextWidth","getTextLocation","path","totalPathLen","positionOnPath","textWidth","p0","getPointAtLength","p1","theta","atan","pCenter","out","clearLocationCache","getVisibleSegment","bounds","buffer","left","right","top","bottom","pMin","pTotal","getTotalLength","pMax","pt0","ptTotal","getDistToPlot","len","pt","dx","dy","distToPlot","max","total","isClosed","abs","findPointOnPath","val","coord","opts","pathLength","tolerance","iterationLimit","mul","i","b0","b1","mid","diff"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nvar mod = require('./mod').mod;\r\n\r\n/*\r\n * look for intersection of two line segments\r\n *   (1->2 and 3->4) - returns array [x,y] if they do, null if not\r\n */\r\nexports.segmentsIntersect = segmentsIntersect;\r\nfunction segmentsIntersect(x1, y1, x2, y2, x3, y3, x4, y4) {\r\n    var a = x2 - x1;\r\n    var b = x3 - x1;\r\n    var c = x4 - x3;\r\n    var d = y2 - y1;\r\n    var e = y3 - y1;\r\n    var f = y4 - y3;\r\n    var det = a * f - c * d;\r\n    // parallel lines? intersection is undefined\r\n    // ignore the case where they are colinear\r\n    if(det === 0) return null;\r\n    var t = (b * f - c * e) / det;\r\n    var u = (b * d - a * e) / det;\r\n    // segments do not intersect?\r\n    if(u < 0 || u > 1 || t < 0 || t > 1) return null;\r\n\r\n    return {x: x1 + a * t, y: y1 + d * t};\r\n}\r\n\r\n/*\r\n * find the minimum distance between two line segments (1->2 and 3->4)\r\n */\r\nexports.segmentDistance = function segmentDistance(x1, y1, x2, y2, x3, y3, x4, y4) {\r\n    if(segmentsIntersect(x1, y1, x2, y2, x3, y3, x4, y4)) return 0;\r\n\r\n    // the two segments and their lengths squared\r\n    var x12 = x2 - x1;\r\n    var y12 = y2 - y1;\r\n    var x34 = x4 - x3;\r\n    var y34 = y4 - y3;\r\n    var ll12 = x12 * x12 + y12 * y12;\r\n    var ll34 = x34 * x34 + y34 * y34;\r\n\r\n    // calculate distance squared, then take the sqrt at the very end\r\n    var dist2 = Math.min(\r\n        perpDistance2(x12, y12, ll12, x3 - x1, y3 - y1),\r\n        perpDistance2(x12, y12, ll12, x4 - x1, y4 - y1),\r\n        perpDistance2(x34, y34, ll34, x1 - x3, y1 - y3),\r\n        perpDistance2(x34, y34, ll34, x2 - x3, y2 - y3)\r\n    );\r\n\r\n    return Math.sqrt(dist2);\r\n};\r\n\r\n/*\r\n * distance squared from segment ab to point c\r\n * [xab, yab] is the vector b-a\r\n * [xac, yac] is the vector c-a\r\n * llab is the length squared of (b-a), just to simplify calculation\r\n */\r\nfunction perpDistance2(xab, yab, llab, xac, yac) {\r\n    var fcAB = (xac * xab + yac * yab);\r\n    if(fcAB < 0) {\r\n        // point c is closer to point a\r\n        return xac * xac + yac * yac;\r\n    } else if(fcAB > llab) {\r\n        // point c is closer to point b\r\n        var xbc = xac - xab;\r\n        var ybc = yac - yab;\r\n        return xbc * xbc + ybc * ybc;\r\n    } else {\r\n        // perpendicular distance is the shortest\r\n        var crossProduct = xac * yab - yac * xab;\r\n        return crossProduct * crossProduct / llab;\r\n    }\r\n}\r\n\r\n// a very short-term cache for getTextLocation, just because\r\n// we're often looping over the same locations multiple times\r\n// invalidated as soon as we look at a different path\r\nvar locationCache, workingPath, workingTextWidth;\r\n\r\n// turn a path and position along it into x, y, and angle for the given text\r\nexports.getTextLocation = function getTextLocation(path, totalPathLen, positionOnPath, textWidth) {\r\n    if(path !== workingPath || textWidth !== workingTextWidth) {\r\n        locationCache = {};\r\n        workingPath = path;\r\n        workingTextWidth = textWidth;\r\n    }\r\n    if(locationCache[positionOnPath]) {\r\n        return locationCache[positionOnPath];\r\n    }\r\n\r\n    // for the angle, use points on the path separated by the text width\r\n    // even though due to curvature, the text will cover a bit more than that\r\n    var p0 = path.getPointAtLength(mod(positionOnPath - textWidth / 2, totalPathLen));\r\n    var p1 = path.getPointAtLength(mod(positionOnPath + textWidth / 2, totalPathLen));\r\n    // note: atan handles 1/0 nicely\r\n    var theta = Math.atan((p1.y - p0.y) / (p1.x - p0.x));\r\n    // center the text at 2/3 of the center position plus 1/3 the p0/p1 midpoint\r\n    // that's the average position of this segment, assuming it's roughly quadratic\r\n    var pCenter = path.getPointAtLength(mod(positionOnPath, totalPathLen));\r\n    var x = (pCenter.x * 4 + p0.x + p1.x) / 6;\r\n    var y = (pCenter.y * 4 + p0.y + p1.y) / 6;\r\n\r\n    var out = {x: x, y: y, theta: theta};\r\n    locationCache[positionOnPath] = out;\r\n    return out;\r\n};\r\n\r\nexports.clearLocationCache = function() {\r\n    workingPath = null;\r\n};\r\n\r\n/*\r\n * Find the segment of `path` that's within the visible area\r\n * given by `bounds` {left, right, top, bottom}, to within a\r\n * precision of `buffer` px\r\n *\r\n * returns: undefined if nothing is visible, else object:\r\n * {\r\n *   min: position where the path first enters bounds, or 0 if it\r\n *        starts within bounds\r\n *   max: position where the path last exits bounds, or the path length\r\n *        if it finishes within bounds\r\n *   len: max - min, ie the length of visible path\r\n *   total: the total path length - just included so the caller doesn't\r\n *        need to call path.getTotalLength() again\r\n *   isClosed: true iff the start and end points of the path are both visible\r\n *        and are at the same point\r\n * }\r\n *\r\n * Works by starting from either end and repeatedly finding the distance from\r\n * that point to the plot area, and if it's outside the plot, moving along the\r\n * path by that distance (because the plot must be at least that far away on\r\n * the path). Note that if a path enters, exits, and re-enters the plot, we\r\n * will not capture this behavior.\r\n */\r\nexports.getVisibleSegment = function getVisibleSegment(path, bounds, buffer) {\r\n    var left = bounds.left;\r\n    var right = bounds.right;\r\n    var top = bounds.top;\r\n    var bottom = bounds.bottom;\r\n\r\n    var pMin = 0;\r\n    var pTotal = path.getTotalLength();\r\n    var pMax = pTotal;\r\n\r\n    var pt0, ptTotal;\r\n\r\n    function getDistToPlot(len) {\r\n        var pt = path.getPointAtLength(len);\r\n\r\n        // hold on to the start and end points for `closed`\r\n        if(len === 0) pt0 = pt;\r\n        else if(len === pTotal) ptTotal = pt;\r\n\r\n        var dx = (pt.x < left) ? left - pt.x : (pt.x > right ? pt.x - right : 0);\r\n        var dy = (pt.y < top) ? top - pt.y : (pt.y > bottom ? pt.y - bottom : 0);\r\n        return Math.sqrt(dx * dx + dy * dy);\r\n    }\r\n\r\n    var distToPlot = getDistToPlot(pMin);\r\n    while(distToPlot) {\r\n        pMin += distToPlot + buffer;\r\n        if(pMin > pMax) return;\r\n        distToPlot = getDistToPlot(pMin);\r\n    }\r\n\r\n    distToPlot = getDistToPlot(pMax);\r\n    while(distToPlot) {\r\n        pMax -= distToPlot + buffer;\r\n        if(pMin > pMax) return;\r\n        distToPlot = getDistToPlot(pMax);\r\n    }\r\n\r\n    return {\r\n        min: pMin,\r\n        max: pMax,\r\n        len: pMax - pMin,\r\n        total: pTotal,\r\n        isClosed: pMin === 0 && pMax === pTotal &&\r\n            Math.abs(pt0.x - ptTotal.x) < 0.1 &&\r\n            Math.abs(pt0.y - ptTotal.y) < 0.1\r\n    };\r\n};\r\n\r\n/**\r\n * Find point on SVG path corresponding to a given constraint coordinate\r\n *\r\n * @param {SVGPathElement} path\r\n * @param {Number} val : constraint coordinate value\r\n * @param {String} coord : 'x' or 'y' the constraint coordinate\r\n * @param {Object} opts :\r\n *  - {Number} pathLength : supply total path length before hand\r\n *  - {Number} tolerance\r\n *  - {Number} iterationLimit\r\n * @return {SVGPoint}\r\n */\r\nexports.findPointOnPath = function findPointOnPath(path, val, coord, opts) {\r\n    opts = opts || {};\r\n\r\n    var pathLength = opts.pathLength || path.getTotalLength();\r\n    var tolerance = opts.tolerance || 1e-3;\r\n    var iterationLimit = opts.iterationLimit || 30;\r\n\r\n    // if path starts at a val greater than the path tail (like on vertical violins),\r\n    // we must flip the sign of the computed diff.\r\n    var mul = path.getPointAtLength(0)[coord] > path.getPointAtLength(pathLength)[coord] ? -1 : 1;\r\n\r\n    var i = 0;\r\n    var b0 = 0;\r\n    var b1 = pathLength;\r\n    var mid;\r\n    var pt;\r\n    var diff;\r\n\r\n    while(i < iterationLimit) {\r\n        mid = (b0 + b1) / 2;\r\n        pt = path.getPointAtLength(mid);\r\n        diff = pt[coord] - val;\r\n\r\n        if(Math.abs(diff) < tolerance) {\r\n            return pt;\r\n        } else {\r\n            if(mul * diff > 0) {\r\n                b1 = mid;\r\n            } else {\r\n                b0 = mid;\r\n            }\r\n            i++;\r\n        }\r\n    }\r\n    return pt;\r\n};\r\n"]},"metadata":{},"sourceType":"script"}