{"ast":null,"code":"'use strict';\n\nvar cluster = require('@plotly/point-cluster');\n\nvar isNumeric = require('fast-isnumeric');\n\nvar scatterglPlot = require('../scattergl/plot');\n\nvar sceneUpdate = require('../scattergl/scene_update');\n\nvar convert = require('../scattergl/convert');\n\nvar Lib = require('../../lib');\n\nvar TOO_MANY_POINTS = require('../scattergl/constants').TOO_MANY_POINTS;\n\nmodule.exports = function plot(gd, subplot, cdata) {\n  if (!cdata.length) return;\n  var radialAxis = subplot.radialAxis;\n  var angularAxis = subplot.angularAxis;\n  var scene = sceneUpdate(gd, subplot);\n  cdata.forEach(function (cdscatter) {\n    if (!cdscatter || !cdscatter[0] || !cdscatter[0].trace) return;\n    var cd = cdscatter[0];\n    var trace = cd.trace;\n    var stash = cd.t;\n    var len = trace._length;\n    var rArray = stash.r;\n    var thetaArray = stash.theta;\n    var opts = stash.opts;\n    var i;\n    var subRArray = rArray.slice();\n    var subThetaArray = thetaArray.slice(); // filter out by range\n\n    for (i = 0; i < rArray.length; i++) {\n      if (!subplot.isPtInside({\n        r: rArray[i],\n        theta: thetaArray[i]\n      })) {\n        subRArray[i] = NaN;\n        subThetaArray[i] = NaN;\n      }\n    }\n\n    var positions = new Array(len * 2);\n    var x = Array(len);\n    var y = Array(len);\n\n    for (i = 0; i < len; i++) {\n      var r = subRArray[i];\n      var xx, yy;\n\n      if (isNumeric(r)) {\n        var rg = radialAxis.c2g(r);\n        var thetag = angularAxis.c2g(subThetaArray[i], trace.thetaunit);\n        xx = rg * Math.cos(thetag);\n        yy = rg * Math.sin(thetag);\n      } else {\n        xx = yy = NaN;\n      }\n\n      x[i] = positions[i * 2] = xx;\n      y[i] = positions[i * 2 + 1] = yy;\n    }\n\n    stash.tree = cluster(positions); // FIXME: see scattergl.js#109\n\n    if (opts.marker && len >= TOO_MANY_POINTS) {\n      opts.marker.cluster = stash.tree;\n    }\n\n    if (opts.marker) {\n      opts.markerSel.positions = opts.markerUnsel.positions = opts.marker.positions = positions;\n    }\n\n    if (opts.line && positions.length > 1) {\n      Lib.extendFlat(opts.line, convert.linePositions(gd, trace, positions));\n    }\n\n    if (opts.text) {\n      Lib.extendFlat(opts.text, {\n        positions: positions\n      }, convert.textPosition(gd, trace, opts.text, opts.marker));\n      Lib.extendFlat(opts.textSel, {\n        positions: positions\n      }, convert.textPosition(gd, trace, opts.text, opts.markerSel));\n      Lib.extendFlat(opts.textUnsel, {\n        positions: positions\n      }, convert.textPosition(gd, trace, opts.text, opts.markerUnsel));\n    }\n\n    if (opts.fill && !scene.fill2d) scene.fill2d = true;\n    if (opts.marker && !scene.scatter2d) scene.scatter2d = true;\n    if (opts.line && !scene.line2d) scene.line2d = true;\n    if (opts.text && !scene.glText) scene.glText = true;\n    scene.lineOptions.push(opts.line);\n    scene.fillOptions.push(opts.fill);\n    scene.markerOptions.push(opts.marker);\n    scene.markerSelectedOptions.push(opts.markerSel);\n    scene.markerUnselectedOptions.push(opts.markerUnsel);\n    scene.textOptions.push(opts.text);\n    scene.textSelectedOptions.push(opts.textSel);\n    scene.textUnselectedOptions.push(opts.textUnsel);\n    scene.selectBatch.push([]);\n    scene.unselectBatch.push([]);\n    stash.x = x;\n    stash.y = y;\n    stash.rawx = x;\n    stash.rawy = y;\n    stash.r = rArray;\n    stash.theta = thetaArray;\n    stash.positions = positions;\n    stash._scene = scene;\n    stash.index = scene.count;\n    scene.count++;\n  });\n  return scatterglPlot(gd, subplot, cdata);\n};","map":{"version":3,"sources":["C:/Users/mikke/VSC/fantasy-django-react/fantasy-django/fantasy-react-app/node_modules/plotly.js/src/traces/scatterpolargl/plot.js"],"names":["cluster","require","isNumeric","scatterglPlot","sceneUpdate","convert","Lib","TOO_MANY_POINTS","module","exports","plot","gd","subplot","cdata","length","radialAxis","angularAxis","scene","forEach","cdscatter","trace","cd","stash","t","len","_length","rArray","r","thetaArray","theta","opts","i","subRArray","slice","subThetaArray","isPtInside","NaN","positions","Array","x","y","xx","yy","rg","c2g","thetag","thetaunit","Math","cos","sin","tree","marker","markerSel","markerUnsel","line","extendFlat","linePositions","text","textPosition","textSel","textUnsel","fill","fill2d","scatter2d","line2d","glText","lineOptions","push","fillOptions","markerOptions","markerSelectedOptions","markerUnselectedOptions","textOptions","textSelectedOptions","textUnselectedOptions","selectBatch","unselectBatch","rawx","rawy","_scene","index","count"],"mappings":"AAAA;;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,uBAAD,CAArB;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,gBAAD,CAAvB;;AAEA,IAAIE,aAAa,GAAGF,OAAO,CAAC,mBAAD,CAA3B;;AACA,IAAIG,WAAW,GAAGH,OAAO,CAAC,2BAAD,CAAzB;;AACA,IAAII,OAAO,GAAGJ,OAAO,CAAC,sBAAD,CAArB;;AAEA,IAAIK,GAAG,GAAGL,OAAO,CAAC,WAAD,CAAjB;;AAEA,IAAIM,eAAe,GAAGN,OAAO,CAAC,wBAAD,CAAP,CAAkCM,eAAxD;;AAEAC,MAAM,CAACC,OAAP,GAAiB,SAASC,IAAT,CAAcC,EAAd,EAAkBC,OAAlB,EAA2BC,KAA3B,EAAkC;AAC/C,MAAG,CAACA,KAAK,CAACC,MAAV,EAAkB;AAElB,MAAIC,UAAU,GAAGH,OAAO,CAACG,UAAzB;AACA,MAAIC,WAAW,GAAGJ,OAAO,CAACI,WAA1B;AACA,MAAIC,KAAK,GAAGb,WAAW,CAACO,EAAD,EAAKC,OAAL,CAAvB;AAEAC,EAAAA,KAAK,CAACK,OAAN,CAAc,UAASC,SAAT,EAAoB;AAC9B,QAAG,CAACA,SAAD,IAAc,CAACA,SAAS,CAAC,CAAD,CAAxB,IAA+B,CAACA,SAAS,CAAC,CAAD,CAAT,CAAaC,KAAhD,EAAuD;AACvD,QAAIC,EAAE,GAAGF,SAAS,CAAC,CAAD,CAAlB;AACA,QAAIC,KAAK,GAAGC,EAAE,CAACD,KAAf;AACA,QAAIE,KAAK,GAAGD,EAAE,CAACE,CAAf;AACA,QAAIC,GAAG,GAAGJ,KAAK,CAACK,OAAhB;AACA,QAAIC,MAAM,GAAGJ,KAAK,CAACK,CAAnB;AACA,QAAIC,UAAU,GAAGN,KAAK,CAACO,KAAvB;AACA,QAAIC,IAAI,GAAGR,KAAK,CAACQ,IAAjB;AACA,QAAIC,CAAJ;AAEA,QAAIC,SAAS,GAAGN,MAAM,CAACO,KAAP,EAAhB;AACA,QAAIC,aAAa,GAAGN,UAAU,CAACK,KAAX,EAApB,CAZ8B,CAc9B;;AACA,SAAIF,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGL,MAAM,CAACZ,MAAtB,EAA8BiB,CAAC,EAA/B,EAAmC;AAC/B,UAAG,CAACnB,OAAO,CAACuB,UAAR,CAAmB;AAACR,QAAAA,CAAC,EAAED,MAAM,CAACK,CAAD,CAAV;AAAeF,QAAAA,KAAK,EAAED,UAAU,CAACG,CAAD;AAAhC,OAAnB,CAAJ,EAA8D;AAC1DC,QAAAA,SAAS,CAACD,CAAD,CAAT,GAAeK,GAAf;AACAF,QAAAA,aAAa,CAACH,CAAD,CAAb,GAAmBK,GAAnB;AACH;AACJ;;AAED,QAAIC,SAAS,GAAG,IAAIC,KAAJ,CAAUd,GAAG,GAAG,CAAhB,CAAhB;AACA,QAAIe,CAAC,GAAGD,KAAK,CAACd,GAAD,CAAb;AACA,QAAIgB,CAAC,GAAGF,KAAK,CAACd,GAAD,CAAb;;AAEA,SAAIO,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGP,GAAf,EAAoBO,CAAC,EAArB,EAAyB;AACrB,UAAIJ,CAAC,GAAGK,SAAS,CAACD,CAAD,CAAjB;AACA,UAAIU,EAAJ,EAAQC,EAAR;;AAEA,UAAGxC,SAAS,CAACyB,CAAD,CAAZ,EAAiB;AACb,YAAIgB,EAAE,GAAG5B,UAAU,CAAC6B,GAAX,CAAejB,CAAf,CAAT;AACA,YAAIkB,MAAM,GAAG7B,WAAW,CAAC4B,GAAZ,CAAgBV,aAAa,CAACH,CAAD,CAA7B,EAAkCX,KAAK,CAAC0B,SAAxC,CAAb;AACAL,QAAAA,EAAE,GAAGE,EAAE,GAAGI,IAAI,CAACC,GAAL,CAASH,MAAT,CAAV;AACAH,QAAAA,EAAE,GAAGC,EAAE,GAAGI,IAAI,CAACE,GAAL,CAASJ,MAAT,CAAV;AACH,OALD,MAKO;AACHJ,QAAAA,EAAE,GAAGC,EAAE,GAAGN,GAAV;AACH;;AACDG,MAAAA,CAAC,CAACR,CAAD,CAAD,GAAOM,SAAS,CAACN,CAAC,GAAG,CAAL,CAAT,GAAmBU,EAA1B;AACAD,MAAAA,CAAC,CAACT,CAAD,CAAD,GAAOM,SAAS,CAACN,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAT,GAAuBW,EAA9B;AACH;;AAEDpB,IAAAA,KAAK,CAAC4B,IAAN,GAAalD,OAAO,CAACqC,SAAD,CAApB,CA1C8B,CA4C9B;;AACA,QAAGP,IAAI,CAACqB,MAAL,IAAe3B,GAAG,IAAIjB,eAAzB,EAA0C;AACtCuB,MAAAA,IAAI,CAACqB,MAAL,CAAYnD,OAAZ,GAAsBsB,KAAK,CAAC4B,IAA5B;AACH;;AAED,QAAGpB,IAAI,CAACqB,MAAR,EAAgB;AACZrB,MAAAA,IAAI,CAACsB,SAAL,CAAef,SAAf,GAA2BP,IAAI,CAACuB,WAAL,CAAiBhB,SAAjB,GAA6BP,IAAI,CAACqB,MAAL,CAAYd,SAAZ,GAAwBA,SAAhF;AACH;;AAED,QAAGP,IAAI,CAACwB,IAAL,IAAajB,SAAS,CAACvB,MAAV,GAAmB,CAAnC,EAAsC;AAClCR,MAAAA,GAAG,CAACiD,UAAJ,CACIzB,IAAI,CAACwB,IADT,EAEIjD,OAAO,CAACmD,aAAR,CAAsB7C,EAAtB,EAA0BS,KAA1B,EAAiCiB,SAAjC,CAFJ;AAIH;;AAED,QAAGP,IAAI,CAAC2B,IAAR,EAAc;AACVnD,MAAAA,GAAG,CAACiD,UAAJ,CACIzB,IAAI,CAAC2B,IADT,EAEI;AAACpB,QAAAA,SAAS,EAAEA;AAAZ,OAFJ,EAGIhC,OAAO,CAACqD,YAAR,CAAqB/C,EAArB,EAAyBS,KAAzB,EAAgCU,IAAI,CAAC2B,IAArC,EAA2C3B,IAAI,CAACqB,MAAhD,CAHJ;AAKA7C,MAAAA,GAAG,CAACiD,UAAJ,CACIzB,IAAI,CAAC6B,OADT,EAEI;AAACtB,QAAAA,SAAS,EAAEA;AAAZ,OAFJ,EAGIhC,OAAO,CAACqD,YAAR,CAAqB/C,EAArB,EAAyBS,KAAzB,EAAgCU,IAAI,CAAC2B,IAArC,EAA2C3B,IAAI,CAACsB,SAAhD,CAHJ;AAKA9C,MAAAA,GAAG,CAACiD,UAAJ,CACIzB,IAAI,CAAC8B,SADT,EAEI;AAACvB,QAAAA,SAAS,EAAEA;AAAZ,OAFJ,EAGIhC,OAAO,CAACqD,YAAR,CAAqB/C,EAArB,EAAyBS,KAAzB,EAAgCU,IAAI,CAAC2B,IAArC,EAA2C3B,IAAI,CAACuB,WAAhD,CAHJ;AAKH;;AAED,QAAGvB,IAAI,CAAC+B,IAAL,IAAa,CAAC5C,KAAK,CAAC6C,MAAvB,EAA+B7C,KAAK,CAAC6C,MAAN,GAAe,IAAf;AAC/B,QAAGhC,IAAI,CAACqB,MAAL,IAAe,CAAClC,KAAK,CAAC8C,SAAzB,EAAoC9C,KAAK,CAAC8C,SAAN,GAAkB,IAAlB;AACpC,QAAGjC,IAAI,CAACwB,IAAL,IAAa,CAACrC,KAAK,CAAC+C,MAAvB,EAA+B/C,KAAK,CAAC+C,MAAN,GAAe,IAAf;AAC/B,QAAGlC,IAAI,CAAC2B,IAAL,IAAa,CAACxC,KAAK,CAACgD,MAAvB,EAA+BhD,KAAK,CAACgD,MAAN,GAAe,IAAf;AAE/BhD,IAAAA,KAAK,CAACiD,WAAN,CAAkBC,IAAlB,CAAuBrC,IAAI,CAACwB,IAA5B;AACArC,IAAAA,KAAK,CAACmD,WAAN,CAAkBD,IAAlB,CAAuBrC,IAAI,CAAC+B,IAA5B;AACA5C,IAAAA,KAAK,CAACoD,aAAN,CAAoBF,IAApB,CAAyBrC,IAAI,CAACqB,MAA9B;AACAlC,IAAAA,KAAK,CAACqD,qBAAN,CAA4BH,IAA5B,CAAiCrC,IAAI,CAACsB,SAAtC;AACAnC,IAAAA,KAAK,CAACsD,uBAAN,CAA8BJ,IAA9B,CAAmCrC,IAAI,CAACuB,WAAxC;AACApC,IAAAA,KAAK,CAACuD,WAAN,CAAkBL,IAAlB,CAAuBrC,IAAI,CAAC2B,IAA5B;AACAxC,IAAAA,KAAK,CAACwD,mBAAN,CAA0BN,IAA1B,CAA+BrC,IAAI,CAAC6B,OAApC;AACA1C,IAAAA,KAAK,CAACyD,qBAAN,CAA4BP,IAA5B,CAAiCrC,IAAI,CAAC8B,SAAtC;AACA3C,IAAAA,KAAK,CAAC0D,WAAN,CAAkBR,IAAlB,CAAuB,EAAvB;AACAlD,IAAAA,KAAK,CAAC2D,aAAN,CAAoBT,IAApB,CAAyB,EAAzB;AAEA7C,IAAAA,KAAK,CAACiB,CAAN,GAAUA,CAAV;AACAjB,IAAAA,KAAK,CAACkB,CAAN,GAAUA,CAAV;AACAlB,IAAAA,KAAK,CAACuD,IAAN,GAAatC,CAAb;AACAjB,IAAAA,KAAK,CAACwD,IAAN,GAAatC,CAAb;AACAlB,IAAAA,KAAK,CAACK,CAAN,GAAUD,MAAV;AACAJ,IAAAA,KAAK,CAACO,KAAN,GAAcD,UAAd;AACAN,IAAAA,KAAK,CAACe,SAAN,GAAkBA,SAAlB;AACAf,IAAAA,KAAK,CAACyD,MAAN,GAAe9D,KAAf;AACAK,IAAAA,KAAK,CAAC0D,KAAN,GAAc/D,KAAK,CAACgE,KAApB;AACAhE,IAAAA,KAAK,CAACgE,KAAN;AACH,GAxGD;AA0GA,SAAO9E,aAAa,CAACQ,EAAD,EAAKC,OAAL,EAAcC,KAAd,CAApB;AACH,CAlHD","sourcesContent":["'use strict';\r\n\r\nvar cluster = require('@plotly/point-cluster');\r\nvar isNumeric = require('fast-isnumeric');\r\n\r\nvar scatterglPlot = require('../scattergl/plot');\r\nvar sceneUpdate = require('../scattergl/scene_update');\r\nvar convert = require('../scattergl/convert');\r\n\r\nvar Lib = require('../../lib');\r\n\r\nvar TOO_MANY_POINTS = require('../scattergl/constants').TOO_MANY_POINTS;\r\n\r\nmodule.exports = function plot(gd, subplot, cdata) {\r\n    if(!cdata.length) return;\r\n\r\n    var radialAxis = subplot.radialAxis;\r\n    var angularAxis = subplot.angularAxis;\r\n    var scene = sceneUpdate(gd, subplot);\r\n\r\n    cdata.forEach(function(cdscatter) {\r\n        if(!cdscatter || !cdscatter[0] || !cdscatter[0].trace) return;\r\n        var cd = cdscatter[0];\r\n        var trace = cd.trace;\r\n        var stash = cd.t;\r\n        var len = trace._length;\r\n        var rArray = stash.r;\r\n        var thetaArray = stash.theta;\r\n        var opts = stash.opts;\r\n        var i;\r\n\r\n        var subRArray = rArray.slice();\r\n        var subThetaArray = thetaArray.slice();\r\n\r\n        // filter out by range\r\n        for(i = 0; i < rArray.length; i++) {\r\n            if(!subplot.isPtInside({r: rArray[i], theta: thetaArray[i]})) {\r\n                subRArray[i] = NaN;\r\n                subThetaArray[i] = NaN;\r\n            }\r\n        }\r\n\r\n        var positions = new Array(len * 2);\r\n        var x = Array(len);\r\n        var y = Array(len);\r\n\r\n        for(i = 0; i < len; i++) {\r\n            var r = subRArray[i];\r\n            var xx, yy;\r\n\r\n            if(isNumeric(r)) {\r\n                var rg = radialAxis.c2g(r);\r\n                var thetag = angularAxis.c2g(subThetaArray[i], trace.thetaunit);\r\n                xx = rg * Math.cos(thetag);\r\n                yy = rg * Math.sin(thetag);\r\n            } else {\r\n                xx = yy = NaN;\r\n            }\r\n            x[i] = positions[i * 2] = xx;\r\n            y[i] = positions[i * 2 + 1] = yy;\r\n        }\r\n\r\n        stash.tree = cluster(positions);\r\n\r\n        // FIXME: see scattergl.js#109\r\n        if(opts.marker && len >= TOO_MANY_POINTS) {\r\n            opts.marker.cluster = stash.tree;\r\n        }\r\n\r\n        if(opts.marker) {\r\n            opts.markerSel.positions = opts.markerUnsel.positions = opts.marker.positions = positions;\r\n        }\r\n\r\n        if(opts.line && positions.length > 1) {\r\n            Lib.extendFlat(\r\n                opts.line,\r\n                convert.linePositions(gd, trace, positions)\r\n            );\r\n        }\r\n\r\n        if(opts.text) {\r\n            Lib.extendFlat(\r\n                opts.text,\r\n                {positions: positions},\r\n                convert.textPosition(gd, trace, opts.text, opts.marker)\r\n            );\r\n            Lib.extendFlat(\r\n                opts.textSel,\r\n                {positions: positions},\r\n                convert.textPosition(gd, trace, opts.text, opts.markerSel)\r\n            );\r\n            Lib.extendFlat(\r\n                opts.textUnsel,\r\n                {positions: positions},\r\n                convert.textPosition(gd, trace, opts.text, opts.markerUnsel)\r\n            );\r\n        }\r\n\r\n        if(opts.fill && !scene.fill2d) scene.fill2d = true;\r\n        if(opts.marker && !scene.scatter2d) scene.scatter2d = true;\r\n        if(opts.line && !scene.line2d) scene.line2d = true;\r\n        if(opts.text && !scene.glText) scene.glText = true;\r\n\r\n        scene.lineOptions.push(opts.line);\r\n        scene.fillOptions.push(opts.fill);\r\n        scene.markerOptions.push(opts.marker);\r\n        scene.markerSelectedOptions.push(opts.markerSel);\r\n        scene.markerUnselectedOptions.push(opts.markerUnsel);\r\n        scene.textOptions.push(opts.text);\r\n        scene.textSelectedOptions.push(opts.textSel);\r\n        scene.textUnselectedOptions.push(opts.textUnsel);\r\n        scene.selectBatch.push([]);\r\n        scene.unselectBatch.push([]);\r\n\r\n        stash.x = x;\r\n        stash.y = y;\r\n        stash.rawx = x;\r\n        stash.rawy = y;\r\n        stash.r = rArray;\r\n        stash.theta = thetaArray;\r\n        stash.positions = positions;\r\n        stash._scene = scene;\r\n        stash.index = scene.count;\r\n        scene.count++;\r\n    });\r\n\r\n    return scatterglPlot(gd, subplot, cdata);\r\n};\r\n"]},"metadata":{},"sourceType":"script"}