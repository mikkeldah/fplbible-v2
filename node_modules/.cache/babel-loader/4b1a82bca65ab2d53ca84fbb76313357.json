{"ast":null,"code":"'use strict';\n\nvar isArrayOrTypedArray = require('./array').isArrayOrTypedArray;\n\nvar isPlainObject = require('./is_plain_object');\n/**\r\n * Relink private _keys and keys with a function value from one container\r\n * to the new container.\r\n * Relink means copying if object is pass-by-value and adding a reference\r\n * if object is pass-by-ref.\r\n * This prevents deepCopying massive structures like a webgl context.\r\n */\n\n\nmodule.exports = function relinkPrivateKeys(toContainer, fromContainer) {\n  for (var k in fromContainer) {\n    var fromVal = fromContainer[k];\n    var toVal = toContainer[k];\n    if (toVal === fromVal) continue;\n\n    if (k.charAt(0) === '_' || typeof fromVal === 'function') {\n      // if it already exists at this point, it's something\n      // that we recreate each time around, so ignore it\n      if (k in toContainer) continue;\n      toContainer[k] = fromVal;\n    } else if (isArrayOrTypedArray(fromVal) && isArrayOrTypedArray(toVal) && isPlainObject(fromVal[0])) {\n      // filter out data_array items that can contain user objects\n      // most of the time the toVal === fromVal check will catch these early\n      // but if the user makes new ones we also don't want to recurse in.\n      if (k === 'customdata' || k === 'ids') continue; // recurse into arrays containers\n\n      var minLen = Math.min(fromVal.length, toVal.length);\n\n      for (var j = 0; j < minLen; j++) {\n        if (toVal[j] !== fromVal[j] && isPlainObject(fromVal[j]) && isPlainObject(toVal[j])) {\n          relinkPrivateKeys(toVal[j], fromVal[j]);\n        }\n      }\n    } else if (isPlainObject(fromVal) && isPlainObject(toVal)) {\n      // recurse into objects, but only if they still exist\n      relinkPrivateKeys(toVal, fromVal);\n      if (!Object.keys(toVal).length) delete toContainer[k];\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/mikke/VSC/fantasy-django-react/fantasy-django/fantasy-react-app/node_modules/plotly.js/src/lib/relink_private.js"],"names":["isArrayOrTypedArray","require","isPlainObject","module","exports","relinkPrivateKeys","toContainer","fromContainer","k","fromVal","toVal","charAt","minLen","Math","min","length","j","Object","keys"],"mappings":"AAAA;;AAEA,IAAIA,mBAAmB,GAAGC,OAAO,CAAC,SAAD,CAAP,CAAmBD,mBAA7C;;AACA,IAAIE,aAAa,GAAGD,OAAO,CAAC,mBAAD,CAA3B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAE,MAAM,CAACC,OAAP,GAAiB,SAASC,iBAAT,CAA2BC,WAA3B,EAAwCC,aAAxC,EAAuD;AACpE,OAAI,IAAIC,CAAR,IAAaD,aAAb,EAA4B;AACxB,QAAIE,OAAO,GAAGF,aAAa,CAACC,CAAD,CAA3B;AACA,QAAIE,KAAK,GAAGJ,WAAW,CAACE,CAAD,CAAvB;AAEA,QAAGE,KAAK,KAAKD,OAAb,EAAsB;;AAEtB,QAAGD,CAAC,CAACG,MAAF,CAAS,CAAT,MAAgB,GAAhB,IAAuB,OAAOF,OAAP,KAAmB,UAA7C,EAAyD;AACrD;AACA;AACA,UAAGD,CAAC,IAAIF,WAAR,EAAqB;AAErBA,MAAAA,WAAW,CAACE,CAAD,CAAX,GAAiBC,OAAjB;AACH,KAND,MAMO,IAAGT,mBAAmB,CAACS,OAAD,CAAnB,IAAgCT,mBAAmB,CAACU,KAAD,CAAnD,IAA8DR,aAAa,CAACO,OAAO,CAAC,CAAD,CAAR,CAA9E,EAA4F;AAC/F;AACA;AACA;AACA,UAAGD,CAAC,KAAK,YAAN,IAAsBA,CAAC,KAAK,KAA/B,EAAsC,SAJyD,CAM/F;;AACA,UAAII,MAAM,GAAGC,IAAI,CAACC,GAAL,CAASL,OAAO,CAACM,MAAjB,EAAyBL,KAAK,CAACK,MAA/B,CAAb;;AACA,WAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGJ,MAAnB,EAA2BI,CAAC,EAA5B,EAAgC;AAC5B,YAAIN,KAAK,CAACM,CAAD,CAAL,KAAaP,OAAO,CAACO,CAAD,CAArB,IAA6Bd,aAAa,CAACO,OAAO,CAACO,CAAD,CAAR,CAA1C,IAA0Dd,aAAa,CAACQ,KAAK,CAACM,CAAD,CAAN,CAA1E,EAAsF;AAClFX,UAAAA,iBAAiB,CAACK,KAAK,CAACM,CAAD,CAAN,EAAWP,OAAO,CAACO,CAAD,CAAlB,CAAjB;AACH;AACJ;AACJ,KAbM,MAaA,IAAGd,aAAa,CAACO,OAAD,CAAb,IAA0BP,aAAa,CAACQ,KAAD,CAA1C,EAAmD;AACtD;AACAL,MAAAA,iBAAiB,CAACK,KAAD,EAAQD,OAAR,CAAjB;AAEA,UAAG,CAACQ,MAAM,CAACC,IAAP,CAAYR,KAAZ,EAAmBK,MAAvB,EAA+B,OAAOT,WAAW,CAACE,CAAD,CAAlB;AAClC;AACJ;AACJ,CAjCD","sourcesContent":["'use strict';\r\n\r\nvar isArrayOrTypedArray = require('./array').isArrayOrTypedArray;\r\nvar isPlainObject = require('./is_plain_object');\r\n\r\n/**\r\n * Relink private _keys and keys with a function value from one container\r\n * to the new container.\r\n * Relink means copying if object is pass-by-value and adding a reference\r\n * if object is pass-by-ref.\r\n * This prevents deepCopying massive structures like a webgl context.\r\n */\r\nmodule.exports = function relinkPrivateKeys(toContainer, fromContainer) {\r\n    for(var k in fromContainer) {\r\n        var fromVal = fromContainer[k];\r\n        var toVal = toContainer[k];\r\n\r\n        if(toVal === fromVal) continue;\r\n\r\n        if(k.charAt(0) === '_' || typeof fromVal === 'function') {\r\n            // if it already exists at this point, it's something\r\n            // that we recreate each time around, so ignore it\r\n            if(k in toContainer) continue;\r\n\r\n            toContainer[k] = fromVal;\r\n        } else if(isArrayOrTypedArray(fromVal) && isArrayOrTypedArray(toVal) && isPlainObject(fromVal[0])) {\r\n            // filter out data_array items that can contain user objects\r\n            // most of the time the toVal === fromVal check will catch these early\r\n            // but if the user makes new ones we also don't want to recurse in.\r\n            if(k === 'customdata' || k === 'ids') continue;\r\n\r\n            // recurse into arrays containers\r\n            var minLen = Math.min(fromVal.length, toVal.length);\r\n            for(var j = 0; j < minLen; j++) {\r\n                if((toVal[j] !== fromVal[j]) && isPlainObject(fromVal[j]) && isPlainObject(toVal[j])) {\r\n                    relinkPrivateKeys(toVal[j], fromVal[j]);\r\n                }\r\n            }\r\n        } else if(isPlainObject(fromVal) && isPlainObject(toVal)) {\r\n            // recurse into objects, but only if they still exist\r\n            relinkPrivateKeys(toVal, fromVal);\r\n\r\n            if(!Object.keys(toVal).length) delete toContainer[k];\r\n        }\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}