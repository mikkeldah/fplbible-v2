{"ast":null,"code":"'use strict';\n\nvar overrideAll = require('../../plot_api/edit_types').overrideAll;\n\nvar fxAttrs = require('../../components/fx/layout_attributes');\n\nvar Scene = require('./scene');\n\nvar getSubplotData = require('../get_data').getSubplotData;\n\nvar Lib = require('../../lib');\n\nvar xmlnsNamespaces = require('../../constants/xmlns_namespaces');\n\nvar GL3D = 'gl3d';\nvar SCENE = 'scene';\nexports.name = GL3D;\nexports.attr = SCENE;\nexports.idRoot = SCENE;\nexports.idRegex = exports.attrRegex = Lib.counterRegex('scene');\nexports.attributes = require('./layout/attributes');\nexports.layoutAttributes = require('./layout/layout_attributes');\nexports.baseLayoutAttrOverrides = overrideAll({\n  hoverlabel: fxAttrs.hoverlabel\n}, 'plot', 'nested');\nexports.supplyLayoutDefaults = require('./layout/defaults');\n\nexports.plot = function plot(gd) {\n  var fullLayout = gd._fullLayout;\n  var fullData = gd._fullData;\n  var sceneIds = fullLayout._subplots[GL3D];\n\n  for (var i = 0; i < sceneIds.length; i++) {\n    var sceneId = sceneIds[i];\n    var fullSceneData = getSubplotData(fullData, GL3D, sceneId);\n    var sceneLayout = fullLayout[sceneId];\n    var camera = sceneLayout.camera;\n    var scene = sceneLayout._scene;\n\n    if (!scene) {\n      scene = new Scene({\n        id: sceneId,\n        graphDiv: gd,\n        container: gd.querySelector('.gl-container'),\n        staticPlot: gd._context.staticPlot,\n        plotGlPixelRatio: gd._context.plotGlPixelRatio,\n        camera: camera\n      }, fullLayout); // set ref to Scene instance\n\n      sceneLayout._scene = scene;\n    } // save 'initial' camera view settings for modebar button\n\n\n    if (!scene.viewInitial) {\n      scene.viewInitial = {\n        up: {\n          x: camera.up.x,\n          y: camera.up.y,\n          z: camera.up.z\n        },\n        eye: {\n          x: camera.eye.x,\n          y: camera.eye.y,\n          z: camera.eye.z\n        },\n        center: {\n          x: camera.center.x,\n          y: camera.center.y,\n          z: camera.center.z\n        }\n      };\n    }\n\n    scene.plot(fullSceneData, fullLayout, gd.layout);\n  }\n};\n\nexports.clean = function (newFullData, newFullLayout, oldFullData, oldFullLayout) {\n  var oldSceneKeys = oldFullLayout._subplots[GL3D] || [];\n\n  for (var i = 0; i < oldSceneKeys.length; i++) {\n    var oldSceneKey = oldSceneKeys[i];\n\n    if (!newFullLayout[oldSceneKey] && !!oldFullLayout[oldSceneKey]._scene) {\n      oldFullLayout[oldSceneKey]._scene.destroy();\n\n      if (oldFullLayout._infolayer) {\n        oldFullLayout._infolayer.selectAll('.annotation-' + oldSceneKey).remove();\n      }\n    }\n  }\n};\n\nexports.toSVG = function (gd) {\n  var fullLayout = gd._fullLayout;\n  var sceneIds = fullLayout._subplots[GL3D];\n  var size = fullLayout._size;\n\n  for (var i = 0; i < sceneIds.length; i++) {\n    var sceneLayout = fullLayout[sceneIds[i]];\n    var domain = sceneLayout.domain;\n    var scene = sceneLayout._scene;\n    var imageData = scene.toImage('png');\n\n    var image = fullLayout._glimages.append('svg:image');\n\n    image.attr({\n      xmlns: xmlnsNamespaces.svg,\n      'xlink:href': imageData,\n      x: size.l + size.w * domain.x[0],\n      y: size.t + size.h * (1 - domain.y[1]),\n      width: size.w * (domain.x[1] - domain.x[0]),\n      height: size.h * (domain.y[1] - domain.y[0]),\n      preserveAspectRatio: 'none'\n    });\n    scene.destroy();\n  }\n}; // clean scene ids, 'scene1' -> 'scene'\n\n\nexports.cleanId = function cleanId(id) {\n  if (!id.match(/^scene[0-9]*$/)) return;\n  var sceneNum = id.substr(5);\n  if (sceneNum === '1') sceneNum = '';\n  return SCENE + sceneNum;\n};\n\nexports.updateFx = function (gd) {\n  var fullLayout = gd._fullLayout;\n  var subplotIds = fullLayout._subplots[GL3D];\n\n  for (var i = 0; i < subplotIds.length; i++) {\n    var subplotObj = fullLayout[subplotIds[i]]._scene;\n    subplotObj.updateFx(fullLayout.dragmode, fullLayout.hovermode);\n  }\n};","map":{"version":3,"sources":["C:/Users/mikke/VSC/fantasy-django-react/fantasy-django/fantasy-react-app/node_modules/plotly.js/src/plots/gl3d/index.js"],"names":["overrideAll","require","fxAttrs","Scene","getSubplotData","Lib","xmlnsNamespaces","GL3D","SCENE","exports","name","attr","idRoot","idRegex","attrRegex","counterRegex","attributes","layoutAttributes","baseLayoutAttrOverrides","hoverlabel","supplyLayoutDefaults","plot","gd","fullLayout","_fullLayout","fullData","_fullData","sceneIds","_subplots","i","length","sceneId","fullSceneData","sceneLayout","camera","scene","_scene","id","graphDiv","container","querySelector","staticPlot","_context","plotGlPixelRatio","viewInitial","up","x","y","z","eye","center","layout","clean","newFullData","newFullLayout","oldFullData","oldFullLayout","oldSceneKeys","oldSceneKey","destroy","_infolayer","selectAll","remove","toSVG","size","_size","domain","imageData","toImage","image","_glimages","append","xmlns","svg","l","w","t","h","width","height","preserveAspectRatio","cleanId","match","sceneNum","substr","updateFx","subplotIds","subplotObj","dragmode","hovermode"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nvar overrideAll = require('../../plot_api/edit_types').overrideAll;\r\nvar fxAttrs = require('../../components/fx/layout_attributes');\r\n\r\nvar Scene = require('./scene');\r\nvar getSubplotData = require('../get_data').getSubplotData;\r\nvar Lib = require('../../lib');\r\nvar xmlnsNamespaces = require('../../constants/xmlns_namespaces');\r\n\r\nvar GL3D = 'gl3d';\r\nvar SCENE = 'scene';\r\n\r\n\r\nexports.name = GL3D;\r\n\r\nexports.attr = SCENE;\r\n\r\nexports.idRoot = SCENE;\r\n\r\nexports.idRegex = exports.attrRegex = Lib.counterRegex('scene');\r\n\r\nexports.attributes = require('./layout/attributes');\r\n\r\nexports.layoutAttributes = require('./layout/layout_attributes');\r\n\r\nexports.baseLayoutAttrOverrides = overrideAll({\r\n    hoverlabel: fxAttrs.hoverlabel\r\n}, 'plot', 'nested');\r\n\r\nexports.supplyLayoutDefaults = require('./layout/defaults');\r\n\r\nexports.plot = function plot(gd) {\r\n    var fullLayout = gd._fullLayout;\r\n    var fullData = gd._fullData;\r\n    var sceneIds = fullLayout._subplots[GL3D];\r\n\r\n    for(var i = 0; i < sceneIds.length; i++) {\r\n        var sceneId = sceneIds[i];\r\n        var fullSceneData = getSubplotData(fullData, GL3D, sceneId);\r\n        var sceneLayout = fullLayout[sceneId];\r\n        var camera = sceneLayout.camera;\r\n        var scene = sceneLayout._scene;\r\n\r\n        if(!scene) {\r\n            scene = new Scene({\r\n                id: sceneId,\r\n                graphDiv: gd,\r\n                container: gd.querySelector('.gl-container'),\r\n                staticPlot: gd._context.staticPlot,\r\n                plotGlPixelRatio: gd._context.plotGlPixelRatio,\r\n                camera: camera\r\n            },\r\n                fullLayout\r\n            );\r\n\r\n            // set ref to Scene instance\r\n            sceneLayout._scene = scene;\r\n        }\r\n\r\n        // save 'initial' camera view settings for modebar button\r\n        if(!scene.viewInitial) {\r\n            scene.viewInitial = {\r\n                up: {\r\n                    x: camera.up.x,\r\n                    y: camera.up.y,\r\n                    z: camera.up.z\r\n                },\r\n                eye: {\r\n                    x: camera.eye.x,\r\n                    y: camera.eye.y,\r\n                    z: camera.eye.z\r\n                },\r\n                center: {\r\n                    x: camera.center.x,\r\n                    y: camera.center.y,\r\n                    z: camera.center.z\r\n                }\r\n            };\r\n        }\r\n\r\n        scene.plot(fullSceneData, fullLayout, gd.layout);\r\n    }\r\n};\r\n\r\nexports.clean = function(newFullData, newFullLayout, oldFullData, oldFullLayout) {\r\n    var oldSceneKeys = oldFullLayout._subplots[GL3D] || [];\r\n\r\n    for(var i = 0; i < oldSceneKeys.length; i++) {\r\n        var oldSceneKey = oldSceneKeys[i];\r\n\r\n        if(!newFullLayout[oldSceneKey] && !!oldFullLayout[oldSceneKey]._scene) {\r\n            oldFullLayout[oldSceneKey]._scene.destroy();\r\n\r\n            if(oldFullLayout._infolayer) {\r\n                oldFullLayout._infolayer\r\n                    .selectAll('.annotation-' + oldSceneKey)\r\n                    .remove();\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nexports.toSVG = function(gd) {\r\n    var fullLayout = gd._fullLayout;\r\n    var sceneIds = fullLayout._subplots[GL3D];\r\n    var size = fullLayout._size;\r\n\r\n    for(var i = 0; i < sceneIds.length; i++) {\r\n        var sceneLayout = fullLayout[sceneIds[i]];\r\n        var domain = sceneLayout.domain;\r\n        var scene = sceneLayout._scene;\r\n\r\n        var imageData = scene.toImage('png');\r\n        var image = fullLayout._glimages.append('svg:image');\r\n\r\n        image.attr({\r\n            xmlns: xmlnsNamespaces.svg,\r\n            'xlink:href': imageData,\r\n            x: size.l + size.w * domain.x[0],\r\n            y: size.t + size.h * (1 - domain.y[1]),\r\n            width: size.w * (domain.x[1] - domain.x[0]),\r\n            height: size.h * (domain.y[1] - domain.y[0]),\r\n            preserveAspectRatio: 'none'\r\n        });\r\n\r\n        scene.destroy();\r\n    }\r\n};\r\n\r\n// clean scene ids, 'scene1' -> 'scene'\r\nexports.cleanId = function cleanId(id) {\r\n    if(!id.match(/^scene[0-9]*$/)) return;\r\n\r\n    var sceneNum = id.substr(5);\r\n    if(sceneNum === '1') sceneNum = '';\r\n\r\n    return SCENE + sceneNum;\r\n};\r\n\r\nexports.updateFx = function(gd) {\r\n    var fullLayout = gd._fullLayout;\r\n    var subplotIds = fullLayout._subplots[GL3D];\r\n\r\n    for(var i = 0; i < subplotIds.length; i++) {\r\n        var subplotObj = fullLayout[subplotIds[i]]._scene;\r\n        subplotObj.updateFx(fullLayout.dragmode, fullLayout.hovermode);\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}