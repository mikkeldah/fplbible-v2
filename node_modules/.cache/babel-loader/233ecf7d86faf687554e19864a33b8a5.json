{"ast":null,"code":"'use strict';\n\nvar d3 = require('@plotly/d3');\n\nvar Color = require('../color');\n\nvar ARROWPATHS = require('./arrow_paths');\n\nvar Lib = require('../../lib');\n\nvar strScale = Lib.strScale;\nvar strRotate = Lib.strRotate;\nvar strTranslate = Lib.strTranslate;\n/**\r\n * Add arrowhead(s) to a path or line element\r\n *\r\n * @param {d3.selection} el3: a d3-selected line or path element\r\n *\r\n * @param {string} ends: 'none', 'start', 'end', or 'start+end' for which ends get arrowheads\r\n *\r\n * @param {object} options: style information. Must have all the following:\r\n * @param {number} options.arrowhead: end head style - see ./arrow_paths\r\n * @param {number} options.startarrowhead: start head style - see ./arrow_paths\r\n * @param {number} options.arrowsize: relative size of the end head vs line width\r\n * @param {number} options.startarrowsize: relative size of the start head vs line width\r\n * @param {number} options.standoff: distance in px to move the end arrow point from its target\r\n * @param {number} options.startstandoff: distance in px to move the start arrow point from its target\r\n * @param {number} options.arrowwidth: width of the arrow line\r\n * @param {string} options.arrowcolor: color of the arrow line, for the head to match\r\n *     Note that the opacity of this color is ignored, as it's assumed the container\r\n *     of both the line and head has opacity applied to it so there isn't greater opacity\r\n *     where they overlap.\r\n */\n\nmodule.exports = function drawArrowHead(el3, ends, options) {\n  var el = el3.node();\n  var headStyle = ARROWPATHS[options.arrowhead || 0];\n  var startHeadStyle = ARROWPATHS[options.startarrowhead || 0];\n  var scale = (options.arrowwidth || 1) * (options.arrowsize || 1);\n  var startScale = (options.arrowwidth || 1) * (options.startarrowsize || 1);\n  var doStart = ends.indexOf('start') >= 0;\n  var doEnd = ends.indexOf('end') >= 0;\n  var backOff = headStyle.backoff * scale + options.standoff;\n  var startBackOff = startHeadStyle.backoff * startScale + options.startstandoff;\n  var start, end, startRot, endRot;\n\n  if (el.nodeName === 'line') {\n    start = {\n      x: +el3.attr('x1'),\n      y: +el3.attr('y1')\n    };\n    end = {\n      x: +el3.attr('x2'),\n      y: +el3.attr('y2')\n    };\n    var dx = start.x - end.x;\n    var dy = start.y - end.y;\n    startRot = Math.atan2(dy, dx);\n    endRot = startRot + Math.PI;\n\n    if (backOff && startBackOff) {\n      if (backOff + startBackOff > Math.sqrt(dx * dx + dy * dy)) {\n        hideLine();\n        return;\n      }\n    }\n\n    if (backOff) {\n      if (backOff * backOff > dx * dx + dy * dy) {\n        hideLine();\n        return;\n      }\n\n      var backOffX = backOff * Math.cos(startRot);\n      var backOffY = backOff * Math.sin(startRot);\n      end.x += backOffX;\n      end.y += backOffY;\n      el3.attr({\n        x2: end.x,\n        y2: end.y\n      });\n    }\n\n    if (startBackOff) {\n      if (startBackOff * startBackOff > dx * dx + dy * dy) {\n        hideLine();\n        return;\n      }\n\n      var startBackOffX = startBackOff * Math.cos(startRot);\n      var startbackOffY = startBackOff * Math.sin(startRot);\n      start.x -= startBackOffX;\n      start.y -= startbackOffY;\n      el3.attr({\n        x1: start.x,\n        y1: start.y\n      });\n    }\n  } else if (el.nodeName === 'path') {\n    var pathlen = el.getTotalLength(); // using dash to hide the backOff region of the path.\n    // if we ever allow dash for the arrow we'll have to\n    // do better than this hack... maybe just manually\n    // combine the two\n\n    var dashArray = '';\n\n    if (pathlen < backOff + startBackOff) {\n      hideLine();\n      return;\n    }\n\n    var start0 = el.getPointAtLength(0);\n    var dstart = el.getPointAtLength(0.1);\n    startRot = Math.atan2(start0.y - dstart.y, start0.x - dstart.x);\n    start = el.getPointAtLength(Math.min(startBackOff, pathlen));\n    dashArray = '0px,' + startBackOff + 'px,';\n    var end0 = el.getPointAtLength(pathlen);\n    var dend = el.getPointAtLength(pathlen - 0.1);\n    endRot = Math.atan2(end0.y - dend.y, end0.x - dend.x);\n    end = el.getPointAtLength(Math.max(0, pathlen - backOff));\n    var shortening = dashArray ? startBackOff + backOff : backOff;\n    dashArray += pathlen - shortening + 'px,' + pathlen + 'px';\n    el3.style('stroke-dasharray', dashArray);\n  }\n\n  function hideLine() {\n    el3.style('stroke-dasharray', '0px,100px');\n  }\n\n  function drawhead(arrowHeadStyle, p, rot, arrowScale) {\n    if (!arrowHeadStyle.path) return;\n    if (arrowHeadStyle.noRotate) rot = 0;\n    d3.select(el.parentNode).append('path').attr({\n      'class': el3.attr('class'),\n      d: arrowHeadStyle.path,\n      transform: strTranslate(p.x, p.y) + strRotate(rot * 180 / Math.PI) + strScale(arrowScale)\n    }).style({\n      fill: Color.rgb(options.arrowcolor),\n      'stroke-width': 0\n    });\n  }\n\n  if (doStart) drawhead(startHeadStyle, start, startRot, startScale);\n  if (doEnd) drawhead(headStyle, end, endRot, scale);\n};","map":{"version":3,"sources":["C:/Users/mikke/VSC/fantasy-django-react/fantasy-django/fantasy-react-app/node_modules/plotly.js/src/components/annotations/draw_arrow_head.js"],"names":["d3","require","Color","ARROWPATHS","Lib","strScale","strRotate","strTranslate","module","exports","drawArrowHead","el3","ends","options","el","node","headStyle","arrowhead","startHeadStyle","startarrowhead","scale","arrowwidth","arrowsize","startScale","startarrowsize","doStart","indexOf","doEnd","backOff","backoff","standoff","startBackOff","startstandoff","start","end","startRot","endRot","nodeName","x","attr","y","dx","dy","Math","atan2","PI","sqrt","hideLine","backOffX","cos","backOffY","sin","x2","y2","startBackOffX","startbackOffY","x1","y1","pathlen","getTotalLength","dashArray","start0","getPointAtLength","dstart","min","end0","dend","max","shortening","style","drawhead","arrowHeadStyle","p","rot","arrowScale","path","noRotate","select","parentNode","append","d","transform","fill","rgb","arrowcolor"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nvar d3 = require('@plotly/d3');\r\n\r\nvar Color = require('../color');\r\n\r\nvar ARROWPATHS = require('./arrow_paths');\r\n\r\nvar Lib = require('../../lib');\r\nvar strScale = Lib.strScale;\r\nvar strRotate = Lib.strRotate;\r\nvar strTranslate = Lib.strTranslate;\r\n\r\n/**\r\n * Add arrowhead(s) to a path or line element\r\n *\r\n * @param {d3.selection} el3: a d3-selected line or path element\r\n *\r\n * @param {string} ends: 'none', 'start', 'end', or 'start+end' for which ends get arrowheads\r\n *\r\n * @param {object} options: style information. Must have all the following:\r\n * @param {number} options.arrowhead: end head style - see ./arrow_paths\r\n * @param {number} options.startarrowhead: start head style - see ./arrow_paths\r\n * @param {number} options.arrowsize: relative size of the end head vs line width\r\n * @param {number} options.startarrowsize: relative size of the start head vs line width\r\n * @param {number} options.standoff: distance in px to move the end arrow point from its target\r\n * @param {number} options.startstandoff: distance in px to move the start arrow point from its target\r\n * @param {number} options.arrowwidth: width of the arrow line\r\n * @param {string} options.arrowcolor: color of the arrow line, for the head to match\r\n *     Note that the opacity of this color is ignored, as it's assumed the container\r\n *     of both the line and head has opacity applied to it so there isn't greater opacity\r\n *     where they overlap.\r\n */\r\nmodule.exports = function drawArrowHead(el3, ends, options) {\r\n    var el = el3.node();\r\n    var headStyle = ARROWPATHS[options.arrowhead || 0];\r\n    var startHeadStyle = ARROWPATHS[options.startarrowhead || 0];\r\n    var scale = (options.arrowwidth || 1) * (options.arrowsize || 1);\r\n    var startScale = (options.arrowwidth || 1) * (options.startarrowsize || 1);\r\n    var doStart = ends.indexOf('start') >= 0;\r\n    var doEnd = ends.indexOf('end') >= 0;\r\n    var backOff = headStyle.backoff * scale + options.standoff;\r\n    var startBackOff = startHeadStyle.backoff * startScale + options.startstandoff;\r\n\r\n    var start, end, startRot, endRot;\r\n\r\n    if(el.nodeName === 'line') {\r\n        start = {x: +el3.attr('x1'), y: +el3.attr('y1')};\r\n        end = {x: +el3.attr('x2'), y: +el3.attr('y2')};\r\n\r\n        var dx = start.x - end.x;\r\n        var dy = start.y - end.y;\r\n\r\n        startRot = Math.atan2(dy, dx);\r\n        endRot = startRot + Math.PI;\r\n        if(backOff && startBackOff) {\r\n            if(backOff + startBackOff > Math.sqrt(dx * dx + dy * dy)) {\r\n                hideLine();\r\n                return;\r\n            }\r\n        }\r\n\r\n        if(backOff) {\r\n            if(backOff * backOff > dx * dx + dy * dy) {\r\n                hideLine();\r\n                return;\r\n            }\r\n            var backOffX = backOff * Math.cos(startRot);\r\n            var backOffY = backOff * Math.sin(startRot);\r\n\r\n            end.x += backOffX;\r\n            end.y += backOffY;\r\n            el3.attr({x2: end.x, y2: end.y});\r\n        }\r\n\r\n        if(startBackOff) {\r\n            if(startBackOff * startBackOff > dx * dx + dy * dy) {\r\n                hideLine();\r\n                return;\r\n            }\r\n            var startBackOffX = startBackOff * Math.cos(startRot);\r\n            var startbackOffY = startBackOff * Math.sin(startRot);\r\n\r\n            start.x -= startBackOffX;\r\n            start.y -= startbackOffY;\r\n            el3.attr({x1: start.x, y1: start.y});\r\n        }\r\n    } else if(el.nodeName === 'path') {\r\n        var pathlen = el.getTotalLength();\r\n        // using dash to hide the backOff region of the path.\r\n        // if we ever allow dash for the arrow we'll have to\r\n        // do better than this hack... maybe just manually\r\n        // combine the two\r\n        var dashArray = '';\r\n\r\n        if(pathlen < backOff + startBackOff) {\r\n            hideLine();\r\n            return;\r\n        }\r\n\r\n\r\n        var start0 = el.getPointAtLength(0);\r\n        var dstart = el.getPointAtLength(0.1);\r\n\r\n        startRot = Math.atan2(start0.y - dstart.y, start0.x - dstart.x);\r\n        start = el.getPointAtLength(Math.min(startBackOff, pathlen));\r\n\r\n        dashArray = '0px,' + startBackOff + 'px,';\r\n\r\n        var end0 = el.getPointAtLength(pathlen);\r\n        var dend = el.getPointAtLength(pathlen - 0.1);\r\n\r\n        endRot = Math.atan2(end0.y - dend.y, end0.x - dend.x);\r\n        end = el.getPointAtLength(Math.max(0, pathlen - backOff));\r\n\r\n        var shortening = dashArray ? startBackOff + backOff : backOff;\r\n        dashArray += (pathlen - shortening) + 'px,' + pathlen + 'px';\r\n\r\n        el3.style('stroke-dasharray', dashArray);\r\n    }\r\n\r\n    function hideLine() { el3.style('stroke-dasharray', '0px,100px'); }\r\n\r\n    function drawhead(arrowHeadStyle, p, rot, arrowScale) {\r\n        if(!arrowHeadStyle.path) return;\r\n        if(arrowHeadStyle.noRotate) rot = 0;\r\n\r\n        d3.select(el.parentNode).append('path')\r\n            .attr({\r\n                'class': el3.attr('class'),\r\n                d: arrowHeadStyle.path,\r\n                transform:\r\n                    strTranslate(p.x, p.y) +\r\n                    strRotate(rot * 180 / Math.PI) +\r\n                    strScale(arrowScale)\r\n            })\r\n            .style({\r\n                fill: Color.rgb(options.arrowcolor),\r\n                'stroke-width': 0\r\n            });\r\n    }\r\n\r\n    if(doStart) drawhead(startHeadStyle, start, startRot, startScale);\r\n    if(doEnd) drawhead(headStyle, end, endRot, scale);\r\n};\r\n"]},"metadata":{},"sourceType":"script"}