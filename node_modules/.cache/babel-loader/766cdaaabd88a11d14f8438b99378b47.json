{"ast":null,"code":"'use strict';\n\nvar d3 = require('@plotly/d3');\n\nvar Lib = require('../../lib');\n\nvar geoUtils = require('../../lib/geo_location_utils');\n\nvar getTopojsonFeatures = require('../../lib/topojson_utils').getTopojsonFeatures;\n\nvar findExtremes = require('../../plots/cartesian/autorange').findExtremes;\n\nvar style = require('./style').style;\n\nfunction plot(gd, geo, calcData) {\n  var choroplethLayer = geo.layers.backplot.select('.choroplethlayer');\n  Lib.makeTraceGroups(choroplethLayer, calcData, 'trace choropleth').each(function (calcTrace) {\n    var sel = d3.select(this);\n    var paths = sel.selectAll('path.choroplethlocation').data(Lib.identity);\n    paths.enter().append('path').classed('choroplethlocation', true);\n    paths.exit().remove(); // call style here within topojson request callback\n\n    style(gd, calcTrace);\n  });\n}\n\nfunction calcGeoJSON(calcTrace, fullLayout) {\n  var trace = calcTrace[0].trace;\n  var geoLayout = fullLayout[trace.geo];\n  var geo = geoLayout._subplot;\n  var locationmode = trace.locationmode;\n  var len = trace._length;\n  var features = locationmode === 'geojson-id' ? geoUtils.extractTraceFeature(calcTrace) : getTopojsonFeatures(trace, geo.topojson);\n  var lonArray = [];\n  var latArray = [];\n\n  for (var i = 0; i < len; i++) {\n    var calcPt = calcTrace[i];\n    var feature = locationmode === 'geojson-id' ? calcPt.fOut : geoUtils.locationToFeature(locationmode, calcPt.loc, features);\n\n    if (feature) {\n      calcPt.geojson = feature;\n      calcPt.ct = feature.properties.ct;\n      calcPt._polygons = geoUtils.feature2polygons(feature);\n      var bboxFeature = geoUtils.computeBbox(feature);\n      lonArray.push(bboxFeature[0], bboxFeature[2]);\n      latArray.push(bboxFeature[1], bboxFeature[3]);\n    } else {\n      calcPt.geojson = null;\n    }\n  }\n\n  if (geoLayout.fitbounds === 'geojson' && locationmode === 'geojson-id') {\n    var bboxGeojson = geoUtils.computeBbox(geoUtils.getTraceGeojson(trace));\n    lonArray = [bboxGeojson[0], bboxGeojson[2]];\n    latArray = [bboxGeojson[1], bboxGeojson[3]];\n  }\n\n  var opts = {\n    padded: true\n  };\n  trace._extremes.lon = findExtremes(geoLayout.lonaxis._ax, lonArray, opts);\n  trace._extremes.lat = findExtremes(geoLayout.lataxis._ax, latArray, opts);\n}\n\nmodule.exports = {\n  calcGeoJSON: calcGeoJSON,\n  plot: plot\n};","map":{"version":3,"sources":["C:/Users/mikke/VSC/fantasy-django-react/fantasy-django/fantasy-react-app/node_modules/plotly.js/src/traces/choropleth/plot.js"],"names":["d3","require","Lib","geoUtils","getTopojsonFeatures","findExtremes","style","plot","gd","geo","calcData","choroplethLayer","layers","backplot","select","makeTraceGroups","each","calcTrace","sel","paths","selectAll","data","identity","enter","append","classed","exit","remove","calcGeoJSON","fullLayout","trace","geoLayout","_subplot","locationmode","len","_length","features","extractTraceFeature","topojson","lonArray","latArray","i","calcPt","feature","fOut","locationToFeature","loc","geojson","ct","properties","_polygons","feature2polygons","bboxFeature","computeBbox","push","fitbounds","bboxGeojson","getTraceGeojson","opts","padded","_extremes","lon","lonaxis","_ax","lat","lataxis","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,EAAE,GAAGC,OAAO,CAAC,YAAD,CAAhB;;AAEA,IAAIC,GAAG,GAAGD,OAAO,CAAC,WAAD,CAAjB;;AACA,IAAIE,QAAQ,GAAGF,OAAO,CAAC,8BAAD,CAAtB;;AACA,IAAIG,mBAAmB,GAAGH,OAAO,CAAC,0BAAD,CAAP,CAAoCG,mBAA9D;;AACA,IAAIC,YAAY,GAAGJ,OAAO,CAAC,iCAAD,CAAP,CAA2CI,YAA9D;;AAEA,IAAIC,KAAK,GAAGL,OAAO,CAAC,SAAD,CAAP,CAAmBK,KAA/B;;AAEA,SAASC,IAAT,CAAcC,EAAd,EAAkBC,GAAlB,EAAuBC,QAAvB,EAAiC;AAC7B,MAAIC,eAAe,GAAGF,GAAG,CAACG,MAAJ,CAAWC,QAAX,CAAoBC,MAApB,CAA2B,kBAA3B,CAAtB;AAEAZ,EAAAA,GAAG,CAACa,eAAJ,CAAoBJ,eAApB,EAAqCD,QAArC,EAA+C,kBAA/C,EAAmEM,IAAnE,CAAwE,UAASC,SAAT,EAAoB;AACxF,QAAIC,GAAG,GAAGlB,EAAE,CAACc,MAAH,CAAU,IAAV,CAAV;AAEA,QAAIK,KAAK,GAAGD,GAAG,CAACE,SAAJ,CAAc,yBAAd,EACPC,IADO,CACFnB,GAAG,CAACoB,QADF,CAAZ;AAGAH,IAAAA,KAAK,CAACI,KAAN,GAAcC,MAAd,CAAqB,MAArB,EACKC,OADL,CACa,oBADb,EACmC,IADnC;AAGAN,IAAAA,KAAK,CAACO,IAAN,GAAaC,MAAb,GATwF,CAWxF;;AACArB,IAAAA,KAAK,CAACE,EAAD,EAAKS,SAAL,CAAL;AACH,GAbD;AAcH;;AAED,SAASW,WAAT,CAAqBX,SAArB,EAAgCY,UAAhC,EAA4C;AACxC,MAAIC,KAAK,GAAGb,SAAS,CAAC,CAAD,CAAT,CAAaa,KAAzB;AACA,MAAIC,SAAS,GAAGF,UAAU,CAACC,KAAK,CAACrB,GAAP,CAA1B;AACA,MAAIA,GAAG,GAAGsB,SAAS,CAACC,QAApB;AACA,MAAIC,YAAY,GAAGH,KAAK,CAACG,YAAzB;AACA,MAAIC,GAAG,GAAGJ,KAAK,CAACK,OAAhB;AAEA,MAAIC,QAAQ,GAAGH,YAAY,KAAK,YAAjB,GACX9B,QAAQ,CAACkC,mBAAT,CAA6BpB,SAA7B,CADW,GAEXb,mBAAmB,CAAC0B,KAAD,EAAQrB,GAAG,CAAC6B,QAAZ,CAFvB;AAIA,MAAIC,QAAQ,GAAG,EAAf;AACA,MAAIC,QAAQ,GAAG,EAAf;;AAEA,OAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGP,GAAnB,EAAwBO,CAAC,EAAzB,EAA6B;AACzB,QAAIC,MAAM,GAAGzB,SAAS,CAACwB,CAAD,CAAtB;AACA,QAAIE,OAAO,GAAGV,YAAY,KAAK,YAAjB,GACVS,MAAM,CAACE,IADG,GAEVzC,QAAQ,CAAC0C,iBAAT,CAA2BZ,YAA3B,EAAyCS,MAAM,CAACI,GAAhD,EAAqDV,QAArD,CAFJ;;AAIA,QAAGO,OAAH,EAAY;AACRD,MAAAA,MAAM,CAACK,OAAP,GAAiBJ,OAAjB;AACAD,MAAAA,MAAM,CAACM,EAAP,GAAYL,OAAO,CAACM,UAAR,CAAmBD,EAA/B;AACAN,MAAAA,MAAM,CAACQ,SAAP,GAAmB/C,QAAQ,CAACgD,gBAAT,CAA0BR,OAA1B,CAAnB;AAEA,UAAIS,WAAW,GAAGjD,QAAQ,CAACkD,WAAT,CAAqBV,OAArB,CAAlB;AACAJ,MAAAA,QAAQ,CAACe,IAAT,CAAcF,WAAW,CAAC,CAAD,CAAzB,EAA8BA,WAAW,CAAC,CAAD,CAAzC;AACAZ,MAAAA,QAAQ,CAACc,IAAT,CAAcF,WAAW,CAAC,CAAD,CAAzB,EAA8BA,WAAW,CAAC,CAAD,CAAzC;AACH,KARD,MAQO;AACHV,MAAAA,MAAM,CAACK,OAAP,GAAiB,IAAjB;AACH;AACJ;;AAED,MAAGhB,SAAS,CAACwB,SAAV,KAAwB,SAAxB,IAAqCtB,YAAY,KAAK,YAAzD,EAAuE;AACnE,QAAIuB,WAAW,GAAGrD,QAAQ,CAACkD,WAAT,CAAqBlD,QAAQ,CAACsD,eAAT,CAAyB3B,KAAzB,CAArB,CAAlB;AACAS,IAAAA,QAAQ,GAAG,CAACiB,WAAW,CAAC,CAAD,CAAZ,EAAiBA,WAAW,CAAC,CAAD,CAA5B,CAAX;AACAhB,IAAAA,QAAQ,GAAG,CAACgB,WAAW,CAAC,CAAD,CAAZ,EAAiBA,WAAW,CAAC,CAAD,CAA5B,CAAX;AACH;;AAED,MAAIE,IAAI,GAAG;AAACC,IAAAA,MAAM,EAAE;AAAT,GAAX;AACA7B,EAAAA,KAAK,CAAC8B,SAAN,CAAgBC,GAAhB,GAAsBxD,YAAY,CAAC0B,SAAS,CAAC+B,OAAV,CAAkBC,GAAnB,EAAwBxB,QAAxB,EAAkCmB,IAAlC,CAAlC;AACA5B,EAAAA,KAAK,CAAC8B,SAAN,CAAgBI,GAAhB,GAAsB3D,YAAY,CAAC0B,SAAS,CAACkC,OAAV,CAAkBF,GAAnB,EAAwBvB,QAAxB,EAAkCkB,IAAlC,CAAlC;AACH;;AAEDQ,MAAM,CAACC,OAAP,GAAiB;AACbvC,EAAAA,WAAW,EAAEA,WADA;AAEbrB,EAAAA,IAAI,EAAEA;AAFO,CAAjB","sourcesContent":["'use strict';\r\n\r\nvar d3 = require('@plotly/d3');\r\n\r\nvar Lib = require('../../lib');\r\nvar geoUtils = require('../../lib/geo_location_utils');\r\nvar getTopojsonFeatures = require('../../lib/topojson_utils').getTopojsonFeatures;\r\nvar findExtremes = require('../../plots/cartesian/autorange').findExtremes;\r\n\r\nvar style = require('./style').style;\r\n\r\nfunction plot(gd, geo, calcData) {\r\n    var choroplethLayer = geo.layers.backplot.select('.choroplethlayer');\r\n\r\n    Lib.makeTraceGroups(choroplethLayer, calcData, 'trace choropleth').each(function(calcTrace) {\r\n        var sel = d3.select(this);\r\n\r\n        var paths = sel.selectAll('path.choroplethlocation')\r\n            .data(Lib.identity);\r\n\r\n        paths.enter().append('path')\r\n            .classed('choroplethlocation', true);\r\n\r\n        paths.exit().remove();\r\n\r\n        // call style here within topojson request callback\r\n        style(gd, calcTrace);\r\n    });\r\n}\r\n\r\nfunction calcGeoJSON(calcTrace, fullLayout) {\r\n    var trace = calcTrace[0].trace;\r\n    var geoLayout = fullLayout[trace.geo];\r\n    var geo = geoLayout._subplot;\r\n    var locationmode = trace.locationmode;\r\n    var len = trace._length;\r\n\r\n    var features = locationmode === 'geojson-id' ?\r\n        geoUtils.extractTraceFeature(calcTrace) :\r\n        getTopojsonFeatures(trace, geo.topojson);\r\n\r\n    var lonArray = [];\r\n    var latArray = [];\r\n\r\n    for(var i = 0; i < len; i++) {\r\n        var calcPt = calcTrace[i];\r\n        var feature = locationmode === 'geojson-id' ?\r\n            calcPt.fOut :\r\n            geoUtils.locationToFeature(locationmode, calcPt.loc, features);\r\n\r\n        if(feature) {\r\n            calcPt.geojson = feature;\r\n            calcPt.ct = feature.properties.ct;\r\n            calcPt._polygons = geoUtils.feature2polygons(feature);\r\n\r\n            var bboxFeature = geoUtils.computeBbox(feature);\r\n            lonArray.push(bboxFeature[0], bboxFeature[2]);\r\n            latArray.push(bboxFeature[1], bboxFeature[3]);\r\n        } else {\r\n            calcPt.geojson = null;\r\n        }\r\n    }\r\n\r\n    if(geoLayout.fitbounds === 'geojson' && locationmode === 'geojson-id') {\r\n        var bboxGeojson = geoUtils.computeBbox(geoUtils.getTraceGeojson(trace));\r\n        lonArray = [bboxGeojson[0], bboxGeojson[2]];\r\n        latArray = [bboxGeojson[1], bboxGeojson[3]];\r\n    }\r\n\r\n    var opts = {padded: true};\r\n    trace._extremes.lon = findExtremes(geoLayout.lonaxis._ax, lonArray, opts);\r\n    trace._extremes.lat = findExtremes(geoLayout.lataxis._ax, latArray, opts);\r\n}\r\n\r\nmodule.exports = {\r\n    calcGeoJSON: calcGeoJSON,\r\n    plot: plot\r\n};\r\n"]},"metadata":{},"sourceType":"script"}