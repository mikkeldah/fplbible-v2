{"ast":null,"code":"/*jshint unused:true*/\n\n/*\r\nInput:  matrix      ; a 4x4 matrix\r\nOutput: translation ; a 3 component vector\r\n        scale       ; a 3 component vector\r\n        skew        ; skew factors XY,XZ,YZ represented as a 3 component vector\r\n        perspective ; a 4 component vector\r\n        quaternion  ; a 4 component vector\r\nReturns false if the matrix cannot be decomposed, true if it can\r\n\r\n\r\nReferences:\r\nhttps://github.com/kamicane/matrix3d/blob/master/lib/Matrix3d.js\r\nhttps://github.com/ChromiumWebApps/chromium/blob/master/ui/gfx/transform_util.cc\r\nhttp://www.w3.org/TR/css3-transforms/#decomposing-a-3d-matrix\r\n*/\nvar normalize = require('./normalize');\n\nvar create = require('gl-mat4/create');\n\nvar clone = require('gl-mat4/clone');\n\nvar determinant = require('gl-mat4/determinant');\n\nvar invert = require('gl-mat4/invert');\n\nvar transpose = require('gl-mat4/transpose');\n\nvar vec3 = {\n  length: require('gl-vec3/length'),\n  normalize: require('gl-vec3/normalize'),\n  dot: require('gl-vec3/dot'),\n  cross: require('gl-vec3/cross')\n};\nvar tmp = create();\nvar perspectiveMatrix = create();\nvar tmpVec4 = [0, 0, 0, 0];\nvar row = [[0, 0, 0], [0, 0, 0], [0, 0, 0]];\nvar pdum3 = [0, 0, 0];\n\nmodule.exports = function decomposeMat4(matrix, translation, scale, skew, perspective, quaternion) {\n  if (!translation) translation = [0, 0, 0];\n  if (!scale) scale = [0, 0, 0];\n  if (!skew) skew = [0, 0, 0];\n  if (!perspective) perspective = [0, 0, 0, 1];\n  if (!quaternion) quaternion = [0, 0, 0, 1]; //normalize, if not possible then bail out early\n\n  if (!normalize(tmp, matrix)) return false; // perspectiveMatrix is used to solve for perspective, but it also provides\n  // an easy way to test for singularity of the upper 3x3 component.\n\n  clone(perspectiveMatrix, tmp);\n  perspectiveMatrix[3] = 0;\n  perspectiveMatrix[7] = 0;\n  perspectiveMatrix[11] = 0;\n  perspectiveMatrix[15] = 1; // If the perspectiveMatrix is not invertible, we are also unable to\n  // decompose, so we'll bail early. Constant taken from SkMatrix44::invert.\n\n  if (Math.abs(determinant(perspectiveMatrix) < 1e-8)) return false;\n  var a03 = tmp[3],\n      a13 = tmp[7],\n      a23 = tmp[11],\n      a30 = tmp[12],\n      a31 = tmp[13],\n      a32 = tmp[14],\n      a33 = tmp[15]; // First, isolate perspective.\n\n  if (a03 !== 0 || a13 !== 0 || a23 !== 0) {\n    tmpVec4[0] = a03;\n    tmpVec4[1] = a13;\n    tmpVec4[2] = a23;\n    tmpVec4[3] = a33; // Solve the equation by inverting perspectiveMatrix and multiplying\n    // rightHandSide by the inverse.\n    // resuing the perspectiveMatrix here since it's no longer needed\n\n    var ret = invert(perspectiveMatrix, perspectiveMatrix);\n    if (!ret) return false;\n    transpose(perspectiveMatrix, perspectiveMatrix); //multiply by transposed inverse perspective matrix, into perspective vec4\n\n    vec4multMat4(perspective, tmpVec4, perspectiveMatrix);\n  } else {\n    //no perspective\n    perspective[0] = perspective[1] = perspective[2] = 0;\n    perspective[3] = 1;\n  } // Next take care of translation\n\n\n  translation[0] = a30;\n  translation[1] = a31;\n  translation[2] = a32; // Now get scale and shear. 'row' is a 3 element array of 3 component vectors\n\n  mat3from4(row, tmp); // Compute X scale factor and normalize first row.\n\n  scale[0] = vec3.length(row[0]);\n  vec3.normalize(row[0], row[0]); // Compute XY shear factor and make 2nd row orthogonal to 1st.\n\n  skew[0] = vec3.dot(row[0], row[1]);\n  combine(row[1], row[1], row[0], 1.0, -skew[0]); // Now, compute Y scale and normalize 2nd row.\n\n  scale[1] = vec3.length(row[1]);\n  vec3.normalize(row[1], row[1]);\n  skew[0] /= scale[1]; // Compute XZ and YZ shears, orthogonalize 3rd row\n\n  skew[1] = vec3.dot(row[0], row[2]);\n  combine(row[2], row[2], row[0], 1.0, -skew[1]);\n  skew[2] = vec3.dot(row[1], row[2]);\n  combine(row[2], row[2], row[1], 1.0, -skew[2]); // Next, get Z scale and normalize 3rd row.\n\n  scale[2] = vec3.length(row[2]);\n  vec3.normalize(row[2], row[2]);\n  skew[1] /= scale[2];\n  skew[2] /= scale[2]; // At this point, the matrix (in rows) is orthonormal.\n  // Check for a coordinate system flip.  If the determinant\n  // is -1, then negate the matrix and the scaling factors.\n\n  vec3.cross(pdum3, row[1], row[2]);\n\n  if (vec3.dot(row[0], pdum3) < 0) {\n    for (var i = 0; i < 3; i++) {\n      scale[i] *= -1;\n      row[i][0] *= -1;\n      row[i][1] *= -1;\n      row[i][2] *= -1;\n    }\n  } // Now, get the rotations out\n\n\n  quaternion[0] = 0.5 * Math.sqrt(Math.max(1 + row[0][0] - row[1][1] - row[2][2], 0));\n  quaternion[1] = 0.5 * Math.sqrt(Math.max(1 - row[0][0] + row[1][1] - row[2][2], 0));\n  quaternion[2] = 0.5 * Math.sqrt(Math.max(1 - row[0][0] - row[1][1] + row[2][2], 0));\n  quaternion[3] = 0.5 * Math.sqrt(Math.max(1 + row[0][0] + row[1][1] + row[2][2], 0));\n  if (row[2][1] > row[1][2]) quaternion[0] = -quaternion[0];\n  if (row[0][2] > row[2][0]) quaternion[1] = -quaternion[1];\n  if (row[1][0] > row[0][1]) quaternion[2] = -quaternion[2];\n  return true;\n}; //will be replaced by gl-vec4 eventually\n\n\nfunction vec4multMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n} //gets upper-left of a 4x4 matrix into a 3x3 of vectors\n\n\nfunction mat3from4(out, mat4x4) {\n  out[0][0] = mat4x4[0];\n  out[0][1] = mat4x4[1];\n  out[0][2] = mat4x4[2];\n  out[1][0] = mat4x4[4];\n  out[1][1] = mat4x4[5];\n  out[1][2] = mat4x4[6];\n  out[2][0] = mat4x4[8];\n  out[2][1] = mat4x4[9];\n  out[2][2] = mat4x4[10];\n}\n\nfunction combine(out, a, b, scale1, scale2) {\n  out[0] = a[0] * scale1 + b[0] * scale2;\n  out[1] = a[1] * scale1 + b[1] * scale2;\n  out[2] = a[2] * scale1 + b[2] * scale2;\n}","map":{"version":3,"sources":["C:/Users/mikke/VSC/fantasy-django-react/fantasy-django/fantasy-react-app/node_modules/mat4-decompose/index.js"],"names":["normalize","require","create","clone","determinant","invert","transpose","vec3","length","dot","cross","tmp","perspectiveMatrix","tmpVec4","row","pdum3","module","exports","decomposeMat4","matrix","translation","scale","skew","perspective","quaternion","Math","abs","a03","a13","a23","a30","a31","a32","a33","ret","vec4multMat4","mat3from4","combine","i","sqrt","max","out","a","m","x","y","z","w","mat4x4","b","scale1","scale2"],"mappings":"AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,aAAD,CAAvB;;AAEA,IAAIC,MAAM,GAAGD,OAAO,CAAC,gBAAD,CAApB;;AACA,IAAIE,KAAK,GAAGF,OAAO,CAAC,eAAD,CAAnB;;AACA,IAAIG,WAAW,GAAGH,OAAO,CAAC,qBAAD,CAAzB;;AACA,IAAII,MAAM,GAAGJ,OAAO,CAAC,gBAAD,CAApB;;AACA,IAAIK,SAAS,GAAGL,OAAO,CAAC,mBAAD,CAAvB;;AACA,IAAIM,IAAI,GAAG;AACPC,EAAAA,MAAM,EAAEP,OAAO,CAAC,gBAAD,CADR;AAEPD,EAAAA,SAAS,EAAEC,OAAO,CAAC,mBAAD,CAFX;AAGPQ,EAAAA,GAAG,EAAER,OAAO,CAAC,aAAD,CAHL;AAIPS,EAAAA,KAAK,EAAET,OAAO,CAAC,eAAD;AAJP,CAAX;AAOA,IAAIU,GAAG,GAAGT,MAAM,EAAhB;AACA,IAAIU,iBAAiB,GAAGV,MAAM,EAA9B;AACA,IAAIW,OAAO,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAd;AACA,IAAIC,GAAG,GAAG,CAAE,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAAF,EAAW,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAAX,EAAoB,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAApB,CAAV;AACA,IAAIC,KAAK,GAAG,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAAZ;;AAEAC,MAAM,CAACC,OAAP,GAAiB,SAASC,aAAT,CAAuBC,MAAvB,EAA+BC,WAA/B,EAA4CC,KAA5C,EAAmDC,IAAnD,EAAyDC,WAAzD,EAAsEC,UAAtE,EAAkF;AAC/F,MAAI,CAACJ,WAAL,EAAkBA,WAAW,GAAG,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAAd;AAClB,MAAI,CAACC,KAAL,EAAYA,KAAK,GAAG,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAAR;AACZ,MAAI,CAACC,IAAL,EAAWA,IAAI,GAAG,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAAP;AACX,MAAI,CAACC,WAAL,EAAkBA,WAAW,GAAG,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,CAAd;AAClB,MAAI,CAACC,UAAL,EAAiBA,UAAU,GAAG,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,CAAb,CAL8E,CAO/F;;AACA,MAAI,CAACxB,SAAS,CAACW,GAAD,EAAMQ,MAAN,CAAd,EACI,OAAO,KAAP,CAT2F,CAW/F;AACA;;AACAhB,EAAAA,KAAK,CAACS,iBAAD,EAAoBD,GAApB,CAAL;AAEAC,EAAAA,iBAAiB,CAAC,CAAD,CAAjB,GAAuB,CAAvB;AACAA,EAAAA,iBAAiB,CAAC,CAAD,CAAjB,GAAuB,CAAvB;AACAA,EAAAA,iBAAiB,CAAC,EAAD,CAAjB,GAAwB,CAAxB;AACAA,EAAAA,iBAAiB,CAAC,EAAD,CAAjB,GAAwB,CAAxB,CAlB+F,CAoB/F;AACA;;AACA,MAAIa,IAAI,CAACC,GAAL,CAAStB,WAAW,CAACQ,iBAAD,CAAX,GAAiC,IAA1C,CAAJ,EACI,OAAO,KAAP;AAEJ,MAAIe,GAAG,GAAGhB,GAAG,CAAC,CAAD,CAAb;AAAA,MAAkBiB,GAAG,GAAGjB,GAAG,CAAC,CAAD,CAA3B;AAAA,MAAgCkB,GAAG,GAAGlB,GAAG,CAAC,EAAD,CAAzC;AAAA,MACQmB,GAAG,GAAGnB,GAAG,CAAC,EAAD,CADjB;AAAA,MACuBoB,GAAG,GAAGpB,GAAG,CAAC,EAAD,CADhC;AAAA,MACsCqB,GAAG,GAAGrB,GAAG,CAAC,EAAD,CAD/C;AAAA,MACqDsB,GAAG,GAAGtB,GAAG,CAAC,EAAD,CAD9D,CAzB+F,CA4B/F;;AACA,MAAIgB,GAAG,KAAK,CAAR,IAAaC,GAAG,KAAK,CAArB,IAA0BC,GAAG,KAAK,CAAtC,EAAyC;AACrChB,IAAAA,OAAO,CAAC,CAAD,CAAP,GAAac,GAAb;AACAd,IAAAA,OAAO,CAAC,CAAD,CAAP,GAAae,GAAb;AACAf,IAAAA,OAAO,CAAC,CAAD,CAAP,GAAagB,GAAb;AACAhB,IAAAA,OAAO,CAAC,CAAD,CAAP,GAAaoB,GAAb,CAJqC,CAMrC;AACA;AACA;;AACA,QAAIC,GAAG,GAAG7B,MAAM,CAACO,iBAAD,EAAoBA,iBAApB,CAAhB;AACA,QAAI,CAACsB,GAAL,EAAU,OAAO,KAAP;AACV5B,IAAAA,SAAS,CAACM,iBAAD,EAAoBA,iBAApB,CAAT,CAXqC,CAarC;;AACAuB,IAAAA,YAAY,CAACZ,WAAD,EAAcV,OAAd,EAAuBD,iBAAvB,CAAZ;AACH,GAfD,MAeO;AACH;AACAW,IAAAA,WAAW,CAAC,CAAD,CAAX,GAAiBA,WAAW,CAAC,CAAD,CAAX,GAAiBA,WAAW,CAAC,CAAD,CAAX,GAAiB,CAAnD;AACAA,IAAAA,WAAW,CAAC,CAAD,CAAX,GAAiB,CAAjB;AACH,GAhD8F,CAkD/F;;;AACAH,EAAAA,WAAW,CAAC,CAAD,CAAX,GAAiBU,GAAjB;AACAV,EAAAA,WAAW,CAAC,CAAD,CAAX,GAAiBW,GAAjB;AACAX,EAAAA,WAAW,CAAC,CAAD,CAAX,GAAiBY,GAAjB,CArD+F,CAuD/F;;AACAI,EAAAA,SAAS,CAACtB,GAAD,EAAMH,GAAN,CAAT,CAxD+F,CA0D/F;;AACAU,EAAAA,KAAK,CAAC,CAAD,CAAL,GAAWd,IAAI,CAACC,MAAL,CAAYM,GAAG,CAAC,CAAD,CAAf,CAAX;AACAP,EAAAA,IAAI,CAACP,SAAL,CAAec,GAAG,CAAC,CAAD,CAAlB,EAAuBA,GAAG,CAAC,CAAD,CAA1B,EA5D+F,CA8D/F;;AACAQ,EAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUf,IAAI,CAACE,GAAL,CAASK,GAAG,CAAC,CAAD,CAAZ,EAAiBA,GAAG,CAAC,CAAD,CAApB,CAAV;AACAuB,EAAAA,OAAO,CAACvB,GAAG,CAAC,CAAD,CAAJ,EAASA,GAAG,CAAC,CAAD,CAAZ,EAAiBA,GAAG,CAAC,CAAD,CAApB,EAAyB,GAAzB,EAA8B,CAACQ,IAAI,CAAC,CAAD,CAAnC,CAAP,CAhE+F,CAkE/F;;AACAD,EAAAA,KAAK,CAAC,CAAD,CAAL,GAAWd,IAAI,CAACC,MAAL,CAAYM,GAAG,CAAC,CAAD,CAAf,CAAX;AACAP,EAAAA,IAAI,CAACP,SAAL,CAAec,GAAG,CAAC,CAAD,CAAlB,EAAuBA,GAAG,CAAC,CAAD,CAA1B;AACAQ,EAAAA,IAAI,CAAC,CAAD,CAAJ,IAAWD,KAAK,CAAC,CAAD,CAAhB,CArE+F,CAuE/F;;AACAC,EAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUf,IAAI,CAACE,GAAL,CAASK,GAAG,CAAC,CAAD,CAAZ,EAAiBA,GAAG,CAAC,CAAD,CAApB,CAAV;AACAuB,EAAAA,OAAO,CAACvB,GAAG,CAAC,CAAD,CAAJ,EAASA,GAAG,CAAC,CAAD,CAAZ,EAAiBA,GAAG,CAAC,CAAD,CAApB,EAAyB,GAAzB,EAA8B,CAACQ,IAAI,CAAC,CAAD,CAAnC,CAAP;AACAA,EAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUf,IAAI,CAACE,GAAL,CAASK,GAAG,CAAC,CAAD,CAAZ,EAAiBA,GAAG,CAAC,CAAD,CAApB,CAAV;AACAuB,EAAAA,OAAO,CAACvB,GAAG,CAAC,CAAD,CAAJ,EAASA,GAAG,CAAC,CAAD,CAAZ,EAAiBA,GAAG,CAAC,CAAD,CAApB,EAAyB,GAAzB,EAA8B,CAACQ,IAAI,CAAC,CAAD,CAAnC,CAAP,CA3E+F,CA6E/F;;AACAD,EAAAA,KAAK,CAAC,CAAD,CAAL,GAAWd,IAAI,CAACC,MAAL,CAAYM,GAAG,CAAC,CAAD,CAAf,CAAX;AACAP,EAAAA,IAAI,CAACP,SAAL,CAAec,GAAG,CAAC,CAAD,CAAlB,EAAuBA,GAAG,CAAC,CAAD,CAA1B;AACAQ,EAAAA,IAAI,CAAC,CAAD,CAAJ,IAAWD,KAAK,CAAC,CAAD,CAAhB;AACAC,EAAAA,IAAI,CAAC,CAAD,CAAJ,IAAWD,KAAK,CAAC,CAAD,CAAhB,CAjF+F,CAoF/F;AACA;AACA;;AACAd,EAAAA,IAAI,CAACG,KAAL,CAAWK,KAAX,EAAkBD,GAAG,CAAC,CAAD,CAArB,EAA0BA,GAAG,CAAC,CAAD,CAA7B;;AACA,MAAIP,IAAI,CAACE,GAAL,CAASK,GAAG,CAAC,CAAD,CAAZ,EAAiBC,KAAjB,IAA0B,CAA9B,EAAiC;AAC7B,SAAK,IAAIuB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxBjB,MAAAA,KAAK,CAACiB,CAAD,CAAL,IAAY,CAAC,CAAb;AACAxB,MAAAA,GAAG,CAACwB,CAAD,CAAH,CAAO,CAAP,KAAa,CAAC,CAAd;AACAxB,MAAAA,GAAG,CAACwB,CAAD,CAAH,CAAO,CAAP,KAAa,CAAC,CAAd;AACAxB,MAAAA,GAAG,CAACwB,CAAD,CAAH,CAAO,CAAP,KAAa,CAAC,CAAd;AACH;AACJ,GA/F8F,CAiG/F;;;AACAd,EAAAA,UAAU,CAAC,CAAD,CAAV,GAAgB,MAAMC,IAAI,CAACc,IAAL,CAAUd,IAAI,CAACe,GAAL,CAAS,IAAI1B,GAAG,CAAC,CAAD,CAAH,CAAO,CAAP,CAAJ,GAAgBA,GAAG,CAAC,CAAD,CAAH,CAAO,CAAP,CAAhB,GAA4BA,GAAG,CAAC,CAAD,CAAH,CAAO,CAAP,CAArC,EAAgD,CAAhD,CAAV,CAAtB;AACAU,EAAAA,UAAU,CAAC,CAAD,CAAV,GAAgB,MAAMC,IAAI,CAACc,IAAL,CAAUd,IAAI,CAACe,GAAL,CAAS,IAAI1B,GAAG,CAAC,CAAD,CAAH,CAAO,CAAP,CAAJ,GAAgBA,GAAG,CAAC,CAAD,CAAH,CAAO,CAAP,CAAhB,GAA4BA,GAAG,CAAC,CAAD,CAAH,CAAO,CAAP,CAArC,EAAgD,CAAhD,CAAV,CAAtB;AACAU,EAAAA,UAAU,CAAC,CAAD,CAAV,GAAgB,MAAMC,IAAI,CAACc,IAAL,CAAUd,IAAI,CAACe,GAAL,CAAS,IAAI1B,GAAG,CAAC,CAAD,CAAH,CAAO,CAAP,CAAJ,GAAgBA,GAAG,CAAC,CAAD,CAAH,CAAO,CAAP,CAAhB,GAA4BA,GAAG,CAAC,CAAD,CAAH,CAAO,CAAP,CAArC,EAAgD,CAAhD,CAAV,CAAtB;AACAU,EAAAA,UAAU,CAAC,CAAD,CAAV,GAAgB,MAAMC,IAAI,CAACc,IAAL,CAAUd,IAAI,CAACe,GAAL,CAAS,IAAI1B,GAAG,CAAC,CAAD,CAAH,CAAO,CAAP,CAAJ,GAAgBA,GAAG,CAAC,CAAD,CAAH,CAAO,CAAP,CAAhB,GAA4BA,GAAG,CAAC,CAAD,CAAH,CAAO,CAAP,CAArC,EAAgD,CAAhD,CAAV,CAAtB;AAEA,MAAIA,GAAG,CAAC,CAAD,CAAH,CAAO,CAAP,IAAYA,GAAG,CAAC,CAAD,CAAH,CAAO,CAAP,CAAhB,EACIU,UAAU,CAAC,CAAD,CAAV,GAAgB,CAACA,UAAU,CAAC,CAAD,CAA3B;AACJ,MAAIV,GAAG,CAAC,CAAD,CAAH,CAAO,CAAP,IAAYA,GAAG,CAAC,CAAD,CAAH,CAAO,CAAP,CAAhB,EACIU,UAAU,CAAC,CAAD,CAAV,GAAgB,CAACA,UAAU,CAAC,CAAD,CAA3B;AACJ,MAAIV,GAAG,CAAC,CAAD,CAAH,CAAO,CAAP,IAAYA,GAAG,CAAC,CAAD,CAAH,CAAO,CAAP,CAAhB,EACIU,UAAU,CAAC,CAAD,CAAV,GAAgB,CAACA,UAAU,CAAC,CAAD,CAA3B;AACJ,SAAO,IAAP;AACH,CA9GD,C,CAgHA;;;AACA,SAASW,YAAT,CAAsBM,GAAtB,EAA2BC,CAA3B,EAA8BC,CAA9B,EAAiC;AAC7B,MAAIC,CAAC,GAAGF,CAAC,CAAC,CAAD,CAAT;AAAA,MAAcG,CAAC,GAAGH,CAAC,CAAC,CAAD,CAAnB;AAAA,MAAwBI,CAAC,GAAGJ,CAAC,CAAC,CAAD,CAA7B;AAAA,MAAkCK,CAAC,GAAGL,CAAC,CAAC,CAAD,CAAvC;AACAD,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASE,CAAC,CAAC,CAAD,CAAD,GAAOC,CAAP,GAAWD,CAAC,CAAC,CAAD,CAAD,GAAOE,CAAlB,GAAsBF,CAAC,CAAC,CAAD,CAAD,GAAOG,CAA7B,GAAiCH,CAAC,CAAC,EAAD,CAAD,GAAQI,CAAlD;AACAN,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASE,CAAC,CAAC,CAAD,CAAD,GAAOC,CAAP,GAAWD,CAAC,CAAC,CAAD,CAAD,GAAOE,CAAlB,GAAsBF,CAAC,CAAC,CAAD,CAAD,GAAOG,CAA7B,GAAiCH,CAAC,CAAC,EAAD,CAAD,GAAQI,CAAlD;AACAN,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASE,CAAC,CAAC,CAAD,CAAD,GAAOC,CAAP,GAAWD,CAAC,CAAC,CAAD,CAAD,GAAOE,CAAlB,GAAsBF,CAAC,CAAC,EAAD,CAAD,GAAQG,CAA9B,GAAkCH,CAAC,CAAC,EAAD,CAAD,GAAQI,CAAnD;AACAN,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASE,CAAC,CAAC,CAAD,CAAD,GAAOC,CAAP,GAAWD,CAAC,CAAC,CAAD,CAAD,GAAOE,CAAlB,GAAsBF,CAAC,CAAC,EAAD,CAAD,GAAQG,CAA9B,GAAkCH,CAAC,CAAC,EAAD,CAAD,GAAQI,CAAnD;AACA,SAAON,GAAP;AACH,C,CAED;;;AACA,SAASL,SAAT,CAAmBK,GAAnB,EAAwBO,MAAxB,EAAgC;AAC5BP,EAAAA,GAAG,CAAC,CAAD,CAAH,CAAO,CAAP,IAAYO,MAAM,CAAC,CAAD,CAAlB;AACAP,EAAAA,GAAG,CAAC,CAAD,CAAH,CAAO,CAAP,IAAYO,MAAM,CAAC,CAAD,CAAlB;AACAP,EAAAA,GAAG,CAAC,CAAD,CAAH,CAAO,CAAP,IAAYO,MAAM,CAAC,CAAD,CAAlB;AAEAP,EAAAA,GAAG,CAAC,CAAD,CAAH,CAAO,CAAP,IAAYO,MAAM,CAAC,CAAD,CAAlB;AACAP,EAAAA,GAAG,CAAC,CAAD,CAAH,CAAO,CAAP,IAAYO,MAAM,CAAC,CAAD,CAAlB;AACAP,EAAAA,GAAG,CAAC,CAAD,CAAH,CAAO,CAAP,IAAYO,MAAM,CAAC,CAAD,CAAlB;AAEAP,EAAAA,GAAG,CAAC,CAAD,CAAH,CAAO,CAAP,IAAYO,MAAM,CAAC,CAAD,CAAlB;AACAP,EAAAA,GAAG,CAAC,CAAD,CAAH,CAAO,CAAP,IAAYO,MAAM,CAAC,CAAD,CAAlB;AACAP,EAAAA,GAAG,CAAC,CAAD,CAAH,CAAO,CAAP,IAAYO,MAAM,CAAC,EAAD,CAAlB;AACH;;AAED,SAASX,OAAT,CAAiBI,GAAjB,EAAsBC,CAAtB,EAAyBO,CAAzB,EAA4BC,MAA5B,EAAoCC,MAApC,EAA4C;AACxCV,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASC,CAAC,CAAC,CAAD,CAAD,GAAOQ,MAAP,GAAgBD,CAAC,CAAC,CAAD,CAAD,GAAOE,MAAhC;AACAV,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASC,CAAC,CAAC,CAAD,CAAD,GAAOQ,MAAP,GAAgBD,CAAC,CAAC,CAAD,CAAD,GAAOE,MAAhC;AACAV,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASC,CAAC,CAAC,CAAD,CAAD,GAAOQ,MAAP,GAAgBD,CAAC,CAAC,CAAD,CAAD,GAAOE,MAAhC;AACH","sourcesContent":["/*jshint unused:true*/\r\n/*\r\nInput:  matrix      ; a 4x4 matrix\r\nOutput: translation ; a 3 component vector\r\n        scale       ; a 3 component vector\r\n        skew        ; skew factors XY,XZ,YZ represented as a 3 component vector\r\n        perspective ; a 4 component vector\r\n        quaternion  ; a 4 component vector\r\nReturns false if the matrix cannot be decomposed, true if it can\r\n\r\n\r\nReferences:\r\nhttps://github.com/kamicane/matrix3d/blob/master/lib/Matrix3d.js\r\nhttps://github.com/ChromiumWebApps/chromium/blob/master/ui/gfx/transform_util.cc\r\nhttp://www.w3.org/TR/css3-transforms/#decomposing-a-3d-matrix\r\n*/\r\n\r\nvar normalize = require('./normalize')\r\n\r\nvar create = require('gl-mat4/create')\r\nvar clone = require('gl-mat4/clone')\r\nvar determinant = require('gl-mat4/determinant')\r\nvar invert = require('gl-mat4/invert')\r\nvar transpose = require('gl-mat4/transpose')\r\nvar vec3 = {\r\n    length: require('gl-vec3/length'),\r\n    normalize: require('gl-vec3/normalize'),\r\n    dot: require('gl-vec3/dot'),\r\n    cross: require('gl-vec3/cross')\r\n}\r\n\r\nvar tmp = create()\r\nvar perspectiveMatrix = create()\r\nvar tmpVec4 = [0, 0, 0, 0]\r\nvar row = [ [0,0,0], [0,0,0], [0,0,0] ]\r\nvar pdum3 = [0,0,0]\r\n\r\nmodule.exports = function decomposeMat4(matrix, translation, scale, skew, perspective, quaternion) {\r\n    if (!translation) translation = [0,0,0]\r\n    if (!scale) scale = [0,0,0]\r\n    if (!skew) skew = [0,0,0]\r\n    if (!perspective) perspective = [0,0,0,1]\r\n    if (!quaternion) quaternion = [0,0,0,1]\r\n\r\n    //normalize, if not possible then bail out early\r\n    if (!normalize(tmp, matrix))\r\n        return false\r\n\r\n    // perspectiveMatrix is used to solve for perspective, but it also provides\r\n    // an easy way to test for singularity of the upper 3x3 component.\r\n    clone(perspectiveMatrix, tmp)\r\n\r\n    perspectiveMatrix[3] = 0\r\n    perspectiveMatrix[7] = 0\r\n    perspectiveMatrix[11] = 0\r\n    perspectiveMatrix[15] = 1\r\n\r\n    // If the perspectiveMatrix is not invertible, we are also unable to\r\n    // decompose, so we'll bail early. Constant taken from SkMatrix44::invert.\r\n    if (Math.abs(determinant(perspectiveMatrix) < 1e-8))\r\n        return false\r\n\r\n    var a03 = tmp[3], a13 = tmp[7], a23 = tmp[11],\r\n            a30 = tmp[12], a31 = tmp[13], a32 = tmp[14], a33 = tmp[15]\r\n\r\n    // First, isolate perspective.\r\n    if (a03 !== 0 || a13 !== 0 || a23 !== 0) {\r\n        tmpVec4[0] = a03\r\n        tmpVec4[1] = a13\r\n        tmpVec4[2] = a23\r\n        tmpVec4[3] = a33\r\n\r\n        // Solve the equation by inverting perspectiveMatrix and multiplying\r\n        // rightHandSide by the inverse.\r\n        // resuing the perspectiveMatrix here since it's no longer needed\r\n        var ret = invert(perspectiveMatrix, perspectiveMatrix)\r\n        if (!ret) return false\r\n        transpose(perspectiveMatrix, perspectiveMatrix)\r\n\r\n        //multiply by transposed inverse perspective matrix, into perspective vec4\r\n        vec4multMat4(perspective, tmpVec4, perspectiveMatrix)\r\n    } else { \r\n        //no perspective\r\n        perspective[0] = perspective[1] = perspective[2] = 0\r\n        perspective[3] = 1\r\n    }\r\n\r\n    // Next take care of translation\r\n    translation[0] = a30\r\n    translation[1] = a31\r\n    translation[2] = a32\r\n\r\n    // Now get scale and shear. 'row' is a 3 element array of 3 component vectors\r\n    mat3from4(row, tmp)\r\n\r\n    // Compute X scale factor and normalize first row.\r\n    scale[0] = vec3.length(row[0])\r\n    vec3.normalize(row[0], row[0])\r\n\r\n    // Compute XY shear factor and make 2nd row orthogonal to 1st.\r\n    skew[0] = vec3.dot(row[0], row[1])\r\n    combine(row[1], row[1], row[0], 1.0, -skew[0])\r\n\r\n    // Now, compute Y scale and normalize 2nd row.\r\n    scale[1] = vec3.length(row[1])\r\n    vec3.normalize(row[1], row[1])\r\n    skew[0] /= scale[1]\r\n\r\n    // Compute XZ and YZ shears, orthogonalize 3rd row\r\n    skew[1] = vec3.dot(row[0], row[2])\r\n    combine(row[2], row[2], row[0], 1.0, -skew[1])\r\n    skew[2] = vec3.dot(row[1], row[2])\r\n    combine(row[2], row[2], row[1], 1.0, -skew[2])\r\n\r\n    // Next, get Z scale and normalize 3rd row.\r\n    scale[2] = vec3.length(row[2])\r\n    vec3.normalize(row[2], row[2])\r\n    skew[1] /= scale[2]\r\n    skew[2] /= scale[2]\r\n\r\n\r\n    // At this point, the matrix (in rows) is orthonormal.\r\n    // Check for a coordinate system flip.  If the determinant\r\n    // is -1, then negate the matrix and the scaling factors.\r\n    vec3.cross(pdum3, row[1], row[2])\r\n    if (vec3.dot(row[0], pdum3) < 0) {\r\n        for (var i = 0; i < 3; i++) {\r\n            scale[i] *= -1;\r\n            row[i][0] *= -1\r\n            row[i][1] *= -1\r\n            row[i][2] *= -1\r\n        }\r\n    }\r\n\r\n    // Now, get the rotations out\r\n    quaternion[0] = 0.5 * Math.sqrt(Math.max(1 + row[0][0] - row[1][1] - row[2][2], 0))\r\n    quaternion[1] = 0.5 * Math.sqrt(Math.max(1 - row[0][0] + row[1][1] - row[2][2], 0))\r\n    quaternion[2] = 0.5 * Math.sqrt(Math.max(1 - row[0][0] - row[1][1] + row[2][2], 0))\r\n    quaternion[3] = 0.5 * Math.sqrt(Math.max(1 + row[0][0] + row[1][1] + row[2][2], 0))\r\n\r\n    if (row[2][1] > row[1][2])\r\n        quaternion[0] = -quaternion[0]\r\n    if (row[0][2] > row[2][0])\r\n        quaternion[1] = -quaternion[1]\r\n    if (row[1][0] > row[0][1])\r\n        quaternion[2] = -quaternion[2]\r\n    return true\r\n}\r\n\r\n//will be replaced by gl-vec4 eventually\r\nfunction vec4multMat4(out, a, m) {\r\n    var x = a[0], y = a[1], z = a[2], w = a[3];\r\n    out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\r\n    out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\r\n    out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\r\n    out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\r\n    return out;\r\n}\r\n\r\n//gets upper-left of a 4x4 matrix into a 3x3 of vectors\r\nfunction mat3from4(out, mat4x4) {\r\n    out[0][0] = mat4x4[0]\r\n    out[0][1] = mat4x4[1]\r\n    out[0][2] = mat4x4[2]\r\n    \r\n    out[1][0] = mat4x4[4]\r\n    out[1][1] = mat4x4[5]\r\n    out[1][2] = mat4x4[6]\r\n\r\n    out[2][0] = mat4x4[8]\r\n    out[2][1] = mat4x4[9]\r\n    out[2][2] = mat4x4[10]\r\n}\r\n\r\nfunction combine(out, a, b, scale1, scale2) {\r\n    out[0] = a[0] * scale1 + b[0] * scale2\r\n    out[1] = a[1] * scale1 + b[1] * scale2\r\n    out[2] = a[2] * scale1 + b[2] * scale2\r\n}"]},"metadata":{},"sourceType":"script"}