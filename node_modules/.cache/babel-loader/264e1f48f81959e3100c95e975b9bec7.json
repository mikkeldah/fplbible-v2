{"ast":null,"code":"'use strict';\n/* eslint-disable no-console */\n\nvar dfltConfig = require('../plot_api/plot_config').dfltConfig;\n\nvar notifier = require('./notifier');\n\nvar loggers = module.exports = {};\n/**\r\n * ------------------------------------------\r\n * debugging tools\r\n * ------------------------------------------\r\n */\n\nloggers.log = function () {\n  var i;\n\n  if (dfltConfig.logging > 1) {\n    var messages = ['LOG:'];\n\n    for (i = 0; i < arguments.length; i++) {\n      messages.push(arguments[i]);\n    }\n\n    console.trace.apply(console, messages);\n  }\n\n  if (dfltConfig.notifyOnLogging > 1) {\n    var lines = [];\n\n    for (i = 0; i < arguments.length; i++) {\n      lines.push(arguments[i]);\n    }\n\n    notifier(lines.join('<br>'), 'long');\n  }\n};\n\nloggers.warn = function () {\n  var i;\n\n  if (dfltConfig.logging > 0) {\n    var messages = ['WARN:'];\n\n    for (i = 0; i < arguments.length; i++) {\n      messages.push(arguments[i]);\n    }\n\n    console.trace.apply(console, messages);\n  }\n\n  if (dfltConfig.notifyOnLogging > 0) {\n    var lines = [];\n\n    for (i = 0; i < arguments.length; i++) {\n      lines.push(arguments[i]);\n    }\n\n    notifier(lines.join('<br>'), 'stick');\n  }\n};\n\nloggers.error = function () {\n  var i;\n\n  if (dfltConfig.logging > 0) {\n    var messages = ['ERROR:'];\n\n    for (i = 0; i < arguments.length; i++) {\n      messages.push(arguments[i]);\n    }\n\n    console.error.apply(console, messages);\n  }\n\n  if (dfltConfig.notifyOnLogging > 0) {\n    var lines = [];\n\n    for (i = 0; i < arguments.length; i++) {\n      lines.push(arguments[i]);\n    }\n\n    notifier(lines.join('<br>'), 'stick');\n  }\n};","map":{"version":3,"sources":["C:/Users/mikke/VSC/fantasy-django-react/fantasy-django/fantasy-react-app/node_modules/plotly.js/src/lib/loggers.js"],"names":["dfltConfig","require","notifier","loggers","module","exports","log","i","logging","messages","arguments","length","push","console","trace","apply","notifyOnLogging","lines","join","warn","error"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\n/* eslint-disable no-console */\r\n\r\nvar dfltConfig = require('../plot_api/plot_config').dfltConfig;\r\n\r\nvar notifier = require('./notifier');\r\n\r\nvar loggers = module.exports = {};\r\n\r\n/**\r\n * ------------------------------------------\r\n * debugging tools\r\n * ------------------------------------------\r\n */\r\n\r\nloggers.log = function() {\r\n    var i;\r\n\r\n    if(dfltConfig.logging > 1) {\r\n        var messages = ['LOG:'];\r\n        for(i = 0; i < arguments.length; i++) {\r\n            messages.push(arguments[i]);\r\n        }\r\n        console.trace.apply(console, messages);\r\n    }\r\n\r\n    if(dfltConfig.notifyOnLogging > 1) {\r\n        var lines = [];\r\n        for(i = 0; i < arguments.length; i++) {\r\n            lines.push(arguments[i]);\r\n        }\r\n        notifier(lines.join('<br>'), 'long');\r\n    }\r\n};\r\n\r\nloggers.warn = function() {\r\n    var i;\r\n\r\n    if(dfltConfig.logging > 0) {\r\n        var messages = ['WARN:'];\r\n        for(i = 0; i < arguments.length; i++) {\r\n            messages.push(arguments[i]);\r\n        }\r\n        console.trace.apply(console, messages);\r\n    }\r\n\r\n    if(dfltConfig.notifyOnLogging > 0) {\r\n        var lines = [];\r\n        for(i = 0; i < arguments.length; i++) {\r\n            lines.push(arguments[i]);\r\n        }\r\n        notifier(lines.join('<br>'), 'stick');\r\n    }\r\n};\r\n\r\nloggers.error = function() {\r\n    var i;\r\n\r\n    if(dfltConfig.logging > 0) {\r\n        var messages = ['ERROR:'];\r\n        for(i = 0; i < arguments.length; i++) {\r\n            messages.push(arguments[i]);\r\n        }\r\n        console.error.apply(console, messages);\r\n    }\r\n\r\n    if(dfltConfig.notifyOnLogging > 0) {\r\n        var lines = [];\r\n        for(i = 0; i < arguments.length; i++) {\r\n            lines.push(arguments[i]);\r\n        }\r\n        notifier(lines.join('<br>'), 'stick');\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}