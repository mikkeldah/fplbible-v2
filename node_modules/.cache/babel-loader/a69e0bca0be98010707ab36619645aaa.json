{"ast":null,"code":"'use strict';\n\nvar Registry = require('../../registry');\n\nvar Lib = require('../../lib');\n\nvar Axes = require('../../plots/cartesian/axes');\n\nvar alignPeriod = require('../../plots/cartesian/align_period');\n\nvar histogram2dCalc = require('../histogram2d/calc');\n\nvar colorscaleCalc = require('../../components/colorscale/calc');\n\nvar convertColumnData = require('./convert_column_xyz');\n\nvar clean2dArray = require('./clean_2d_array');\n\nvar interp2d = require('./interp2d');\n\nvar findEmpties = require('./find_empties');\n\nvar makeBoundArray = require('./make_bound_array');\n\nvar BADNUM = require('../../constants/numerical').BADNUM;\n\nmodule.exports = function calc(gd, trace) {\n  // prepare the raw data\n  // run makeCalcdata on x and y even for heatmaps, in case of category mappings\n  var xa = Axes.getFromId(gd, trace.xaxis || 'x');\n  var ya = Axes.getFromId(gd, trace.yaxis || 'y');\n  var isContour = Registry.traceIs(trace, 'contour');\n  var isHist = Registry.traceIs(trace, 'histogram');\n  var isGL2D = Registry.traceIs(trace, 'gl2d');\n  var zsmooth = isContour ? 'best' : trace.zsmooth;\n  var x, x0, dx, origX;\n  var y, y0, dy, origY;\n  var z, i, binned; // cancel minimum tick spacings (only applies to bars and boxes)\n\n  xa._minDtick = 0;\n  ya._minDtick = 0;\n\n  if (isHist) {\n    binned = histogram2dCalc(gd, trace);\n    origX = binned.orig_x;\n    x = binned.x;\n    x0 = binned.x0;\n    dx = binned.dx;\n    origY = binned.orig_y;\n    y = binned.y;\n    y0 = binned.y0;\n    dy = binned.dy;\n    z = binned.z;\n  } else {\n    var zIn = trace.z;\n\n    if (Lib.isArray1D(zIn)) {\n      convertColumnData(trace, xa, ya, 'x', 'y', ['z']);\n      x = trace._x;\n      y = trace._y;\n      zIn = trace._z;\n    } else {\n      origX = trace.x ? xa.makeCalcdata(trace, 'x') : [];\n      origY = trace.y ? ya.makeCalcdata(trace, 'y') : [];\n      x = alignPeriod(trace, xa, 'x', origX);\n      y = alignPeriod(trace, ya, 'y', origY);\n      trace._x = x;\n      trace._y = y;\n    }\n\n    x0 = trace.x0;\n    dx = trace.dx;\n    y0 = trace.y0;\n    dy = trace.dy;\n    z = clean2dArray(zIn, trace, xa, ya);\n  }\n\n  if (xa.rangebreaks || ya.rangebreaks) {\n    z = dropZonBreaks(x, y, z);\n\n    if (!isHist) {\n      x = skipBreaks(x);\n      y = skipBreaks(y);\n      trace._x = x;\n      trace._y = y;\n    }\n  }\n\n  if (!isHist && (isContour || trace.connectgaps)) {\n    trace._emptypoints = findEmpties(z);\n    interp2d(z, trace._emptypoints);\n  }\n\n  function noZsmooth(msg) {\n    zsmooth = trace._input.zsmooth = trace.zsmooth = false;\n    Lib.warn('cannot use zsmooth: \"fast\": ' + msg);\n  } // check whether we really can smooth (ie all boxes are about the same size)\n\n\n  if (zsmooth === 'fast') {\n    if (xa.type === 'log' || ya.type === 'log') {\n      noZsmooth('log axis found');\n    } else if (!isHist) {\n      if (x.length) {\n        var avgdx = (x[x.length - 1] - x[0]) / (x.length - 1);\n        var maxErrX = Math.abs(avgdx / 100);\n\n        for (i = 0; i < x.length - 1; i++) {\n          if (Math.abs(x[i + 1] - x[i] - avgdx) > maxErrX) {\n            noZsmooth('x scale is not linear');\n            break;\n          }\n        }\n      }\n\n      if (y.length && zsmooth === 'fast') {\n        var avgdy = (y[y.length - 1] - y[0]) / (y.length - 1);\n        var maxErrY = Math.abs(avgdy / 100);\n\n        for (i = 0; i < y.length - 1; i++) {\n          if (Math.abs(y[i + 1] - y[i] - avgdy) > maxErrY) {\n            noZsmooth('y scale is not linear');\n            break;\n          }\n        }\n      }\n    }\n  } // create arrays of brick boundaries, to be used by autorange and heatmap.plot\n\n\n  var xlen = Lib.maxRowLength(z);\n  var xIn = trace.xtype === 'scaled' ? '' : x;\n  var xArray = makeBoundArray(trace, xIn, x0, dx, xlen, xa);\n  var yIn = trace.ytype === 'scaled' ? '' : y;\n  var yArray = makeBoundArray(trace, yIn, y0, dy, z.length, ya); // handled in gl2d convert step\n\n  if (!isGL2D) {\n    trace._extremes[xa._id] = Axes.findExtremes(xa, xArray);\n    trace._extremes[ya._id] = Axes.findExtremes(ya, yArray);\n  }\n\n  var cd0 = {\n    x: xArray,\n    y: yArray,\n    z: z,\n    text: trace._text || trace.text,\n    hovertext: trace._hovertext || trace.hovertext\n  };\n\n  if (trace.xperiodalignment && origX) {\n    cd0.orig_x = origX;\n  }\n\n  if (trace.yperiodalignment && origY) {\n    cd0.orig_y = origY;\n  }\n\n  if (xIn && xIn.length === xArray.length - 1) cd0.xCenter = xIn;\n  if (yIn && yIn.length === yArray.length - 1) cd0.yCenter = yIn;\n\n  if (isHist) {\n    cd0.xRanges = binned.xRanges;\n    cd0.yRanges = binned.yRanges;\n    cd0.pts = binned.pts;\n  }\n\n  if (!isContour) {\n    colorscaleCalc(gd, trace, {\n      vals: z,\n      cLetter: 'z'\n    });\n  }\n\n  if (isContour && trace.contours && trace.contours.coloring === 'heatmap') {\n    var dummyTrace = {\n      type: trace.type === 'contour' ? 'heatmap' : 'histogram2d',\n      xcalendar: trace.xcalendar,\n      ycalendar: trace.ycalendar\n    };\n    cd0.xfill = makeBoundArray(dummyTrace, xIn, x0, dx, xlen, xa);\n    cd0.yfill = makeBoundArray(dummyTrace, yIn, y0, dy, z.length, ya);\n  }\n\n  return [cd0];\n};\n\nfunction skipBreaks(a) {\n  var b = [];\n  var len = a.length;\n\n  for (var i = 0; i < len; i++) {\n    var v = a[i];\n    if (v !== BADNUM) b.push(v);\n  }\n\n  return b;\n}\n\nfunction dropZonBreaks(x, y, z) {\n  var newZ = [];\n  var k = -1;\n\n  for (var i = 0; i < z.length; i++) {\n    if (y[i] === BADNUM) continue;\n    k++;\n    newZ[k] = [];\n\n    for (var j = 0; j < z[i].length; j++) {\n      if (x[j] === BADNUM) continue;\n      newZ[k].push(z[i][j]);\n    }\n  }\n\n  return newZ;\n}","map":{"version":3,"sources":["C:/Users/mikke/VSC/fantasy-django-react/fantasy-django/fantasy-react-app/node_modules/plotly.js/src/traces/heatmap/calc.js"],"names":["Registry","require","Lib","Axes","alignPeriod","histogram2dCalc","colorscaleCalc","convertColumnData","clean2dArray","interp2d","findEmpties","makeBoundArray","BADNUM","module","exports","calc","gd","trace","xa","getFromId","xaxis","ya","yaxis","isContour","traceIs","isHist","isGL2D","zsmooth","x","x0","dx","origX","y","y0","dy","origY","z","i","binned","_minDtick","orig_x","orig_y","zIn","isArray1D","_x","_y","_z","makeCalcdata","rangebreaks","dropZonBreaks","skipBreaks","connectgaps","_emptypoints","noZsmooth","msg","_input","warn","type","length","avgdx","maxErrX","Math","abs","avgdy","maxErrY","xlen","maxRowLength","xIn","xtype","xArray","yIn","ytype","yArray","_extremes","_id","findExtremes","cd0","text","_text","hovertext","_hovertext","xperiodalignment","yperiodalignment","xCenter","yCenter","xRanges","yRanges","pts","vals","cLetter","contours","coloring","dummyTrace","xcalendar","ycalendar","xfill","yfill","a","b","len","v","push","newZ","k","j"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nvar Registry = require('../../registry');\r\nvar Lib = require('../../lib');\r\nvar Axes = require('../../plots/cartesian/axes');\r\nvar alignPeriod = require('../../plots/cartesian/align_period');\r\n\r\nvar histogram2dCalc = require('../histogram2d/calc');\r\nvar colorscaleCalc = require('../../components/colorscale/calc');\r\nvar convertColumnData = require('./convert_column_xyz');\r\nvar clean2dArray = require('./clean_2d_array');\r\nvar interp2d = require('./interp2d');\r\nvar findEmpties = require('./find_empties');\r\nvar makeBoundArray = require('./make_bound_array');\r\nvar BADNUM = require('../../constants/numerical').BADNUM;\r\n\r\nmodule.exports = function calc(gd, trace) {\r\n    // prepare the raw data\r\n    // run makeCalcdata on x and y even for heatmaps, in case of category mappings\r\n    var xa = Axes.getFromId(gd, trace.xaxis || 'x');\r\n    var ya = Axes.getFromId(gd, trace.yaxis || 'y');\r\n    var isContour = Registry.traceIs(trace, 'contour');\r\n    var isHist = Registry.traceIs(trace, 'histogram');\r\n    var isGL2D = Registry.traceIs(trace, 'gl2d');\r\n    var zsmooth = isContour ? 'best' : trace.zsmooth;\r\n    var x, x0, dx, origX;\r\n    var y, y0, dy, origY;\r\n    var z, i, binned;\r\n\r\n    // cancel minimum tick spacings (only applies to bars and boxes)\r\n    xa._minDtick = 0;\r\n    ya._minDtick = 0;\r\n\r\n    if(isHist) {\r\n        binned = histogram2dCalc(gd, trace);\r\n        origX = binned.orig_x;\r\n        x = binned.x;\r\n        x0 = binned.x0;\r\n        dx = binned.dx;\r\n\r\n        origY = binned.orig_y;\r\n        y = binned.y;\r\n        y0 = binned.y0;\r\n        dy = binned.dy;\r\n\r\n        z = binned.z;\r\n    } else {\r\n        var zIn = trace.z;\r\n        if(Lib.isArray1D(zIn)) {\r\n            convertColumnData(trace, xa, ya, 'x', 'y', ['z']);\r\n            x = trace._x;\r\n            y = trace._y;\r\n            zIn = trace._z;\r\n        } else {\r\n            origX = trace.x ? xa.makeCalcdata(trace, 'x') : [];\r\n            origY = trace.y ? ya.makeCalcdata(trace, 'y') : [];\r\n            x = alignPeriod(trace, xa, 'x', origX);\r\n            y = alignPeriod(trace, ya, 'y', origY);\r\n            trace._x = x;\r\n            trace._y = y;\r\n        }\r\n\r\n        x0 = trace.x0;\r\n        dx = trace.dx;\r\n        y0 = trace.y0;\r\n        dy = trace.dy;\r\n\r\n        z = clean2dArray(zIn, trace, xa, ya);\r\n    }\r\n\r\n    if(xa.rangebreaks || ya.rangebreaks) {\r\n        z = dropZonBreaks(x, y, z);\r\n\r\n        if(!isHist) {\r\n            x = skipBreaks(x);\r\n            y = skipBreaks(y);\r\n\r\n            trace._x = x;\r\n            trace._y = y;\r\n        }\r\n    }\r\n\r\n    if(!isHist && (isContour || trace.connectgaps)) {\r\n        trace._emptypoints = findEmpties(z);\r\n        interp2d(z, trace._emptypoints);\r\n    }\r\n\r\n    function noZsmooth(msg) {\r\n        zsmooth = trace._input.zsmooth = trace.zsmooth = false;\r\n        Lib.warn('cannot use zsmooth: \"fast\": ' + msg);\r\n    }\r\n\r\n    // check whether we really can smooth (ie all boxes are about the same size)\r\n    if(zsmooth === 'fast') {\r\n        if(xa.type === 'log' || ya.type === 'log') {\r\n            noZsmooth('log axis found');\r\n        } else if(!isHist) {\r\n            if(x.length) {\r\n                var avgdx = (x[x.length - 1] - x[0]) / (x.length - 1);\r\n                var maxErrX = Math.abs(avgdx / 100);\r\n                for(i = 0; i < x.length - 1; i++) {\r\n                    if(Math.abs(x[i + 1] - x[i] - avgdx) > maxErrX) {\r\n                        noZsmooth('x scale is not linear');\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if(y.length && zsmooth === 'fast') {\r\n                var avgdy = (y[y.length - 1] - y[0]) / (y.length - 1);\r\n                var maxErrY = Math.abs(avgdy / 100);\r\n                for(i = 0; i < y.length - 1; i++) {\r\n                    if(Math.abs(y[i + 1] - y[i] - avgdy) > maxErrY) {\r\n                        noZsmooth('y scale is not linear');\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // create arrays of brick boundaries, to be used by autorange and heatmap.plot\r\n    var xlen = Lib.maxRowLength(z);\r\n    var xIn = trace.xtype === 'scaled' ? '' : x;\r\n    var xArray = makeBoundArray(trace, xIn, x0, dx, xlen, xa);\r\n    var yIn = trace.ytype === 'scaled' ? '' : y;\r\n    var yArray = makeBoundArray(trace, yIn, y0, dy, z.length, ya);\r\n\r\n    // handled in gl2d convert step\r\n    if(!isGL2D) {\r\n        trace._extremes[xa._id] = Axes.findExtremes(xa, xArray);\r\n        trace._extremes[ya._id] = Axes.findExtremes(ya, yArray);\r\n    }\r\n\r\n    var cd0 = {\r\n        x: xArray,\r\n        y: yArray,\r\n        z: z,\r\n        text: trace._text || trace.text,\r\n        hovertext: trace._hovertext || trace.hovertext\r\n    };\r\n\r\n    if(trace.xperiodalignment && origX) {\r\n        cd0.orig_x = origX;\r\n    }\r\n    if(trace.yperiodalignment && origY) {\r\n        cd0.orig_y = origY;\r\n    }\r\n\r\n    if(xIn && xIn.length === xArray.length - 1) cd0.xCenter = xIn;\r\n    if(yIn && yIn.length === yArray.length - 1) cd0.yCenter = yIn;\r\n\r\n    if(isHist) {\r\n        cd0.xRanges = binned.xRanges;\r\n        cd0.yRanges = binned.yRanges;\r\n        cd0.pts = binned.pts;\r\n    }\r\n\r\n    if(!isContour) {\r\n        colorscaleCalc(gd, trace, {vals: z, cLetter: 'z'});\r\n    }\r\n\r\n    if(isContour && trace.contours && trace.contours.coloring === 'heatmap') {\r\n        var dummyTrace = {\r\n            type: trace.type === 'contour' ? 'heatmap' : 'histogram2d',\r\n            xcalendar: trace.xcalendar,\r\n            ycalendar: trace.ycalendar\r\n        };\r\n        cd0.xfill = makeBoundArray(dummyTrace, xIn, x0, dx, xlen, xa);\r\n        cd0.yfill = makeBoundArray(dummyTrace, yIn, y0, dy, z.length, ya);\r\n    }\r\n\r\n    return [cd0];\r\n};\r\n\r\nfunction skipBreaks(a) {\r\n    var b = [];\r\n    var len = a.length;\r\n    for(var i = 0; i < len; i++) {\r\n        var v = a[i];\r\n        if(v !== BADNUM) b.push(v);\r\n    }\r\n    return b;\r\n}\r\n\r\nfunction dropZonBreaks(x, y, z) {\r\n    var newZ = [];\r\n    var k = -1;\r\n    for(var i = 0; i < z.length; i++) {\r\n        if(y[i] === BADNUM) continue;\r\n        k++;\r\n        newZ[k] = [];\r\n        for(var j = 0; j < z[i].length; j++) {\r\n            if(x[j] === BADNUM) continue;\r\n\r\n            newZ[k].push(z[i][j]);\r\n        }\r\n    }\r\n    return newZ;\r\n}\r\n"]},"metadata":{},"sourceType":"script"}