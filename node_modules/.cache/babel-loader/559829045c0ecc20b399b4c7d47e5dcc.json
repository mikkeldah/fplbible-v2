{"ast":null,"code":"'use strict';\n\nvar BADNUM = require('../constants/numerical').BADNUM;\n/**\r\n * Convert calcTrace to GeoJSON 'MultiLineString' coordinate arrays\r\n *\r\n * @param {object} calcTrace\r\n *  gd.calcdata item.\r\n *  Note that calcTrace[i].lonlat is assumed to be defined\r\n *\r\n * @return {array}\r\n *  return line coords array (or array of arrays)\r\n *\r\n */\n\n\nexports.calcTraceToLineCoords = function (calcTrace) {\n  var trace = calcTrace[0].trace;\n  var connectgaps = trace.connectgaps;\n  var coords = [];\n  var lineString = [];\n\n  for (var i = 0; i < calcTrace.length; i++) {\n    var calcPt = calcTrace[i];\n    var lonlat = calcPt.lonlat;\n\n    if (lonlat[0] !== BADNUM) {\n      lineString.push(lonlat);\n    } else if (!connectgaps && lineString.length > 0) {\n      coords.push(lineString);\n      lineString = [];\n    }\n  }\n\n  if (lineString.length > 0) {\n    coords.push(lineString);\n  }\n\n  return coords;\n};\n/**\r\n * Make line ('LineString' or 'MultiLineString') GeoJSON\r\n *\r\n * @param {array} coords\r\n *  results form calcTraceToLineCoords\r\n * @return {object} out\r\n *  GeoJSON object\r\n *\r\n */\n\n\nexports.makeLine = function (coords) {\n  if (coords.length === 1) {\n    return {\n      type: 'LineString',\n      coordinates: coords[0]\n    };\n  } else {\n    return {\n      type: 'MultiLineString',\n      coordinates: coords\n    };\n  }\n};\n/**\r\n * Make polygon ('Polygon' or 'MultiPolygon') GeoJSON\r\n *\r\n * @param {array} coords\r\n *  results form calcTraceToLineCoords\r\n * @return {object} out\r\n *  GeoJSON object\r\n */\n\n\nexports.makePolygon = function (coords) {\n  if (coords.length === 1) {\n    return {\n      type: 'Polygon',\n      coordinates: coords\n    };\n  } else {\n    var _coords = new Array(coords.length);\n\n    for (var i = 0; i < coords.length; i++) {\n      _coords[i] = [coords[i]];\n    }\n\n    return {\n      type: 'MultiPolygon',\n      coordinates: _coords\n    };\n  }\n};\n/**\r\n * Make blank GeoJSON\r\n *\r\n * @return {object}\r\n *  Blank GeoJSON object\r\n *\r\n */\n\n\nexports.makeBlank = function () {\n  return {\n    type: 'Point',\n    coordinates: []\n  };\n};","map":{"version":3,"sources":["C:/Users/mikke/VSC/fantasy-django-react/fantasy-django/fantasy-react-app/node_modules/plotly.js/src/lib/geojson_utils.js"],"names":["BADNUM","require","exports","calcTraceToLineCoords","calcTrace","trace","connectgaps","coords","lineString","i","length","calcPt","lonlat","push","makeLine","type","coordinates","makePolygon","_coords","Array","makeBlank"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,wBAAD,CAAP,CAAkCD,MAA/C;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAE,OAAO,CAACC,qBAAR,GAAgC,UAASC,SAAT,EAAoB;AAChD,MAAIC,KAAK,GAAGD,SAAS,CAAC,CAAD,CAAT,CAAaC,KAAzB;AACA,MAAIC,WAAW,GAAGD,KAAK,CAACC,WAAxB;AAEA,MAAIC,MAAM,GAAG,EAAb;AACA,MAAIC,UAAU,GAAG,EAAjB;;AAEA,OAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGL,SAAS,CAACM,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACtC,QAAIE,MAAM,GAAGP,SAAS,CAACK,CAAD,CAAtB;AACA,QAAIG,MAAM,GAAGD,MAAM,CAACC,MAApB;;AAEA,QAAGA,MAAM,CAAC,CAAD,CAAN,KAAcZ,MAAjB,EAAyB;AACrBQ,MAAAA,UAAU,CAACK,IAAX,CAAgBD,MAAhB;AACH,KAFD,MAEO,IAAG,CAACN,WAAD,IAAgBE,UAAU,CAACE,MAAX,GAAoB,CAAvC,EAA0C;AAC7CH,MAAAA,MAAM,CAACM,IAAP,CAAYL,UAAZ;AACAA,MAAAA,UAAU,GAAG,EAAb;AACH;AACJ;;AAED,MAAGA,UAAU,CAACE,MAAX,GAAoB,CAAvB,EAA0B;AACtBH,IAAAA,MAAM,CAACM,IAAP,CAAYL,UAAZ;AACH;;AAED,SAAOD,MAAP;AACH,CAxBD;AA2BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAL,OAAO,CAACY,QAAR,GAAmB,UAASP,MAAT,EAAiB;AAChC,MAAGA,MAAM,CAACG,MAAP,KAAkB,CAArB,EAAwB;AACpB,WAAO;AACHK,MAAAA,IAAI,EAAE,YADH;AAEHC,MAAAA,WAAW,EAAET,MAAM,CAAC,CAAD;AAFhB,KAAP;AAIH,GALD,MAKO;AACH,WAAO;AACHQ,MAAAA,IAAI,EAAE,iBADH;AAEHC,MAAAA,WAAW,EAAET;AAFV,KAAP;AAIH;AACJ,CAZD;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAL,OAAO,CAACe,WAAR,GAAsB,UAASV,MAAT,EAAiB;AACnC,MAAGA,MAAM,CAACG,MAAP,KAAkB,CAArB,EAAwB;AACpB,WAAO;AACHK,MAAAA,IAAI,EAAE,SADH;AAEHC,MAAAA,WAAW,EAAET;AAFV,KAAP;AAIH,GALD,MAKO;AACH,QAAIW,OAAO,GAAG,IAAIC,KAAJ,CAAUZ,MAAM,CAACG,MAAjB,CAAd;;AAEA,SAAI,IAAID,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGF,MAAM,CAACG,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACnCS,MAAAA,OAAO,CAACT,CAAD,CAAP,GAAa,CAACF,MAAM,CAACE,CAAD,CAAP,CAAb;AACH;;AAED,WAAO;AACHM,MAAAA,IAAI,EAAE,cADH;AAEHC,MAAAA,WAAW,EAAEE;AAFV,KAAP;AAIH;AACJ,CAlBD;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAhB,OAAO,CAACkB,SAAR,GAAoB,YAAW;AAC3B,SAAO;AACHL,IAAAA,IAAI,EAAE,OADH;AAEHC,IAAAA,WAAW,EAAE;AAFV,GAAP;AAIH,CALD","sourcesContent":["'use strict';\r\n\r\nvar BADNUM = require('../constants/numerical').BADNUM;\r\n\r\n/**\r\n * Convert calcTrace to GeoJSON 'MultiLineString' coordinate arrays\r\n *\r\n * @param {object} calcTrace\r\n *  gd.calcdata item.\r\n *  Note that calcTrace[i].lonlat is assumed to be defined\r\n *\r\n * @return {array}\r\n *  return line coords array (or array of arrays)\r\n *\r\n */\r\nexports.calcTraceToLineCoords = function(calcTrace) {\r\n    var trace = calcTrace[0].trace;\r\n    var connectgaps = trace.connectgaps;\r\n\r\n    var coords = [];\r\n    var lineString = [];\r\n\r\n    for(var i = 0; i < calcTrace.length; i++) {\r\n        var calcPt = calcTrace[i];\r\n        var lonlat = calcPt.lonlat;\r\n\r\n        if(lonlat[0] !== BADNUM) {\r\n            lineString.push(lonlat);\r\n        } else if(!connectgaps && lineString.length > 0) {\r\n            coords.push(lineString);\r\n            lineString = [];\r\n        }\r\n    }\r\n\r\n    if(lineString.length > 0) {\r\n        coords.push(lineString);\r\n    }\r\n\r\n    return coords;\r\n};\r\n\r\n\r\n/**\r\n * Make line ('LineString' or 'MultiLineString') GeoJSON\r\n *\r\n * @param {array} coords\r\n *  results form calcTraceToLineCoords\r\n * @return {object} out\r\n *  GeoJSON object\r\n *\r\n */\r\nexports.makeLine = function(coords) {\r\n    if(coords.length === 1) {\r\n        return {\r\n            type: 'LineString',\r\n            coordinates: coords[0]\r\n        };\r\n    } else {\r\n        return {\r\n            type: 'MultiLineString',\r\n            coordinates: coords\r\n        };\r\n    }\r\n};\r\n\r\n/**\r\n * Make polygon ('Polygon' or 'MultiPolygon') GeoJSON\r\n *\r\n * @param {array} coords\r\n *  results form calcTraceToLineCoords\r\n * @return {object} out\r\n *  GeoJSON object\r\n */\r\nexports.makePolygon = function(coords) {\r\n    if(coords.length === 1) {\r\n        return {\r\n            type: 'Polygon',\r\n            coordinates: coords\r\n        };\r\n    } else {\r\n        var _coords = new Array(coords.length);\r\n\r\n        for(var i = 0; i < coords.length; i++) {\r\n            _coords[i] = [coords[i]];\r\n        }\r\n\r\n        return {\r\n            type: 'MultiPolygon',\r\n            coordinates: _coords\r\n        };\r\n    }\r\n};\r\n\r\n/**\r\n * Make blank GeoJSON\r\n *\r\n * @return {object}\r\n *  Blank GeoJSON object\r\n *\r\n */\r\nexports.makeBlank = function() {\r\n    return {\r\n        type: 'Point',\r\n        coordinates: []\r\n    };\r\n};\r\n"]},"metadata":{},"sourceType":"script"}