{"ast":null,"code":"'use strict';\n\nmodule.exports = convexHullnD;\n\nvar ich = require('incremental-convex-hull');\n\nvar aff = require('affine-hull');\n\nfunction permute(points, front) {\n  var n = points.length;\n  var npoints = new Array(n);\n\n  for (var i = 0; i < front.length; ++i) {\n    npoints[i] = points[front[i]];\n  }\n\n  var ptr = front.length;\n\n  for (var i = 0; i < n; ++i) {\n    if (front.indexOf(i) < 0) {\n      npoints[ptr++] = points[i];\n    }\n  }\n\n  return npoints;\n}\n\nfunction invPermute(cells, front) {\n  var nc = cells.length;\n  var nf = front.length;\n\n  for (var i = 0; i < nc; ++i) {\n    var c = cells[i];\n\n    for (var j = 0; j < c.length; ++j) {\n      var x = c[j];\n\n      if (x < nf) {\n        c[j] = front[x];\n      } else {\n        x = x - nf;\n\n        for (var k = 0; k < nf; ++k) {\n          if (x >= front[k]) {\n            x += 1;\n          }\n        }\n\n        c[j] = x;\n      }\n    }\n  }\n\n  return cells;\n}\n\nfunction convexHullnD(points, d) {\n  try {\n    return ich(points, true);\n  } catch (e) {\n    //If point set is degenerate, try to find a basis and rerun it\n    var ah = aff(points);\n\n    if (ah.length <= d) {\n      //No basis, no try\n      return [];\n    }\n\n    var npoints = permute(points, ah);\n    var nhull = ich(npoints, true);\n    return invPermute(nhull, ah);\n  }\n}","map":{"version":3,"sources":["C:/Users/mikke/VSC/fantasy-django-react/fantasy-django/fantasy-react-app/node_modules/convex-hull/lib/chnd.js"],"names":["module","exports","convexHullnD","ich","require","aff","permute","points","front","n","length","npoints","Array","i","ptr","indexOf","invPermute","cells","nc","nf","c","j","x","k","d","e","ah","nhull"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,YAAjB;;AAEA,IAAIC,GAAG,GAAGC,OAAO,CAAC,yBAAD,CAAjB;;AACA,IAAIC,GAAG,GAAGD,OAAO,CAAC,aAAD,CAAjB;;AAEA,SAASE,OAAT,CAAiBC,MAAjB,EAAyBC,KAAzB,EAAgC;AAC9B,MAAIC,CAAC,GAAGF,MAAM,CAACG,MAAf;AACA,MAAIC,OAAO,GAAG,IAAIC,KAAJ,CAAUH,CAAV,CAAd;;AACA,OAAI,IAAII,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACL,KAAK,CAACE,MAArB,EAA6B,EAAEG,CAA/B,EAAkC;AAChCF,IAAAA,OAAO,CAACE,CAAD,CAAP,GAAaN,MAAM,CAACC,KAAK,CAACK,CAAD,CAAN,CAAnB;AACD;;AACD,MAAIC,GAAG,GAAGN,KAAK,CAACE,MAAhB;;AACA,OAAI,IAAIG,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACJ,CAAf,EAAkB,EAAEI,CAApB,EAAuB;AACrB,QAAGL,KAAK,CAACO,OAAN,CAAcF,CAAd,IAAmB,CAAtB,EAAyB;AACvBF,MAAAA,OAAO,CAACG,GAAG,EAAJ,CAAP,GAAiBP,MAAM,CAACM,CAAD,CAAvB;AACD;AACF;;AACD,SAAOF,OAAP;AACD;;AAED,SAASK,UAAT,CAAoBC,KAApB,EAA2BT,KAA3B,EAAkC;AAChC,MAAIU,EAAE,GAAGD,KAAK,CAACP,MAAf;AACA,MAAIS,EAAE,GAAGX,KAAK,CAACE,MAAf;;AACA,OAAI,IAAIG,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACK,EAAf,EAAmB,EAAEL,CAArB,EAAwB;AACtB,QAAIO,CAAC,GAAGH,KAAK,CAACJ,CAAD,CAAb;;AACA,SAAI,IAAIQ,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACD,CAAC,CAACV,MAAjB,EAAyB,EAAEW,CAA3B,EAA8B;AAC5B,UAAIC,CAAC,GAAGF,CAAC,CAACC,CAAD,CAAT;;AACA,UAAGC,CAAC,GAAGH,EAAP,EAAW;AACTC,QAAAA,CAAC,CAACC,CAAD,CAAD,GAAOb,KAAK,CAACc,CAAD,CAAZ;AACD,OAFD,MAEO;AACLA,QAAAA,CAAC,GAAGA,CAAC,GAAGH,EAAR;;AACA,aAAI,IAAII,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACJ,EAAf,EAAmB,EAAEI,CAArB,EAAwB;AACtB,cAAGD,CAAC,IAAId,KAAK,CAACe,CAAD,CAAb,EAAkB;AAChBD,YAAAA,CAAC,IAAI,CAAL;AACD;AACF;;AACDF,QAAAA,CAAC,CAACC,CAAD,CAAD,GAAOC,CAAP;AACD;AACF;AACF;;AACD,SAAOL,KAAP;AACD;;AAED,SAASf,YAAT,CAAsBK,MAAtB,EAA8BiB,CAA9B,EAAiC;AAC/B,MAAI;AACF,WAAOrB,GAAG,CAACI,MAAD,EAAS,IAAT,CAAV;AACD,GAFD,CAEE,OAAMkB,CAAN,EAAS;AACT;AACA,QAAIC,EAAE,GAAGrB,GAAG,CAACE,MAAD,CAAZ;;AACA,QAAGmB,EAAE,CAAChB,MAAH,IAAac,CAAhB,EAAmB;AACjB;AACA,aAAO,EAAP;AACD;;AACD,QAAIb,OAAO,GAAGL,OAAO,CAACC,MAAD,EAASmB,EAAT,CAArB;AACA,QAAIC,KAAK,GAAKxB,GAAG,CAACQ,OAAD,EAAU,IAAV,CAAjB;AACA,WAAOK,UAAU,CAACW,KAAD,EAAQD,EAAR,CAAjB;AACD;AACF","sourcesContent":["'use strict'\r\n\r\nmodule.exports = convexHullnD\r\n\r\nvar ich = require('incremental-convex-hull')\r\nvar aff = require('affine-hull')\r\n\r\nfunction permute(points, front) {\r\n  var n = points.length\r\n  var npoints = new Array(n)\r\n  for(var i=0; i<front.length; ++i) {\r\n    npoints[i] = points[front[i]]\r\n  }\r\n  var ptr = front.length\r\n  for(var i=0; i<n; ++i) {\r\n    if(front.indexOf(i) < 0) {\r\n      npoints[ptr++] = points[i]\r\n    }\r\n  }\r\n  return npoints\r\n}\r\n\r\nfunction invPermute(cells, front) {\r\n  var nc = cells.length\r\n  var nf = front.length\r\n  for(var i=0; i<nc; ++i) {\r\n    var c = cells[i]\r\n    for(var j=0; j<c.length; ++j) {\r\n      var x = c[j]\r\n      if(x < nf) {\r\n        c[j] = front[x]\r\n      } else {\r\n        x = x - nf\r\n        for(var k=0; k<nf; ++k) {\r\n          if(x >= front[k]) {\r\n            x += 1\r\n          }\r\n        }\r\n        c[j] = x\r\n      }\r\n    }\r\n  }\r\n  return cells\r\n}\r\n\r\nfunction convexHullnD(points, d) {\r\n  try {\r\n    return ich(points, true)\r\n  } catch(e) {\r\n    //If point set is degenerate, try to find a basis and rerun it\r\n    var ah = aff(points)\r\n    if(ah.length <= d) {\r\n      //No basis, no try\r\n      return []\r\n    }\r\n    var npoints = permute(points, ah)\r\n    var nhull   = ich(npoints, true)\r\n    return invPermute(nhull, ah)\r\n  }\r\n}"]},"metadata":{},"sourceType":"script"}