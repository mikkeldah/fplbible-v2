{"ast":null,"code":"'use strict';\n\nvar Lib = require('../lib');\n\nvar toImage = require('../plot_api/to_image');\n\nvar fileSaver = require('./filesaver');\n\nvar helpers = require('./helpers');\n/**\r\n * Plotly.downloadImage\r\n *\r\n * @param {object | string | HTML div} gd\r\n *   can either be a data/layout/config object\r\n *   or an existing graph <div>\r\n *   or an id to an existing graph <div>\r\n * @param {object} opts (see Plotly.toImage in ../plot_api/to_image)\r\n * @return {promise}\r\n */\n\n\nfunction downloadImage(gd, opts) {\n  var _gd;\n\n  if (!Lib.isPlainObject(gd)) _gd = Lib.getGraphDiv(gd);\n  opts = opts || {};\n  opts.format = opts.format || 'png';\n  opts.width = opts.width || null;\n  opts.height = opts.height || null;\n  opts.imageDataOnly = true;\n  return new Promise(function (resolve, reject) {\n    if (_gd && _gd._snapshotInProgress) {\n      reject(new Error('Snapshotting already in progress.'));\n    } // see comments within svgtoimg for additional\n    //   discussion of problems with IE\n    //   can now draw to canvas, but CORS tainted canvas\n    //   does not allow toDataURL\n    //   svg format will work though\n\n\n    if (Lib.isIE() && opts.format !== 'svg') {\n      reject(new Error(helpers.MSG_IE_BAD_FORMAT));\n    }\n\n    if (_gd) _gd._snapshotInProgress = true;\n    var promise = toImage(gd, opts);\n    var filename = opts.filename || gd.fn || 'newplot';\n    filename += '.' + opts.format.replace('-', '.');\n    promise.then(function (result) {\n      if (_gd) _gd._snapshotInProgress = false;\n      return fileSaver(result, filename, opts.format);\n    }).then(function (name) {\n      resolve(name);\n    }).catch(function (err) {\n      if (_gd) _gd._snapshotInProgress = false;\n      reject(err);\n    });\n  });\n}\n\nmodule.exports = downloadImage;","map":{"version":3,"sources":["C:/Users/mikke/VSC/fantasy-django-react/fantasy-django/fantasy-react-app/node_modules/plotly.js/src/snapshot/download.js"],"names":["Lib","require","toImage","fileSaver","helpers","downloadImage","gd","opts","_gd","isPlainObject","getGraphDiv","format","width","height","imageDataOnly","Promise","resolve","reject","_snapshotInProgress","Error","isIE","MSG_IE_BAD_FORMAT","promise","filename","fn","replace","then","result","name","catch","err","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,GAAG,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AAEA,IAAIC,OAAO,GAAGD,OAAO,CAAC,sBAAD,CAArB;;AAEA,IAAIE,SAAS,GAAGF,OAAO,CAAC,aAAD,CAAvB;;AACA,IAAIG,OAAO,GAAGH,OAAO,CAAC,WAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASI,aAAT,CAAuBC,EAAvB,EAA2BC,IAA3B,EAAiC;AAC7B,MAAIC,GAAJ;;AACA,MAAG,CAACR,GAAG,CAACS,aAAJ,CAAkBH,EAAlB,CAAJ,EAA2BE,GAAG,GAAGR,GAAG,CAACU,WAAJ,CAAgBJ,EAAhB,CAAN;AAE3BC,EAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;AACAA,EAAAA,IAAI,CAACI,MAAL,GAAcJ,IAAI,CAACI,MAAL,IAAe,KAA7B;AACAJ,EAAAA,IAAI,CAACK,KAAL,GAAaL,IAAI,CAACK,KAAL,IAAc,IAA3B;AACAL,EAAAA,IAAI,CAACM,MAAL,GAAcN,IAAI,CAACM,MAAL,IAAe,IAA7B;AACAN,EAAAA,IAAI,CAACO,aAAL,GAAqB,IAArB;AAEA,SAAO,IAAIC,OAAJ,CAAY,UAASC,OAAT,EAAkBC,MAAlB,EAA0B;AACzC,QAAGT,GAAG,IAAIA,GAAG,CAACU,mBAAd,EAAmC;AAC/BD,MAAAA,MAAM,CAAC,IAAIE,KAAJ,CAAU,mCAAV,CAAD,CAAN;AACH,KAHwC,CAKzC;AACA;AACA;AACA;AACA;;;AACA,QAAGnB,GAAG,CAACoB,IAAJ,MAAcb,IAAI,CAACI,MAAL,KAAgB,KAAjC,EAAwC;AACpCM,MAAAA,MAAM,CAAC,IAAIE,KAAJ,CAAUf,OAAO,CAACiB,iBAAlB,CAAD,CAAN;AACH;;AAED,QAAGb,GAAH,EAAQA,GAAG,CAACU,mBAAJ,GAA0B,IAA1B;AACR,QAAII,OAAO,GAAGpB,OAAO,CAACI,EAAD,EAAKC,IAAL,CAArB;AAEA,QAAIgB,QAAQ,GAAGhB,IAAI,CAACgB,QAAL,IAAiBjB,EAAE,CAACkB,EAApB,IAA0B,SAAzC;AACAD,IAAAA,QAAQ,IAAI,MAAMhB,IAAI,CAACI,MAAL,CAAYc,OAAZ,CAAoB,GAApB,EAAyB,GAAzB,CAAlB;AAEAH,IAAAA,OAAO,CAACI,IAAR,CAAa,UAASC,MAAT,EAAiB;AAC1B,UAAGnB,GAAH,EAAQA,GAAG,CAACU,mBAAJ,GAA0B,KAA1B;AACR,aAAOf,SAAS,CAACwB,MAAD,EAASJ,QAAT,EAAmBhB,IAAI,CAACI,MAAxB,CAAhB;AACH,KAHD,EAGGe,IAHH,CAGQ,UAASE,IAAT,EAAe;AACnBZ,MAAAA,OAAO,CAACY,IAAD,CAAP;AACH,KALD,EAKGC,KALH,CAKS,UAASC,GAAT,EAAc;AACnB,UAAGtB,GAAH,EAAQA,GAAG,CAACU,mBAAJ,GAA0B,KAA1B;AACRD,MAAAA,MAAM,CAACa,GAAD,CAAN;AACH,KARD;AASH,GA7BM,CAAP;AA8BH;;AAEDC,MAAM,CAACC,OAAP,GAAiB3B,aAAjB","sourcesContent":["'use strict';\r\n\r\nvar Lib = require('../lib');\r\n\r\nvar toImage = require('../plot_api/to_image');\r\n\r\nvar fileSaver = require('./filesaver');\r\nvar helpers = require('./helpers');\r\n\r\n/**\r\n * Plotly.downloadImage\r\n *\r\n * @param {object | string | HTML div} gd\r\n *   can either be a data/layout/config object\r\n *   or an existing graph <div>\r\n *   or an id to an existing graph <div>\r\n * @param {object} opts (see Plotly.toImage in ../plot_api/to_image)\r\n * @return {promise}\r\n */\r\nfunction downloadImage(gd, opts) {\r\n    var _gd;\r\n    if(!Lib.isPlainObject(gd)) _gd = Lib.getGraphDiv(gd);\r\n\r\n    opts = opts || {};\r\n    opts.format = opts.format || 'png';\r\n    opts.width = opts.width || null;\r\n    opts.height = opts.height || null;\r\n    opts.imageDataOnly = true;\r\n\r\n    return new Promise(function(resolve, reject) {\r\n        if(_gd && _gd._snapshotInProgress) {\r\n            reject(new Error('Snapshotting already in progress.'));\r\n        }\r\n\r\n        // see comments within svgtoimg for additional\r\n        //   discussion of problems with IE\r\n        //   can now draw to canvas, but CORS tainted canvas\r\n        //   does not allow toDataURL\r\n        //   svg format will work though\r\n        if(Lib.isIE() && opts.format !== 'svg') {\r\n            reject(new Error(helpers.MSG_IE_BAD_FORMAT));\r\n        }\r\n\r\n        if(_gd) _gd._snapshotInProgress = true;\r\n        var promise = toImage(gd, opts);\r\n\r\n        var filename = opts.filename || gd.fn || 'newplot';\r\n        filename += '.' + opts.format.replace('-', '.');\r\n\r\n        promise.then(function(result) {\r\n            if(_gd) _gd._snapshotInProgress = false;\r\n            return fileSaver(result, filename, opts.format);\r\n        }).then(function(name) {\r\n            resolve(name);\r\n        }).catch(function(err) {\r\n            if(_gd) _gd._snapshotInProgress = false;\r\n            reject(err);\r\n        });\r\n    });\r\n}\r\n\r\nmodule.exports = downloadImage;\r\n"]},"metadata":{},"sourceType":"script"}