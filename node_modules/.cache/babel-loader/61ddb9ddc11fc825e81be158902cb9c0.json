{"ast":null,"code":"'use strict';\n\nvar isNumeric = require('fast-isnumeric');\n\nvar Lib = require('../../lib');\n\nmodule.exports = function handlePositionDefaults(containerIn, containerOut, coerce, options) {\n  var counterAxes = options.counterAxes || [];\n  var overlayableAxes = options.overlayableAxes || [];\n  var letter = options.letter;\n  var grid = options.grid;\n  var dfltAnchor, dfltDomain, dfltSide, dfltPosition;\n\n  if (grid) {\n    dfltDomain = grid._domains[letter][grid._axisMap[containerOut._id]];\n    dfltAnchor = grid._anchors[containerOut._id];\n\n    if (dfltDomain) {\n      dfltSide = grid[letter + 'side'].split(' ')[0];\n      dfltPosition = grid.domain[letter][dfltSide === 'right' || dfltSide === 'top' ? 1 : 0];\n    }\n  } // Even if there's a grid, this axis may not be in it - fall back on non-grid defaults\n\n\n  dfltDomain = dfltDomain || [0, 1];\n  dfltAnchor = dfltAnchor || (isNumeric(containerIn.position) ? 'free' : counterAxes[0] || 'free');\n  dfltSide = dfltSide || (letter === 'x' ? 'bottom' : 'left');\n  dfltPosition = dfltPosition || 0;\n  var anchor = Lib.coerce(containerIn, containerOut, {\n    anchor: {\n      valType: 'enumerated',\n      values: ['free'].concat(counterAxes),\n      dflt: dfltAnchor\n    }\n  }, 'anchor');\n  if (anchor === 'free') coerce('position', dfltPosition);\n  Lib.coerce(containerIn, containerOut, {\n    side: {\n      valType: 'enumerated',\n      values: letter === 'x' ? ['bottom', 'top'] : ['left', 'right'],\n      dflt: dfltSide\n    }\n  }, 'side');\n  var overlaying = false;\n\n  if (overlayableAxes.length) {\n    overlaying = Lib.coerce(containerIn, containerOut, {\n      overlaying: {\n        valType: 'enumerated',\n        values: [false].concat(overlayableAxes),\n        dflt: false\n      }\n    }, 'overlaying');\n  }\n\n  if (!overlaying) {\n    // TODO: right now I'm copying this domain over to overlaying axes\n    // in ax.setscale()... but this means we still need (imperfect) logic\n    // in the axes popover to hide domain for the overlaying axis.\n    // perhaps I should make a private version _domain that all axes get???\n    var domain = coerce('domain', dfltDomain); // according to https://www.npmjs.com/package/canvas-size\n    // the minimum value of max canvas width across browsers and devices is 4096\n    // which applied in the calculation below:\n\n    if (domain[0] > domain[1] - 1 / 4096) containerOut.domain = dfltDomain;\n    Lib.noneOrAll(containerIn.domain, containerOut.domain, dfltDomain);\n  }\n\n  coerce('layer');\n  return containerOut;\n};","map":{"version":3,"sources":["C:/Users/mikke/VSC/fantasy-django-react/fantasy-django/fantasy-react-app/node_modules/plotly.js/src/plots/cartesian/position_defaults.js"],"names":["isNumeric","require","Lib","module","exports","handlePositionDefaults","containerIn","containerOut","coerce","options","counterAxes","overlayableAxes","letter","grid","dfltAnchor","dfltDomain","dfltSide","dfltPosition","_domains","_axisMap","_id","_anchors","split","domain","position","anchor","valType","values","concat","dflt","side","overlaying","length","noneOrAll"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nvar isNumeric = require('fast-isnumeric');\r\n\r\nvar Lib = require('../../lib');\r\n\r\n\r\nmodule.exports = function handlePositionDefaults(containerIn, containerOut, coerce, options) {\r\n    var counterAxes = options.counterAxes || [];\r\n    var overlayableAxes = options.overlayableAxes || [];\r\n    var letter = options.letter;\r\n    var grid = options.grid;\r\n\r\n    var dfltAnchor, dfltDomain, dfltSide, dfltPosition;\r\n\r\n    if(grid) {\r\n        dfltDomain = grid._domains[letter][grid._axisMap[containerOut._id]];\r\n        dfltAnchor = grid._anchors[containerOut._id];\r\n        if(dfltDomain) {\r\n            dfltSide = grid[letter + 'side'].split(' ')[0];\r\n            dfltPosition = grid.domain[letter][dfltSide === 'right' || dfltSide === 'top' ? 1 : 0];\r\n        }\r\n    }\r\n\r\n    // Even if there's a grid, this axis may not be in it - fall back on non-grid defaults\r\n    dfltDomain = dfltDomain || [0, 1];\r\n    dfltAnchor = dfltAnchor || (isNumeric(containerIn.position) ? 'free' : (counterAxes[0] || 'free'));\r\n    dfltSide = dfltSide || (letter === 'x' ? 'bottom' : 'left');\r\n    dfltPosition = dfltPosition || 0;\r\n\r\n    var anchor = Lib.coerce(containerIn, containerOut, {\r\n        anchor: {\r\n            valType: 'enumerated',\r\n            values: ['free'].concat(counterAxes),\r\n            dflt: dfltAnchor\r\n        }\r\n    }, 'anchor');\r\n\r\n    if(anchor === 'free') coerce('position', dfltPosition);\r\n\r\n    Lib.coerce(containerIn, containerOut, {\r\n        side: {\r\n            valType: 'enumerated',\r\n            values: letter === 'x' ? ['bottom', 'top'] : ['left', 'right'],\r\n            dflt: dfltSide\r\n        }\r\n    }, 'side');\r\n\r\n    var overlaying = false;\r\n    if(overlayableAxes.length) {\r\n        overlaying = Lib.coerce(containerIn, containerOut, {\r\n            overlaying: {\r\n                valType: 'enumerated',\r\n                values: [false].concat(overlayableAxes),\r\n                dflt: false\r\n            }\r\n        }, 'overlaying');\r\n    }\r\n\r\n    if(!overlaying) {\r\n        // TODO: right now I'm copying this domain over to overlaying axes\r\n        // in ax.setscale()... but this means we still need (imperfect) logic\r\n        // in the axes popover to hide domain for the overlaying axis.\r\n        // perhaps I should make a private version _domain that all axes get???\r\n        var domain = coerce('domain', dfltDomain);\r\n\r\n        // according to https://www.npmjs.com/package/canvas-size\r\n        // the minimum value of max canvas width across browsers and devices is 4096\r\n        // which applied in the calculation below:\r\n        if(domain[0] > domain[1] - 1 / 4096) containerOut.domain = dfltDomain;\r\n        Lib.noneOrAll(containerIn.domain, containerOut.domain, dfltDomain);\r\n    }\r\n\r\n    coerce('layer');\r\n\r\n    return containerOut;\r\n};\r\n"]},"metadata":{},"sourceType":"script"}