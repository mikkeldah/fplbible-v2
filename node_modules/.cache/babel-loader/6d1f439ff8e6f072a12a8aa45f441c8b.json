{"ast":null,"code":"// Copyright (C) 2011 Google Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\r\n * @fileoverview Install a leaky WeakMap emulation on platforms that\r\n * don't provide a built-in one.\r\n *\r\n * <p>Assumes that an ES5 platform where, if {@code WeakMap} is\r\n * already present, then it conforms to the anticipated ES6\r\n * specification. To run this file on an ES5 or almost ES5\r\n * implementation where the {@code WeakMap} specification does not\r\n * quite conform, run <code>repairES5.js</code> first.\r\n *\r\n * <p>Even though WeakMapModule is not global, the linter thinks it\r\n * is, which is why it is in the overrides list below.\r\n *\r\n * <p>NOTE: Before using this WeakMap emulation in a non-SES\r\n * environment, see the note below about hiddenRecord.\r\n *\r\n * @author Mark S. Miller\r\n * @requires crypto, ArrayBuffer, Uint8Array, navigator, console\r\n * @overrides WeakMap, ses, Proxy\r\n * @overrides WeakMapModule\r\n */\n\n/**\r\n * This {@code WeakMap} emulation is observably equivalent to the\r\n * ES-Harmony WeakMap, but with leakier garbage collection properties.\r\n *\r\n * <p>As with true WeakMaps, in this emulation, a key does not\r\n * retain maps indexed by that key and (crucially) a map does not\r\n * retain the keys it indexes. A map by itself also does not retain\r\n * the values associated with that map.\r\n *\r\n * <p>However, the values associated with a key in some map are\r\n * retained so long as that key is retained and those associations are\r\n * not overridden. For example, when used to support membranes, all\r\n * values exported from a given membrane will live for the lifetime\r\n * they would have had in the absence of an interposed membrane. Even\r\n * when the membrane is revoked, all objects that would have been\r\n * reachable in the absence of revocation will still be reachable, as\r\n * far as the GC can tell, even though they will no longer be relevant\r\n * to ongoing computation.\r\n *\r\n * <p>The API implemented here is approximately the API as implemented\r\n * in FF6.0a1 and agreed to by MarkM, Andreas Gal, and Dave Herman,\r\n * rather than the offially approved proposal page. TODO(erights):\r\n * upgrade the ecmascript WeakMap proposal page to explain this API\r\n * change and present to EcmaScript committee for their approval.\r\n *\r\n * <p>The first difference between the emulation here and that in\r\n * FF6.0a1 is the presence of non enumerable {@code get___, has___,\r\n * set___, and delete___} methods on WeakMap instances to represent\r\n * what would be the hidden internal properties of a primitive\r\n * implementation. Whereas the FF6.0a1 WeakMap.prototype methods\r\n * require their {@code this} to be a genuine WeakMap instance (i.e.,\r\n * an object of {@code [[Class]]} \"WeakMap}), since there is nothing\r\n * unforgeable about the pseudo-internal method names used here,\r\n * nothing prevents these emulated prototype methods from being\r\n * applied to non-WeakMaps with pseudo-internal methods of the same\r\n * names.\r\n *\r\n * <p>Another difference is that our emulated {@code\r\n * WeakMap.prototype} is not itself a WeakMap. A problem with the\r\n * current FF6.0a1 API is that WeakMap.prototype is itself a WeakMap\r\n * providing ambient mutability and an ambient communications\r\n * channel. Thus, if a WeakMap is already present and has this\r\n * problem, repairES5.js wraps it in a safe wrappper in order to\r\n * prevent access to this channel. (See\r\n * PATCH_MUTABLE_FROZEN_WEAKMAP_PROTO in repairES5.js).\r\n */\n\n/**\r\n * If this is a full <a href=\r\n * \"http://code.google.com/p/es-lab/wiki/SecureableES5\"\r\n * >secureable ES5</a> platform and the ES-Harmony {@code WeakMap} is\r\n * absent, install an approximate emulation.\r\n *\r\n * <p>If WeakMap is present but cannot store some objects, use our approximate\r\n * emulation as a wrapper.\r\n *\r\n * <p>If this is almost a secureable ES5 platform, then WeakMap.js\r\n * should be run after repairES5.js.\r\n *\r\n * <p>See {@code WeakMap} for documentation of the garbage collection\r\n * properties of this WeakMap emulation.\r\n */\n(function WeakMapModule() {\n  \"use strict\";\n\n  if (typeof ses !== 'undefined' && ses.ok && !ses.ok()) {\n    // already too broken, so give up\n    return;\n  }\n  /**\r\n   * In some cases (current Firefox), we must make a choice betweeen a\r\n   * WeakMap which is capable of using all varieties of host objects as\r\n   * keys and one which is capable of safely using proxies as keys. See\r\n   * comments below about HostWeakMap and DoubleWeakMap for details.\r\n   *\r\n   * This function (which is a global, not exposed to guests) marks a\r\n   * WeakMap as permitted to do what is necessary to index all host\r\n   * objects, at the cost of making it unsafe for proxies.\r\n   *\r\n   * Do not apply this function to anything which is not a genuine\r\n   * fresh WeakMap.\r\n   */\n\n\n  function weakMapPermitHostObjects(map) {\n    // identity of function used as a secret -- good enough and cheap\n    if (map.permitHostObjects___) {\n      map.permitHostObjects___(weakMapPermitHostObjects);\n    }\n  }\n\n  if (typeof ses !== 'undefined') {\n    ses.weakMapPermitHostObjects = weakMapPermitHostObjects;\n  } // IE 11 has no Proxy but has a broken WeakMap such that we need to patch\n  // it using DoubleWeakMap; this flag tells DoubleWeakMap so.\n\n\n  var doubleWeakMapCheckSilentFailure = false; // Check if there is already a good-enough WeakMap implementation, and if so\n  // exit without replacing it.\n\n  if (typeof WeakMap === 'function') {\n    var HostWeakMap = WeakMap; // There is a WeakMap -- is it good enough?\n\n    if (typeof navigator !== 'undefined' && /Firefox/.test(navigator.userAgent)) {// We're now *assuming not*, because as of this writing (2013-05-06)\n      // Firefox's WeakMaps have a miscellany of objects they won't accept, and\n      // we don't want to make an exhaustive list, and testing for just one\n      // will be a problem if that one is fixed alone (as they did for Event).\n      // If there is a platform that we *can* reliably test on, here's how to\n      // do it:\n      //  var problematic = ... ;\n      //  var testHostMap = new HostWeakMap();\n      //  try {\n      //    testHostMap.set(problematic, 1);  // Firefox 20 will throw here\n      //    if (testHostMap.get(problematic) === 1) {\n      //      return;\n      //    }\n      //  } catch (e) {}\n    } else {\n      // IE 11 bug: WeakMaps silently fail to store frozen objects.\n      var testMap = new HostWeakMap();\n      var testObject = Object.freeze({});\n      testMap.set(testObject, 1);\n\n      if (testMap.get(testObject) !== 1) {\n        doubleWeakMapCheckSilentFailure = true; // Fall through to installing our WeakMap.\n      } else {\n        module.exports = WeakMap;\n        return;\n      }\n    }\n  }\n\n  var hop = Object.prototype.hasOwnProperty;\n  var gopn = Object.getOwnPropertyNames;\n  var defProp = Object.defineProperty;\n  var isExtensible = Object.isExtensible;\n  /**\r\n   * Security depends on HIDDEN_NAME being both <i>unguessable</i> and\r\n   * <i>undiscoverable</i> by untrusted code.\r\n   *\r\n   * <p>Given the known weaknesses of Math.random() on existing\r\n   * browsers, it does not generate unguessability we can be confident\r\n   * of.\r\n   *\r\n   * <p>It is the monkey patching logic in this file that is intended\r\n   * to ensure undiscoverability. The basic idea is that there are\r\n   * three fundamental means of discovering properties of an object:\r\n   * The for/in loop, Object.keys(), and Object.getOwnPropertyNames(),\r\n   * as well as some proposed ES6 extensions that appear on our\r\n   * whitelist. The first two only discover enumerable properties, and\r\n   * we only use HIDDEN_NAME to name a non-enumerable property, so the\r\n   * only remaining threat should be getOwnPropertyNames and some\r\n   * proposed ES6 extensions that appear on our whitelist. We monkey\r\n   * patch them to remove HIDDEN_NAME from the list of properties they\r\n   * returns.\r\n   *\r\n   * <p>TODO(erights): On a platform with built-in Proxies, proxies\r\n   * could be used to trap and thereby discover the HIDDEN_NAME, so we\r\n   * need to monkey patch Proxy.create, Proxy.createFunction, etc, in\r\n   * order to wrap the provided handler with the real handler which\r\n   * filters out all traps using HIDDEN_NAME.\r\n   *\r\n   * <p>TODO(erights): Revisit Mike Stay's suggestion that we use an\r\n   * encapsulated function at a not-necessarily-secret name, which\r\n   * uses the Stiegler shared-state rights amplification pattern to\r\n   * reveal the associated value only to the WeakMap in which this key\r\n   * is associated with that value. Since only the key retains the\r\n   * function, the function can also remember the key without causing\r\n   * leakage of the key, so this doesn't violate our general gc\r\n   * goals. In addition, because the name need not be a guarded\r\n   * secret, we could efficiently handle cross-frame frozen keys.\r\n   */\n\n  var HIDDEN_NAME_PREFIX = 'weakmap:';\n  var HIDDEN_NAME = HIDDEN_NAME_PREFIX + 'ident:' + Math.random() + '___';\n\n  if (typeof crypto !== 'undefined' && typeof crypto.getRandomValues === 'function' && typeof ArrayBuffer === 'function' && typeof Uint8Array === 'function') {\n    var ab = new ArrayBuffer(25);\n    var u8s = new Uint8Array(ab);\n    crypto.getRandomValues(u8s);\n    HIDDEN_NAME = HIDDEN_NAME_PREFIX + 'rand:' + Array.prototype.map.call(u8s, function (u8) {\n      return (u8 % 36).toString(36);\n    }).join('') + '___';\n  }\n\n  function isNotHiddenName(name) {\n    return !(name.substr(0, HIDDEN_NAME_PREFIX.length) == HIDDEN_NAME_PREFIX && name.substr(name.length - 3) === '___');\n  }\n  /**\r\n   * Monkey patch getOwnPropertyNames to avoid revealing the\r\n   * HIDDEN_NAME.\r\n   *\r\n   * <p>The ES5.1 spec requires each name to appear only once, but as\r\n   * of this writing, this requirement is controversial for ES6, so we\r\n   * made this code robust against this case. If the resulting extra\r\n   * search turns out to be expensive, we can probably relax this once\r\n   * ES6 is adequately supported on all major browsers, iff no browser\r\n   * versions we support at that time have relaxed this constraint\r\n   * without providing built-in ES6 WeakMaps.\r\n   */\n\n\n  defProp(Object, 'getOwnPropertyNames', {\n    value: function fakeGetOwnPropertyNames(obj) {\n      return gopn(obj).filter(isNotHiddenName);\n    }\n  });\n  /**\r\n   * getPropertyNames is not in ES5 but it is proposed for ES6 and\r\n   * does appear in our whitelist, so we need to clean it too.\r\n   */\n\n  if ('getPropertyNames' in Object) {\n    var originalGetPropertyNames = Object.getPropertyNames;\n    defProp(Object, 'getPropertyNames', {\n      value: function fakeGetPropertyNames(obj) {\n        return originalGetPropertyNames(obj).filter(isNotHiddenName);\n      }\n    });\n  }\n  /**\r\n   * <p>To treat objects as identity-keys with reasonable efficiency\r\n   * on ES5 by itself (i.e., without any object-keyed collections), we\r\n   * need to add a hidden property to such key objects when we\r\n   * can. This raises several issues:\r\n   * <ul>\r\n   * <li>Arranging to add this property to objects before we lose the\r\n   *     chance, and\r\n   * <li>Hiding the existence of this new property from most\r\n   *     JavaScript code.\r\n   * <li>Preventing <i>certification theft</i>, where one object is\r\n   *     created falsely claiming to be the key of an association\r\n   *     actually keyed by another object.\r\n   * <li>Preventing <i>value theft</i>, where untrusted code with\r\n   *     access to a key object but not a weak map nevertheless\r\n   *     obtains access to the value associated with that key in that\r\n   *     weak map.\r\n   * </ul>\r\n   * We do so by\r\n   * <ul>\r\n   * <li>Making the name of the hidden property unguessable, so \"[]\"\r\n   *     indexing, which we cannot intercept, cannot be used to access\r\n   *     a property without knowing the name.\r\n   * <li>Making the hidden property non-enumerable, so we need not\r\n   *     worry about for-in loops or {@code Object.keys},\r\n   * <li>monkey patching those reflective methods that would\r\n   *     prevent extensions, to add this hidden property first,\r\n   * <li>monkey patching those methods that would reveal this\r\n   *     hidden property.\r\n   * </ul>\r\n   * Unfortunately, because of same-origin iframes, we cannot reliably\r\n   * add this hidden property before an object becomes\r\n   * non-extensible. Instead, if we encounter a non-extensible object\r\n   * without a hidden record that we can detect (whether or not it has\r\n   * a hidden record stored under a name secret to us), then we just\r\n   * use the key object itself to represent its identity in a brute\r\n   * force leaky map stored in the weak map, losing all the advantages\r\n   * of weakness for these.\r\n   */\n\n\n  function getHiddenRecord(key) {\n    if (key !== Object(key)) {\n      throw new TypeError('Not an object: ' + key);\n    }\n\n    var hiddenRecord = key[HIDDEN_NAME];\n\n    if (hiddenRecord && hiddenRecord.key === key) {\n      return hiddenRecord;\n    }\n\n    if (!isExtensible(key)) {\n      // Weak map must brute force, as explained in doc-comment above.\n      return void 0;\n    } // The hiddenRecord and the key point directly at each other, via\n    // the \"key\" and HIDDEN_NAME properties respectively. The key\n    // field is for quickly verifying that this hidden record is an\n    // own property, not a hidden record from up the prototype chain.\n    //\n    // NOTE: Because this WeakMap emulation is meant only for systems like\n    // SES where Object.prototype is frozen without any numeric\n    // properties, it is ok to use an object literal for the hiddenRecord.\n    // This has two advantages:\n    // * It is much faster in a performance critical place\n    // * It avoids relying on Object.create(null), which had been\n    //   problematic on Chrome 28.0.1480.0. See\n    //   https://code.google.com/p/google-caja/issues/detail?id=1687\n\n\n    hiddenRecord = {\n      key: key\n    }; // When using this WeakMap emulation on platforms where\n    // Object.prototype might not be frozen and Object.create(null) is\n    // reliable, use the following two commented out lines instead.\n    // hiddenRecord = Object.create(null);\n    // hiddenRecord.key = key;\n    // Please contact us if you need this to work on platforms where\n    // Object.prototype might not be frozen and\n    // Object.create(null) might not be reliable.\n\n    try {\n      defProp(key, HIDDEN_NAME, {\n        value: hiddenRecord,\n        writable: false,\n        enumerable: false,\n        configurable: false\n      });\n      return hiddenRecord;\n    } catch (error) {\n      // Under some circumstances, isExtensible seems to misreport whether\n      // the HIDDEN_NAME can be defined.\n      // The circumstances have not been isolated, but at least affect\n      // Node.js v0.10.26 on TravisCI / Linux, but not the same version of\n      // Node.js on OS X.\n      return void 0;\n    }\n  }\n  /**\r\n   * Monkey patch operations that would make their argument\r\n   * non-extensible.\r\n   *\r\n   * <p>The monkey patched versions throw a TypeError if their\r\n   * argument is not an object, so it should only be done to functions\r\n   * that should throw a TypeError anyway if their argument is not an\r\n   * object.\r\n   */\n\n\n  (function () {\n    var oldFreeze = Object.freeze;\n    defProp(Object, 'freeze', {\n      value: function identifyingFreeze(obj) {\n        getHiddenRecord(obj);\n        return oldFreeze(obj);\n      }\n    });\n    var oldSeal = Object.seal;\n    defProp(Object, 'seal', {\n      value: function identifyingSeal(obj) {\n        getHiddenRecord(obj);\n        return oldSeal(obj);\n      }\n    });\n    var oldPreventExtensions = Object.preventExtensions;\n    defProp(Object, 'preventExtensions', {\n      value: function identifyingPreventExtensions(obj) {\n        getHiddenRecord(obj);\n        return oldPreventExtensions(obj);\n      }\n    });\n  })();\n\n  function constFunc(func) {\n    func.prototype = null;\n    return Object.freeze(func);\n  }\n\n  var calledAsFunctionWarningDone = false;\n\n  function calledAsFunctionWarning() {\n    // Future ES6 WeakMap is currently (2013-09-10) expected to reject WeakMap()\n    // but we used to permit it and do it ourselves, so warn only.\n    if (!calledAsFunctionWarningDone && typeof console !== 'undefined') {\n      calledAsFunctionWarningDone = true;\n      console.warn('WeakMap should be invoked as new WeakMap(), not ' + 'WeakMap(). This will be an error in the future.');\n    }\n  }\n\n  var nextId = 0;\n\n  var OurWeakMap = function () {\n    if (!(this instanceof OurWeakMap)) {\n      // approximate test for new ...()\n      calledAsFunctionWarning();\n    } // We are currently (12/25/2012) never encountering any prematurely\n    // non-extensible keys.\n\n\n    var keys = []; // brute force for prematurely non-extensible keys.\n\n    var values = []; // brute force for corresponding values.\n\n    var id = nextId++;\n\n    function get___(key, opt_default) {\n      var index;\n      var hiddenRecord = getHiddenRecord(key);\n\n      if (hiddenRecord) {\n        return id in hiddenRecord ? hiddenRecord[id] : opt_default;\n      } else {\n        index = keys.indexOf(key);\n        return index >= 0 ? values[index] : opt_default;\n      }\n    }\n\n    function has___(key) {\n      var hiddenRecord = getHiddenRecord(key);\n\n      if (hiddenRecord) {\n        return id in hiddenRecord;\n      } else {\n        return keys.indexOf(key) >= 0;\n      }\n    }\n\n    function set___(key, value) {\n      var index;\n      var hiddenRecord = getHiddenRecord(key);\n\n      if (hiddenRecord) {\n        hiddenRecord[id] = value;\n      } else {\n        index = keys.indexOf(key);\n\n        if (index >= 0) {\n          values[index] = value;\n        } else {\n          // Since some browsers preemptively terminate slow turns but\n          // then continue computing with presumably corrupted heap\n          // state, we here defensively get keys.length first and then\n          // use it to update both the values and keys arrays, keeping\n          // them in sync.\n          index = keys.length;\n          values[index] = value; // If we crash here, values will be one longer than keys.\n\n          keys[index] = key;\n        }\n      }\n\n      return this;\n    }\n\n    function delete___(key) {\n      var hiddenRecord = getHiddenRecord(key);\n      var index, lastIndex;\n\n      if (hiddenRecord) {\n        return id in hiddenRecord && delete hiddenRecord[id];\n      } else {\n        index = keys.indexOf(key);\n\n        if (index < 0) {\n          return false;\n        } // Since some browsers preemptively terminate slow turns but\n        // then continue computing with potentially corrupted heap\n        // state, we here defensively get keys.length first and then use\n        // it to update both the keys and the values array, keeping\n        // them in sync. We update the two with an order of assignments,\n        // such that any prefix of these assignments will preserve the\n        // key/value correspondence, either before or after the delete.\n        // Note that this needs to work correctly when index === lastIndex.\n\n\n        lastIndex = keys.length - 1;\n        keys[index] = void 0; // If we crash here, there's a void 0 in the keys array, but\n        // no operation will cause a \"keys.indexOf(void 0)\", since\n        // getHiddenRecord(void 0) will always throw an error first.\n\n        values[index] = values[lastIndex]; // If we crash here, values[index] cannot be found here,\n        // because keys[index] is void 0.\n\n        keys[index] = keys[lastIndex]; // If index === lastIndex and we crash here, then keys[index]\n        // is still void 0, since the aliasing killed the previous key.\n\n        keys.length = lastIndex; // If we crash here, keys will be one shorter than values.\n\n        values.length = lastIndex;\n        return true;\n      }\n    }\n\n    return Object.create(OurWeakMap.prototype, {\n      get___: {\n        value: constFunc(get___)\n      },\n      has___: {\n        value: constFunc(has___)\n      },\n      set___: {\n        value: constFunc(set___)\n      },\n      delete___: {\n        value: constFunc(delete___)\n      }\n    });\n  };\n\n  OurWeakMap.prototype = Object.create(Object.prototype, {\n    get: {\n      /**\r\n       * Return the value most recently associated with key, or\r\n       * opt_default if none.\r\n       */\n      value: function get(key, opt_default) {\n        return this.get___(key, opt_default);\n      },\n      writable: true,\n      configurable: true\n    },\n    has: {\n      /**\r\n       * Is there a value associated with key in this WeakMap?\r\n       */\n      value: function has(key) {\n        return this.has___(key);\n      },\n      writable: true,\n      configurable: true\n    },\n    set: {\n      /**\r\n       * Associate value with key in this WeakMap, overwriting any\r\n       * previous association if present.\r\n       */\n      value: function set(key, value) {\n        return this.set___(key, value);\n      },\n      writable: true,\n      configurable: true\n    },\n    'delete': {\n      /**\r\n       * Remove any association for key in this WeakMap, returning\r\n       * whether there was one.\r\n       *\r\n       * <p>Note that the boolean return here does not work like the\r\n       * {@code delete} operator. The {@code delete} operator returns\r\n       * whether the deletion succeeds at bringing about a state in\r\n       * which the deleted property is absent. The {@code delete}\r\n       * operator therefore returns true if the property was already\r\n       * absent, whereas this {@code delete} method returns false if\r\n       * the association was already absent.\r\n       */\n      value: function remove(key) {\n        return this.delete___(key);\n      },\n      writable: true,\n      configurable: true\n    }\n  });\n\n  if (typeof HostWeakMap === 'function') {\n    (function () {\n      // If we got here, then the platform has a WeakMap but we are concerned\n      // that it may refuse to store some key types. Therefore, make a map\n      // implementation which makes use of both as possible.\n      // In this mode we are always using double maps, so we are not proxy-safe.\n      // This combination does not occur in any known browser, but we had best\n      // be safe.\n      if (doubleWeakMapCheckSilentFailure && typeof Proxy !== 'undefined') {\n        Proxy = undefined;\n      }\n\n      function DoubleWeakMap() {\n        if (!(this instanceof OurWeakMap)) {\n          // approximate test for new ...()\n          calledAsFunctionWarning();\n        } // Preferable, truly weak map.\n\n\n        var hmap = new HostWeakMap(); // Our hidden-property-based pseudo-weak-map. Lazily initialized in the\n        // 'set' implementation; thus we can avoid performing extra lookups if\n        // we know all entries actually stored are entered in 'hmap'.\n\n        var omap = undefined; // Hidden-property maps are not compatible with proxies because proxies\n        // can observe the hidden name and either accidentally expose it or fail\n        // to allow the hidden property to be set. Therefore, we do not allow\n        // arbitrary WeakMaps to switch to using hidden properties, but only\n        // those which need the ability, and unprivileged code is not allowed\n        // to set the flag.\n        //\n        // (Except in doubleWeakMapCheckSilentFailure mode in which case we\n        // disable proxies.)\n\n        var enableSwitching = false;\n\n        function dget(key, opt_default) {\n          if (omap) {\n            return hmap.has(key) ? hmap.get(key) : omap.get___(key, opt_default);\n          } else {\n            return hmap.get(key, opt_default);\n          }\n        }\n\n        function dhas(key) {\n          return hmap.has(key) || (omap ? omap.has___(key) : false);\n        }\n\n        var dset;\n\n        if (doubleWeakMapCheckSilentFailure) {\n          dset = function (key, value) {\n            hmap.set(key, value);\n\n            if (!hmap.has(key)) {\n              if (!omap) {\n                omap = new OurWeakMap();\n              }\n\n              omap.set(key, value);\n            }\n\n            return this;\n          };\n        } else {\n          dset = function (key, value) {\n            if (enableSwitching) {\n              try {\n                hmap.set(key, value);\n              } catch (e) {\n                if (!omap) {\n                  omap = new OurWeakMap();\n                }\n\n                omap.set___(key, value);\n              }\n            } else {\n              hmap.set(key, value);\n            }\n\n            return this;\n          };\n        }\n\n        function ddelete(key) {\n          var result = !!hmap['delete'](key);\n\n          if (omap) {\n            return omap.delete___(key) || result;\n          }\n\n          return result;\n        }\n\n        return Object.create(OurWeakMap.prototype, {\n          get___: {\n            value: constFunc(dget)\n          },\n          has___: {\n            value: constFunc(dhas)\n          },\n          set___: {\n            value: constFunc(dset)\n          },\n          delete___: {\n            value: constFunc(ddelete)\n          },\n          permitHostObjects___: {\n            value: constFunc(function (token) {\n              if (token === weakMapPermitHostObjects) {\n                enableSwitching = true;\n              } else {\n                throw new Error('bogus call to permitHostObjects___');\n              }\n            })\n          }\n        });\n      }\n\n      DoubleWeakMap.prototype = OurWeakMap.prototype;\n      module.exports = DoubleWeakMap; // define .constructor to hide OurWeakMap ctor\n\n      Object.defineProperty(WeakMap.prototype, 'constructor', {\n        value: WeakMap,\n        enumerable: false,\n        // as default .constructor is\n        configurable: true,\n        writable: true\n      });\n    })();\n  } else {\n    // There is no host WeakMap, so we must use the emulation.\n    // Emulated WeakMaps are incompatible with native proxies (because proxies\n    // can observe the hidden name), so we must disable Proxy usage (in\n    // ArrayLike and Domado, currently).\n    if (typeof Proxy !== 'undefined') {\n      Proxy = undefined;\n    }\n\n    module.exports = OurWeakMap;\n  }\n})();","map":{"version":3,"sources":["C:/Users/mikke/VSC/fantasy-django-react/fantasy-django/fantasy-react-app/node_modules/weak-map/weak-map.js"],"names":["WeakMapModule","ses","ok","weakMapPermitHostObjects","map","permitHostObjects___","doubleWeakMapCheckSilentFailure","WeakMap","HostWeakMap","navigator","test","userAgent","testMap","testObject","Object","freeze","set","get","module","exports","hop","prototype","hasOwnProperty","gopn","getOwnPropertyNames","defProp","defineProperty","isExtensible","HIDDEN_NAME_PREFIX","HIDDEN_NAME","Math","random","crypto","getRandomValues","ArrayBuffer","Uint8Array","ab","u8s","Array","call","u8","toString","join","isNotHiddenName","name","substr","length","value","fakeGetOwnPropertyNames","obj","filter","originalGetPropertyNames","getPropertyNames","fakeGetPropertyNames","getHiddenRecord","key","TypeError","hiddenRecord","writable","enumerable","configurable","error","oldFreeze","identifyingFreeze","oldSeal","seal","identifyingSeal","oldPreventExtensions","preventExtensions","identifyingPreventExtensions","constFunc","func","calledAsFunctionWarningDone","calledAsFunctionWarning","console","warn","nextId","OurWeakMap","keys","values","id","get___","opt_default","index","indexOf","has___","set___","delete___","lastIndex","create","has","remove","Proxy","undefined","DoubleWeakMap","hmap","omap","enableSwitching","dget","dhas","dset","e","ddelete","result","token","Error"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,SAASA,aAAT,GAAyB;AACxB;;AAEA,MAAI,OAAOC,GAAP,KAAe,WAAf,IAA8BA,GAAG,CAACC,EAAlC,IAAwC,CAACD,GAAG,CAACC,EAAJ,EAA7C,EAAuD;AACrD;AACA;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,WAASC,wBAAT,CAAkCC,GAAlC,EAAuC;AACrC;AACA,QAAIA,GAAG,CAACC,oBAAR,EAA8B;AAC5BD,MAAAA,GAAG,CAACC,oBAAJ,CAAyBF,wBAAzB;AACD;AACF;;AACD,MAAI,OAAOF,GAAP,KAAe,WAAnB,EAAgC;AAC9BA,IAAAA,GAAG,CAACE,wBAAJ,GAA+BA,wBAA/B;AACD,GA7BuB,CA+BxB;AACA;;;AACA,MAAIG,+BAA+B,GAAG,KAAtC,CAjCwB,CAmCxB;AACA;;AACA,MAAI,OAAOC,OAAP,KAAmB,UAAvB,EAAmC;AACjC,QAAIC,WAAW,GAAGD,OAAlB,CADiC,CAEjC;;AACA,QAAI,OAAOE,SAAP,KAAqB,WAArB,IACA,UAAUC,IAAV,CAAeD,SAAS,CAACE,SAAzB,CADJ,EACyC,CACvC;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AA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","sourcesContent":["// Copyright (C) 2011 Google Inc.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\n/**\r\n * @fileoverview Install a leaky WeakMap emulation on platforms that\r\n * don't provide a built-in one.\r\n *\r\n * <p>Assumes that an ES5 platform where, if {@code WeakMap} is\r\n * already present, then it conforms to the anticipated ES6\r\n * specification. To run this file on an ES5 or almost ES5\r\n * implementation where the {@code WeakMap} specification does not\r\n * quite conform, run <code>repairES5.js</code> first.\r\n *\r\n * <p>Even though WeakMapModule is not global, the linter thinks it\r\n * is, which is why it is in the overrides list below.\r\n *\r\n * <p>NOTE: Before using this WeakMap emulation in a non-SES\r\n * environment, see the note below about hiddenRecord.\r\n *\r\n * @author Mark S. Miller\r\n * @requires crypto, ArrayBuffer, Uint8Array, navigator, console\r\n * @overrides WeakMap, ses, Proxy\r\n * @overrides WeakMapModule\r\n */\r\n\r\n/**\r\n * This {@code WeakMap} emulation is observably equivalent to the\r\n * ES-Harmony WeakMap, but with leakier garbage collection properties.\r\n *\r\n * <p>As with true WeakMaps, in this emulation, a key does not\r\n * retain maps indexed by that key and (crucially) a map does not\r\n * retain the keys it indexes. A map by itself also does not retain\r\n * the values associated with that map.\r\n *\r\n * <p>However, the values associated with a key in some map are\r\n * retained so long as that key is retained and those associations are\r\n * not overridden. For example, when used to support membranes, all\r\n * values exported from a given membrane will live for the lifetime\r\n * they would have had in the absence of an interposed membrane. Even\r\n * when the membrane is revoked, all objects that would have been\r\n * reachable in the absence of revocation will still be reachable, as\r\n * far as the GC can tell, even though they will no longer be relevant\r\n * to ongoing computation.\r\n *\r\n * <p>The API implemented here is approximately the API as implemented\r\n * in FF6.0a1 and agreed to by MarkM, Andreas Gal, and Dave Herman,\r\n * rather than the offially approved proposal page. TODO(erights):\r\n * upgrade the ecmascript WeakMap proposal page to explain this API\r\n * change and present to EcmaScript committee for their approval.\r\n *\r\n * <p>The first difference between the emulation here and that in\r\n * FF6.0a1 is the presence of non enumerable {@code get___, has___,\r\n * set___, and delete___} methods on WeakMap instances to represent\r\n * what would be the hidden internal properties of a primitive\r\n * implementation. Whereas the FF6.0a1 WeakMap.prototype methods\r\n * require their {@code this} to be a genuine WeakMap instance (i.e.,\r\n * an object of {@code [[Class]]} \"WeakMap}), since there is nothing\r\n * unforgeable about the pseudo-internal method names used here,\r\n * nothing prevents these emulated prototype methods from being\r\n * applied to non-WeakMaps with pseudo-internal methods of the same\r\n * names.\r\n *\r\n * <p>Another difference is that our emulated {@code\r\n * WeakMap.prototype} is not itself a WeakMap. A problem with the\r\n * current FF6.0a1 API is that WeakMap.prototype is itself a WeakMap\r\n * providing ambient mutability and an ambient communications\r\n * channel. Thus, if a WeakMap is already present and has this\r\n * problem, repairES5.js wraps it in a safe wrappper in order to\r\n * prevent access to this channel. (See\r\n * PATCH_MUTABLE_FROZEN_WEAKMAP_PROTO in repairES5.js).\r\n */\r\n\r\n/**\r\n * If this is a full <a href=\r\n * \"http://code.google.com/p/es-lab/wiki/SecureableES5\"\r\n * >secureable ES5</a> platform and the ES-Harmony {@code WeakMap} is\r\n * absent, install an approximate emulation.\r\n *\r\n * <p>If WeakMap is present but cannot store some objects, use our approximate\r\n * emulation as a wrapper.\r\n *\r\n * <p>If this is almost a secureable ES5 platform, then WeakMap.js\r\n * should be run after repairES5.js.\r\n *\r\n * <p>See {@code WeakMap} for documentation of the garbage collection\r\n * properties of this WeakMap emulation.\r\n */\r\n(function WeakMapModule() {\r\n  \"use strict\";\r\n\r\n  if (typeof ses !== 'undefined' && ses.ok && !ses.ok()) {\r\n    // already too broken, so give up\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * In some cases (current Firefox), we must make a choice betweeen a\r\n   * WeakMap which is capable of using all varieties of host objects as\r\n   * keys and one which is capable of safely using proxies as keys. See\r\n   * comments below about HostWeakMap and DoubleWeakMap for details.\r\n   *\r\n   * This function (which is a global, not exposed to guests) marks a\r\n   * WeakMap as permitted to do what is necessary to index all host\r\n   * objects, at the cost of making it unsafe for proxies.\r\n   *\r\n   * Do not apply this function to anything which is not a genuine\r\n   * fresh WeakMap.\r\n   */\r\n  function weakMapPermitHostObjects(map) {\r\n    // identity of function used as a secret -- good enough and cheap\r\n    if (map.permitHostObjects___) {\r\n      map.permitHostObjects___(weakMapPermitHostObjects);\r\n    }\r\n  }\r\n  if (typeof ses !== 'undefined') {\r\n    ses.weakMapPermitHostObjects = weakMapPermitHostObjects;\r\n  }\r\n\r\n  // IE 11 has no Proxy but has a broken WeakMap such that we need to patch\r\n  // it using DoubleWeakMap; this flag tells DoubleWeakMap so.\r\n  var doubleWeakMapCheckSilentFailure = false;\r\n\r\n  // Check if there is already a good-enough WeakMap implementation, and if so\r\n  // exit without replacing it.\r\n  if (typeof WeakMap === 'function') {\r\n    var HostWeakMap = WeakMap;\r\n    // There is a WeakMap -- is it good enough?\r\n    if (typeof navigator !== 'undefined' &&\r\n        /Firefox/.test(navigator.userAgent)) {\r\n      // We're now *assuming not*, because as of this writing (2013-05-06)\r\n      // Firefox's WeakMaps have a miscellany of objects they won't accept, and\r\n      // we don't want to make an exhaustive list, and testing for just one\r\n      // will be a problem if that one is fixed alone (as they did for Event).\r\n\r\n      // If there is a platform that we *can* reliably test on, here's how to\r\n      // do it:\r\n      //  var problematic = ... ;\r\n      //  var testHostMap = new HostWeakMap();\r\n      //  try {\r\n      //    testHostMap.set(problematic, 1);  // Firefox 20 will throw here\r\n      //    if (testHostMap.get(problematic) === 1) {\r\n      //      return;\r\n      //    }\r\n      //  } catch (e) {}\r\n\r\n    } else {\r\n      // IE 11 bug: WeakMaps silently fail to store frozen objects.\r\n      var testMap = new HostWeakMap();\r\n      var testObject = Object.freeze({});\r\n      testMap.set(testObject, 1);\r\n      if (testMap.get(testObject) !== 1) {\r\n        doubleWeakMapCheckSilentFailure = true;\r\n        // Fall through to installing our WeakMap.\r\n      } else {\r\n        module.exports = WeakMap;\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  var hop = Object.prototype.hasOwnProperty;\r\n  var gopn = Object.getOwnPropertyNames;\r\n  var defProp = Object.defineProperty;\r\n  var isExtensible = Object.isExtensible;\r\n\r\n  /**\r\n   * Security depends on HIDDEN_NAME being both <i>unguessable</i> and\r\n   * <i>undiscoverable</i> by untrusted code.\r\n   *\r\n   * <p>Given the known weaknesses of Math.random() on existing\r\n   * browsers, it does not generate unguessability we can be confident\r\n   * of.\r\n   *\r\n   * <p>It is the monkey patching logic in this file that is intended\r\n   * to ensure undiscoverability. The basic idea is that there are\r\n   * three fundamental means of discovering properties of an object:\r\n   * The for/in loop, Object.keys(), and Object.getOwnPropertyNames(),\r\n   * as well as some proposed ES6 extensions that appear on our\r\n   * whitelist. The first two only discover enumerable properties, and\r\n   * we only use HIDDEN_NAME to name a non-enumerable property, so the\r\n   * only remaining threat should be getOwnPropertyNames and some\r\n   * proposed ES6 extensions that appear on our whitelist. We monkey\r\n   * patch them to remove HIDDEN_NAME from the list of properties they\r\n   * returns.\r\n   *\r\n   * <p>TODO(erights): On a platform with built-in Proxies, proxies\r\n   * could be used to trap and thereby discover the HIDDEN_NAME, so we\r\n   * need to monkey patch Proxy.create, Proxy.createFunction, etc, in\r\n   * order to wrap the provided handler with the real handler which\r\n   * filters out all traps using HIDDEN_NAME.\r\n   *\r\n   * <p>TODO(erights): Revisit Mike Stay's suggestion that we use an\r\n   * encapsulated function at a not-necessarily-secret name, which\r\n   * uses the Stiegler shared-state rights amplification pattern to\r\n   * reveal the associated value only to the WeakMap in which this key\r\n   * is associated with that value. Since only the key retains the\r\n   * function, the function can also remember the key without causing\r\n   * leakage of the key, so this doesn't violate our general gc\r\n   * goals. In addition, because the name need not be a guarded\r\n   * secret, we could efficiently handle cross-frame frozen keys.\r\n   */\r\n  var HIDDEN_NAME_PREFIX = 'weakmap:';\r\n  var HIDDEN_NAME = HIDDEN_NAME_PREFIX + 'ident:' + Math.random() + '___';\r\n\r\n  if (typeof crypto !== 'undefined' &&\r\n      typeof crypto.getRandomValues === 'function' &&\r\n      typeof ArrayBuffer === 'function' &&\r\n      typeof Uint8Array === 'function') {\r\n    var ab = new ArrayBuffer(25);\r\n    var u8s = new Uint8Array(ab);\r\n    crypto.getRandomValues(u8s);\r\n    HIDDEN_NAME = HIDDEN_NAME_PREFIX + 'rand:' +\r\n      Array.prototype.map.call(u8s, function(u8) {\r\n        return (u8 % 36).toString(36);\r\n      }).join('') + '___';\r\n  }\r\n\r\n  function isNotHiddenName(name) {\r\n    return !(\r\n        name.substr(0, HIDDEN_NAME_PREFIX.length) == HIDDEN_NAME_PREFIX &&\r\n        name.substr(name.length - 3) === '___');\r\n  }\r\n\r\n  /**\r\n   * Monkey patch getOwnPropertyNames to avoid revealing the\r\n   * HIDDEN_NAME.\r\n   *\r\n   * <p>The ES5.1 spec requires each name to appear only once, but as\r\n   * of this writing, this requirement is controversial for ES6, so we\r\n   * made this code robust against this case. If the resulting extra\r\n   * search turns out to be expensive, we can probably relax this once\r\n   * ES6 is adequately supported on all major browsers, iff no browser\r\n   * versions we support at that time have relaxed this constraint\r\n   * without providing built-in ES6 WeakMaps.\r\n   */\r\n  defProp(Object, 'getOwnPropertyNames', {\r\n    value: function fakeGetOwnPropertyNames(obj) {\r\n      return gopn(obj).filter(isNotHiddenName);\r\n    }\r\n  });\r\n\r\n  /**\r\n   * getPropertyNames is not in ES5 but it is proposed for ES6 and\r\n   * does appear in our whitelist, so we need to clean it too.\r\n   */\r\n  if ('getPropertyNames' in Object) {\r\n    var originalGetPropertyNames = Object.getPropertyNames;\r\n    defProp(Object, 'getPropertyNames', {\r\n      value: function fakeGetPropertyNames(obj) {\r\n        return originalGetPropertyNames(obj).filter(isNotHiddenName);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * <p>To treat objects as identity-keys with reasonable efficiency\r\n   * on ES5 by itself (i.e., without any object-keyed collections), we\r\n   * need to add a hidden property to such key objects when we\r\n   * can. This raises several issues:\r\n   * <ul>\r\n   * <li>Arranging to add this property to objects before we lose the\r\n   *     chance, and\r\n   * <li>Hiding the existence of this new property from most\r\n   *     JavaScript code.\r\n   * <li>Preventing <i>certification theft</i>, where one object is\r\n   *     created falsely claiming to be the key of an association\r\n   *     actually keyed by another object.\r\n   * <li>Preventing <i>value theft</i>, where untrusted code with\r\n   *     access to a key object but not a weak map nevertheless\r\n   *     obtains access to the value associated with that key in that\r\n   *     weak map.\r\n   * </ul>\r\n   * We do so by\r\n   * <ul>\r\n   * <li>Making the name of the hidden property unguessable, so \"[]\"\r\n   *     indexing, which we cannot intercept, cannot be used to access\r\n   *     a property without knowing the name.\r\n   * <li>Making the hidden property non-enumerable, so we need not\r\n   *     worry about for-in loops or {@code Object.keys},\r\n   * <li>monkey patching those reflective methods that would\r\n   *     prevent extensions, to add this hidden property first,\r\n   * <li>monkey patching those methods that would reveal this\r\n   *     hidden property.\r\n   * </ul>\r\n   * Unfortunately, because of same-origin iframes, we cannot reliably\r\n   * add this hidden property before an object becomes\r\n   * non-extensible. Instead, if we encounter a non-extensible object\r\n   * without a hidden record that we can detect (whether or not it has\r\n   * a hidden record stored under a name secret to us), then we just\r\n   * use the key object itself to represent its identity in a brute\r\n   * force leaky map stored in the weak map, losing all the advantages\r\n   * of weakness for these.\r\n   */\r\n  function getHiddenRecord(key) {\r\n    if (key !== Object(key)) {\r\n      throw new TypeError('Not an object: ' + key);\r\n    }\r\n    var hiddenRecord = key[HIDDEN_NAME];\r\n    if (hiddenRecord && hiddenRecord.key === key) { return hiddenRecord; }\r\n    if (!isExtensible(key)) {\r\n      // Weak map must brute force, as explained in doc-comment above.\r\n      return void 0;\r\n    }\r\n\r\n    // The hiddenRecord and the key point directly at each other, via\r\n    // the \"key\" and HIDDEN_NAME properties respectively. The key\r\n    // field is for quickly verifying that this hidden record is an\r\n    // own property, not a hidden record from up the prototype chain.\r\n    //\r\n    // NOTE: Because this WeakMap emulation is meant only for systems like\r\n    // SES where Object.prototype is frozen without any numeric\r\n    // properties, it is ok to use an object literal for the hiddenRecord.\r\n    // This has two advantages:\r\n    // * It is much faster in a performance critical place\r\n    // * It avoids relying on Object.create(null), which had been\r\n    //   problematic on Chrome 28.0.1480.0. See\r\n    //   https://code.google.com/p/google-caja/issues/detail?id=1687\r\n    hiddenRecord = { key: key };\r\n\r\n    // When using this WeakMap emulation on platforms where\r\n    // Object.prototype might not be frozen and Object.create(null) is\r\n    // reliable, use the following two commented out lines instead.\r\n    // hiddenRecord = Object.create(null);\r\n    // hiddenRecord.key = key;\r\n\r\n    // Please contact us if you need this to work on platforms where\r\n    // Object.prototype might not be frozen and\r\n    // Object.create(null) might not be reliable.\r\n\r\n    try {\r\n      defProp(key, HIDDEN_NAME, {\r\n        value: hiddenRecord,\r\n        writable: false,\r\n        enumerable: false,\r\n        configurable: false\r\n      });\r\n      return hiddenRecord;\r\n    } catch (error) {\r\n      // Under some circumstances, isExtensible seems to misreport whether\r\n      // the HIDDEN_NAME can be defined.\r\n      // The circumstances have not been isolated, but at least affect\r\n      // Node.js v0.10.26 on TravisCI / Linux, but not the same version of\r\n      // Node.js on OS X.\r\n      return void 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Monkey patch operations that would make their argument\r\n   * non-extensible.\r\n   *\r\n   * <p>The monkey patched versions throw a TypeError if their\r\n   * argument is not an object, so it should only be done to functions\r\n   * that should throw a TypeError anyway if their argument is not an\r\n   * object.\r\n   */\r\n  (function(){\r\n    var oldFreeze = Object.freeze;\r\n    defProp(Object, 'freeze', {\r\n      value: function identifyingFreeze(obj) {\r\n        getHiddenRecord(obj);\r\n        return oldFreeze(obj);\r\n      }\r\n    });\r\n    var oldSeal = Object.seal;\r\n    defProp(Object, 'seal', {\r\n      value: function identifyingSeal(obj) {\r\n        getHiddenRecord(obj);\r\n        return oldSeal(obj);\r\n      }\r\n    });\r\n    var oldPreventExtensions = Object.preventExtensions;\r\n    defProp(Object, 'preventExtensions', {\r\n      value: function identifyingPreventExtensions(obj) {\r\n        getHiddenRecord(obj);\r\n        return oldPreventExtensions(obj);\r\n      }\r\n    });\r\n  })();\r\n\r\n  function constFunc(func) {\r\n    func.prototype = null;\r\n    return Object.freeze(func);\r\n  }\r\n\r\n  var calledAsFunctionWarningDone = false;\r\n  function calledAsFunctionWarning() {\r\n    // Future ES6 WeakMap is currently (2013-09-10) expected to reject WeakMap()\r\n    // but we used to permit it and do it ourselves, so warn only.\r\n    if (!calledAsFunctionWarningDone && typeof console !== 'undefined') {\r\n      calledAsFunctionWarningDone = true;\r\n      console.warn('WeakMap should be invoked as new WeakMap(), not ' +\r\n          'WeakMap(). This will be an error in the future.');\r\n    }\r\n  }\r\n\r\n  var nextId = 0;\r\n\r\n  var OurWeakMap = function() {\r\n    if (!(this instanceof OurWeakMap)) {  // approximate test for new ...()\r\n      calledAsFunctionWarning();\r\n    }\r\n\r\n    // We are currently (12/25/2012) never encountering any prematurely\r\n    // non-extensible keys.\r\n    var keys = []; // brute force for prematurely non-extensible keys.\r\n    var values = []; // brute force for corresponding values.\r\n    var id = nextId++;\r\n\r\n    function get___(key, opt_default) {\r\n      var index;\r\n      var hiddenRecord = getHiddenRecord(key);\r\n      if (hiddenRecord) {\r\n        return id in hiddenRecord ? hiddenRecord[id] : opt_default;\r\n      } else {\r\n        index = keys.indexOf(key);\r\n        return index >= 0 ? values[index] : opt_default;\r\n      }\r\n    }\r\n\r\n    function has___(key) {\r\n      var hiddenRecord = getHiddenRecord(key);\r\n      if (hiddenRecord) {\r\n        return id in hiddenRecord;\r\n      } else {\r\n        return keys.indexOf(key) >= 0;\r\n      }\r\n    }\r\n\r\n    function set___(key, value) {\r\n      var index;\r\n      var hiddenRecord = getHiddenRecord(key);\r\n      if (hiddenRecord) {\r\n        hiddenRecord[id] = value;\r\n      } else {\r\n        index = keys.indexOf(key);\r\n        if (index >= 0) {\r\n          values[index] = value;\r\n        } else {\r\n          // Since some browsers preemptively terminate slow turns but\r\n          // then continue computing with presumably corrupted heap\r\n          // state, we here defensively get keys.length first and then\r\n          // use it to update both the values and keys arrays, keeping\r\n          // them in sync.\r\n          index = keys.length;\r\n          values[index] = value;\r\n          // If we crash here, values will be one longer than keys.\r\n          keys[index] = key;\r\n        }\r\n      }\r\n      return this;\r\n    }\r\n\r\n    function delete___(key) {\r\n      var hiddenRecord = getHiddenRecord(key);\r\n      var index, lastIndex;\r\n      if (hiddenRecord) {\r\n        return id in hiddenRecord && delete hiddenRecord[id];\r\n      } else {\r\n        index = keys.indexOf(key);\r\n        if (index < 0) {\r\n          return false;\r\n        }\r\n        // Since some browsers preemptively terminate slow turns but\r\n        // then continue computing with potentially corrupted heap\r\n        // state, we here defensively get keys.length first and then use\r\n        // it to update both the keys and the values array, keeping\r\n        // them in sync. We update the two with an order of assignments,\r\n        // such that any prefix of these assignments will preserve the\r\n        // key/value correspondence, either before or after the delete.\r\n        // Note that this needs to work correctly when index === lastIndex.\r\n        lastIndex = keys.length - 1;\r\n        keys[index] = void 0;\r\n        // If we crash here, there's a void 0 in the keys array, but\r\n        // no operation will cause a \"keys.indexOf(void 0)\", since\r\n        // getHiddenRecord(void 0) will always throw an error first.\r\n        values[index] = values[lastIndex];\r\n        // If we crash here, values[index] cannot be found here,\r\n        // because keys[index] is void 0.\r\n        keys[index] = keys[lastIndex];\r\n        // If index === lastIndex and we crash here, then keys[index]\r\n        // is still void 0, since the aliasing killed the previous key.\r\n        keys.length = lastIndex;\r\n        // If we crash here, keys will be one shorter than values.\r\n        values.length = lastIndex;\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return Object.create(OurWeakMap.prototype, {\r\n      get___:    { value: constFunc(get___) },\r\n      has___:    { value: constFunc(has___) },\r\n      set___:    { value: constFunc(set___) },\r\n      delete___: { value: constFunc(delete___) }\r\n    });\r\n  };\r\n\r\n  OurWeakMap.prototype = Object.create(Object.prototype, {\r\n    get: {\r\n      /**\r\n       * Return the value most recently associated with key, or\r\n       * opt_default if none.\r\n       */\r\n      value: function get(key, opt_default) {\r\n        return this.get___(key, opt_default);\r\n      },\r\n      writable: true,\r\n      configurable: true\r\n    },\r\n\r\n    has: {\r\n      /**\r\n       * Is there a value associated with key in this WeakMap?\r\n       */\r\n      value: function has(key) {\r\n        return this.has___(key);\r\n      },\r\n      writable: true,\r\n      configurable: true\r\n    },\r\n\r\n    set: {\r\n      /**\r\n       * Associate value with key in this WeakMap, overwriting any\r\n       * previous association if present.\r\n       */\r\n      value: function set(key, value) {\r\n        return this.set___(key, value);\r\n      },\r\n      writable: true,\r\n      configurable: true\r\n    },\r\n\r\n    'delete': {\r\n      /**\r\n       * Remove any association for key in this WeakMap, returning\r\n       * whether there was one.\r\n       *\r\n       * <p>Note that the boolean return here does not work like the\r\n       * {@code delete} operator. The {@code delete} operator returns\r\n       * whether the deletion succeeds at bringing about a state in\r\n       * which the deleted property is absent. The {@code delete}\r\n       * operator therefore returns true if the property was already\r\n       * absent, whereas this {@code delete} method returns false if\r\n       * the association was already absent.\r\n       */\r\n      value: function remove(key) {\r\n        return this.delete___(key);\r\n      },\r\n      writable: true,\r\n      configurable: true\r\n    }\r\n  });\r\n\r\n  if (typeof HostWeakMap === 'function') {\r\n    (function() {\r\n      // If we got here, then the platform has a WeakMap but we are concerned\r\n      // that it may refuse to store some key types. Therefore, make a map\r\n      // implementation which makes use of both as possible.\r\n\r\n      // In this mode we are always using double maps, so we are not proxy-safe.\r\n      // This combination does not occur in any known browser, but we had best\r\n      // be safe.\r\n      if (doubleWeakMapCheckSilentFailure && typeof Proxy !== 'undefined') {\r\n        Proxy = undefined;\r\n      }\r\n\r\n      function DoubleWeakMap() {\r\n        if (!(this instanceof OurWeakMap)) {  // approximate test for new ...()\r\n          calledAsFunctionWarning();\r\n        }\r\n\r\n        // Preferable, truly weak map.\r\n        var hmap = new HostWeakMap();\r\n\r\n        // Our hidden-property-based pseudo-weak-map. Lazily initialized in the\r\n        // 'set' implementation; thus we can avoid performing extra lookups if\r\n        // we know all entries actually stored are entered in 'hmap'.\r\n        var omap = undefined;\r\n\r\n        // Hidden-property maps are not compatible with proxies because proxies\r\n        // can observe the hidden name and either accidentally expose it or fail\r\n        // to allow the hidden property to be set. Therefore, we do not allow\r\n        // arbitrary WeakMaps to switch to using hidden properties, but only\r\n        // those which need the ability, and unprivileged code is not allowed\r\n        // to set the flag.\r\n        //\r\n        // (Except in doubleWeakMapCheckSilentFailure mode in which case we\r\n        // disable proxies.)\r\n        var enableSwitching = false;\r\n\r\n        function dget(key, opt_default) {\r\n          if (omap) {\r\n            return hmap.has(key) ? hmap.get(key)\r\n                : omap.get___(key, opt_default);\r\n          } else {\r\n            return hmap.get(key, opt_default);\r\n          }\r\n        }\r\n\r\n        function dhas(key) {\r\n          return hmap.has(key) || (omap ? omap.has___(key) : false);\r\n        }\r\n\r\n        var dset;\r\n        if (doubleWeakMapCheckSilentFailure) {\r\n          dset = function(key, value) {\r\n            hmap.set(key, value);\r\n            if (!hmap.has(key)) {\r\n              if (!omap) { omap = new OurWeakMap(); }\r\n              omap.set(key, value);\r\n            }\r\n            return this;\r\n          };\r\n        } else {\r\n          dset = function(key, value) {\r\n            if (enableSwitching) {\r\n              try {\r\n                hmap.set(key, value);\r\n              } catch (e) {\r\n                if (!omap) { omap = new OurWeakMap(); }\r\n                omap.set___(key, value);\r\n              }\r\n            } else {\r\n              hmap.set(key, value);\r\n            }\r\n            return this;\r\n          };\r\n        }\r\n\r\n        function ddelete(key) {\r\n          var result = !!hmap['delete'](key);\r\n          if (omap) { return omap.delete___(key) || result; }\r\n          return result;\r\n        }\r\n\r\n        return Object.create(OurWeakMap.prototype, {\r\n          get___:    { value: constFunc(dget) },\r\n          has___:    { value: constFunc(dhas) },\r\n          set___:    { value: constFunc(dset) },\r\n          delete___: { value: constFunc(ddelete) },\r\n          permitHostObjects___: { value: constFunc(function(token) {\r\n            if (token === weakMapPermitHostObjects) {\r\n              enableSwitching = true;\r\n            } else {\r\n              throw new Error('bogus call to permitHostObjects___');\r\n            }\r\n          })}\r\n        });\r\n      }\r\n      DoubleWeakMap.prototype = OurWeakMap.prototype;\r\n      module.exports = DoubleWeakMap;\r\n\r\n      // define .constructor to hide OurWeakMap ctor\r\n      Object.defineProperty(WeakMap.prototype, 'constructor', {\r\n        value: WeakMap,\r\n        enumerable: false,  // as default .constructor is\r\n        configurable: true,\r\n        writable: true\r\n      });\r\n    })();\r\n  } else {\r\n    // There is no host WeakMap, so we must use the emulation.\r\n\r\n    // Emulated WeakMaps are incompatible with native proxies (because proxies\r\n    // can observe the hidden name), so we must disable Proxy usage (in\r\n    // ArrayLike and Domado, currently).\r\n    if (typeof Proxy !== 'undefined') {\r\n      Proxy = undefined;\r\n    }\r\n\r\n    module.exports = OurWeakMap;\r\n  }\r\n})();\r\n"]},"metadata":{},"sourceType":"script"}