{"ast":null,"code":"/*\r\n * World Calendars\r\n * https://github.com/alexcjohnson/world-calendars\r\n *\r\n * Batch-converted from kbwood/calendars\r\n * Many thanks to Keith Wood and all of the contributors to the original project!\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\n\n/* http://keith-wood.name/calendars.html\r\n  Calendars extras for jQuery v2.0.2.\r\n  Written by Keith Wood (wood.keith{at}optusnet.com.au) August 2009.\r\n  Available under the MIT (http://keith-wood.name/licence.html) license. \r\n  Please attribute the author if you use it. */\nvar assign = require('object-assign');\n\nvar main = require('./main');\n\nassign(main.regionalOptions[''], {\n  invalidArguments: 'Invalid arguments',\n  invalidFormat: 'Cannot format a date from another calendar',\n  missingNumberAt: 'Missing number at position {0}',\n  unknownNameAt: 'Unknown name at position {0}',\n  unexpectedLiteralAt: 'Unexpected literal at position {0}',\n  unexpectedText: 'Additional text found at end'\n});\nmain.local = main.regionalOptions[''];\nassign(main.cdate.prototype, {\n  /** Format this date.\r\n      Found in the <code>jquery.calendars.plus.js</code> module.\r\n      @memberof CDate\r\n      @param [format] {string} The date format to use (see <a href=\"BaseCalendar.html#formatDate\"><code>formatDate</code></a>).\r\n      @param [settings] {object} Options for the <code>formatDate</code> function.\r\n      @return {string} The formatted date. */\n  formatDate: function (format, settings) {\n    if (typeof format !== 'string') {\n      settings = format;\n      format = '';\n    }\n\n    return this._calendar.formatDate(format || '', this, settings);\n  }\n});\nassign(main.baseCalendar.prototype, {\n  UNIX_EPOCH: main.instance().newDate(1970, 1, 1).toJD(),\n  SECS_PER_DAY: 24 * 60 * 60,\n  TICKS_EPOCH: main.instance().jdEpoch,\n  // 1 January 0001 CE\n  TICKS_PER_DAY: 24 * 60 * 60 * 10000000,\n\n  /** Date form for ATOM (RFC 3339/ISO 8601).\r\n      Found in the <code>jquery.calendars.plus.js</code> module.\r\n      @memberof BaseCalendar */\n  ATOM: 'yyyy-mm-dd',\n\n  /** Date form for cookies.\r\n      Found in the <code>jquery.calendars.plus.js</code> module.\r\n      @memberof BaseCalendar */\n  COOKIE: 'D, dd M yyyy',\n\n  /** Date form for full date.\r\n      Found in the <code>jquery.calendars.plus.js</code> module.\r\n      @memberof BaseCalendar */\n  FULL: 'DD, MM d, yyyy',\n\n  /** Date form for ISO 8601.\r\n      Found in the <code>jquery.calendars.plus.js</code> module.\r\n      @memberof BaseCalendar */\n  ISO_8601: 'yyyy-mm-dd',\n\n  /** Date form for Julian date.\r\n      Found in the <code>jquery.calendars.plus.js</code> module.\r\n      @memberof BaseCalendar */\n  JULIAN: 'J',\n\n  /** Date form for RFC 822.\r\n      Found in the <code>jquery.calendars.plus.js</code> module.\r\n      @memberof BaseCalendar */\n  RFC_822: 'D, d M yy',\n\n  /** Date form for RFC 850.\r\n      Found in the <code>jquery.calendars.plus.js</code> module.\r\n      @memberof BaseCalendar */\n  RFC_850: 'DD, dd-M-yy',\n\n  /** Date form for RFC 1036.\r\n      Found in the <code>jquery.calendars.plus.js</code> module.\r\n      @memberof BaseCalendar */\n  RFC_1036: 'D, d M yy',\n\n  /** Date form for RFC 1123.\r\n      Found in the <code>jquery.calendars.plus.js</code> module.\r\n      @memberof BaseCalendar */\n  RFC_1123: 'D, d M yyyy',\n\n  /** Date form for RFC 2822.\r\n      Found in the <code>jquery.calendars.plus.js</code> module.\r\n      @memberof BaseCalendar */\n  RFC_2822: 'D, d M yyyy',\n\n  /** Date form for RSS (RFC 822).\r\n      Found in the <code>jquery.calendars.plus.js</code> module.\r\n      @memberof BaseCalendar */\n  RSS: 'D, d M yy',\n\n  /** Date form for Windows ticks.\r\n      Found in the <code>jquery.calendars.plus.js</code> module.\r\n      @memberof BaseCalendar */\n  TICKS: '!',\n\n  /** Date form for Unix timestamp.\r\n      Found in the <code>jquery.calendars.plus.js</code> module.\r\n      @memberof BaseCalendar */\n  TIMESTAMP: '@',\n\n  /** Date form for W3c (ISO 8601).\r\n      Found in the <code>jquery.calendars.plus.js</code> module.\r\n      @memberof BaseCalendar */\n  W3C: 'yyyy-mm-dd',\n\n  /** Format a date object into a string value.\r\n      The format can be combinations of the following:\r\n      <ul>\r\n      <li>d  - day of month (no leading zero)</li>\r\n      <li>dd - day of month (two digit)</li>\r\n      <li>o  - day of year (no leading zeros)</li>\r\n      <li>oo - day of year (three digit)</li>\r\n      <li>D  - day name short</li>\r\n      <li>DD - day name long</li>\r\n      <li>w  - week of year (no leading zero)</li>\r\n      <li>ww - week of year (two digit)</li>\r\n      <li>m  - month of year (no leading zero)</li>\r\n      <li>mm - month of year (two digit)</li>\r\n      <li>M  - month name short</li>\r\n      <li>MM - month name long</li>\r\n      <li>yy - year (two digit)</li>\r\n      <li>yyyy - year (four digit)</li>\r\n      <li>YYYY - formatted year</li>\r\n      <li>J  - Julian date (days since January 1, 4713 BCE Greenwich noon)</li>\r\n      <li>@  - Unix timestamp (s since 01/01/1970)</li>\r\n      <li>!  - Windows ticks (100ns since 01/01/0001)</li>\r\n      <li>'...' - literal text</li>\r\n      <li>'' - single quote</li>\r\n      </ul>\r\n      Found in the <code>jquery.calendars.plus.js</code> module.\r\n      @memberof BaseCalendar\r\n      @param [format] {string} The desired format of the date (defaults to calendar format).\r\n      @param date {CDate} The date value to format.\r\n      @param [settings] {object} Addition options, whose attributes include:\r\n      @property [dayNamesShort] {string[]} Abbreviated names of the days from Sunday.\r\n      @property [dayNames] {string[]} Names of the days from Sunday.\r\n      @property [monthNamesShort] {string[]} Abbreviated names of the months.\r\n      @property [monthNames] {string[]} Names of the months.\r\n      @property [calculateWeek] {CalendarsPickerCalculateWeek} Function that determines week of the year.\r\n      @property [localNumbers=false] {boolean} <code>true</code> to localise numbers (if available),\r\n                <code>false</code> to use normal Arabic numerals.\r\n      @return {string} The date in the above format.\r\n      @throws Errors if the date is from a different calendar. */\n  formatDate: function (format, date, settings) {\n    if (typeof format !== 'string') {\n      settings = date;\n      date = format;\n      format = '';\n    }\n\n    if (!date) {\n      return '';\n    }\n\n    if (date.calendar() !== this) {\n      throw main.local.invalidFormat || main.regionalOptions[''].invalidFormat;\n    }\n\n    format = format || this.local.dateFormat;\n    settings = settings || {};\n    var dayNamesShort = settings.dayNamesShort || this.local.dayNamesShort;\n    var dayNames = settings.dayNames || this.local.dayNames;\n    var monthNumbers = settings.monthNumbers || this.local.monthNumbers;\n    var monthNamesShort = settings.monthNamesShort || this.local.monthNamesShort;\n    var monthNames = settings.monthNames || this.local.monthNames;\n    var calculateWeek = settings.calculateWeek || this.local.calculateWeek; // Check whether a format character is doubled\n\n    var doubled = function (match, step) {\n      var matches = 1;\n\n      while (iFormat + matches < format.length && format.charAt(iFormat + matches) === match) {\n        matches++;\n      }\n\n      iFormat += matches - 1;\n      return Math.floor(matches / (step || 1)) > 1;\n    }; // Format a number, with leading zeroes if necessary\n\n\n    var formatNumber = function (match, value, len, step) {\n      var num = '' + value;\n\n      if (doubled(match, step)) {\n        while (num.length < len) {\n          num = '0' + num;\n        }\n      }\n\n      return num;\n    }; // Format a name, short or long as requested\n\n\n    var formatName = function (match, value, shortNames, longNames) {\n      return doubled(match) ? longNames[value] : shortNames[value];\n    }; // Format month number\n    // (e.g. Chinese calendar needs to account for intercalary months)\n\n\n    var calendar = this;\n\n    var formatMonth = function (date) {\n      return typeof monthNumbers === 'function' ? monthNumbers.call(calendar, date, doubled('m')) : localiseNumbers(formatNumber('m', date.month(), 2));\n    }; // Format a month name, short or long as requested\n\n\n    var formatMonthName = function (date, useLongName) {\n      if (useLongName) {\n        return typeof monthNames === 'function' ? monthNames.call(calendar, date) : monthNames[date.month() - calendar.minMonth];\n      } else {\n        return typeof monthNamesShort === 'function' ? monthNamesShort.call(calendar, date) : monthNamesShort[date.month() - calendar.minMonth];\n      }\n    }; // Localise numbers if requested and available\n\n\n    var digits = this.local.digits;\n\n    var localiseNumbers = function (value) {\n      return settings.localNumbers && digits ? digits(value) : value;\n    };\n\n    var output = '';\n    var literal = false;\n\n    for (var iFormat = 0; iFormat < format.length; iFormat++) {\n      if (literal) {\n        if (format.charAt(iFormat) === \"'\" && !doubled(\"'\")) {\n          literal = false;\n        } else {\n          output += format.charAt(iFormat);\n        }\n      } else {\n        switch (format.charAt(iFormat)) {\n          case 'd':\n            output += localiseNumbers(formatNumber('d', date.day(), 2));\n            break;\n\n          case 'D':\n            output += formatName('D', date.dayOfWeek(), dayNamesShort, dayNames);\n            break;\n\n          case 'o':\n            output += formatNumber('o', date.dayOfYear(), 3);\n            break;\n\n          case 'w':\n            output += formatNumber('w', date.weekOfYear(), 2);\n            break;\n\n          case 'm':\n            output += formatMonth(date);\n            break;\n\n          case 'M':\n            output += formatMonthName(date, doubled('M'));\n            break;\n\n          case 'y':\n            output += doubled('y', 2) ? date.year() : (date.year() % 100 < 10 ? '0' : '') + date.year() % 100;\n            break;\n\n          case 'Y':\n            doubled('Y', 2);\n            output += date.formatYear();\n            break;\n\n          case 'J':\n            output += date.toJD();\n            break;\n\n          case '@':\n            output += (date.toJD() - this.UNIX_EPOCH) * this.SECS_PER_DAY;\n            break;\n\n          case '!':\n            output += (date.toJD() - this.TICKS_EPOCH) * this.TICKS_PER_DAY;\n            break;\n\n          case \"'\":\n            if (doubled(\"'\")) {\n              output += \"'\";\n            } else {\n              literal = true;\n            }\n\n            break;\n\n          default:\n            output += format.charAt(iFormat);\n        }\n      }\n    }\n\n    return output;\n  },\n\n  /** Parse a string value into a date object.\r\n      See <a href=\"#formatDate\"><code>formatDate</code></a> for the possible formats, plus:\r\n      <ul>\r\n      <li>* - ignore rest of string</li>\r\n      </ul>\r\n      Found in the <code>jquery.calendars.plus.js</code> module.\r\n      @memberof BaseCalendar\r\n      @param format {string} The expected format of the date ('' for default calendar format).\r\n      @param value {string} The date in the above format.\r\n      @param [settings] {object} Additional options whose attributes include:\r\n      @property [shortYearCutoff] {number} The cutoff year for determining the century.\r\n      @property [dayNamesShort] {string[]} Abbreviated names of the days from Sunday.\r\n      @property [dayNames] {string[]} Names of the days from Sunday.\r\n      @property [monthNamesShort] {string[]} Abbreviated names of the months.\r\n      @property [monthNames] {string[]} Names of the months.\r\n      @return {CDate} The extracted date value or <code>null</code> if value is blank.\r\n      @throws Errors if the format and/or value are missing,\r\n              if the value doesn't match the format, or if the date is invalid. */\n  parseDate: function (format, value, settings) {\n    if (value == null) {\n      throw main.local.invalidArguments || main.regionalOptions[''].invalidArguments;\n    }\n\n    value = typeof value === 'object' ? value.toString() : value + '';\n\n    if (value === '') {\n      return null;\n    }\n\n    format = format || this.local.dateFormat;\n    settings = settings || {};\n    var shortYearCutoff = settings.shortYearCutoff || this.shortYearCutoff;\n    shortYearCutoff = typeof shortYearCutoff !== 'string' ? shortYearCutoff : this.today().year() % 100 + parseInt(shortYearCutoff, 10);\n    var dayNamesShort = settings.dayNamesShort || this.local.dayNamesShort;\n    var dayNames = settings.dayNames || this.local.dayNames;\n    var parseMonth = settings.parseMonth || this.local.parseMonth;\n    var monthNumbers = settings.monthNumbers || this.local.monthNumbers;\n    var monthNamesShort = settings.monthNamesShort || this.local.monthNamesShort;\n    var monthNames = settings.monthNames || this.local.monthNames;\n    var jd = -1;\n    var year = -1;\n    var month = -1;\n    var day = -1;\n    var doy = -1;\n    var shortYear = false;\n    var literal = false; // Check whether a format character is doubled\n\n    var doubled = function (match, step) {\n      var matches = 1;\n\n      while (iFormat + matches < format.length && format.charAt(iFormat + matches) === match) {\n        matches++;\n      }\n\n      iFormat += matches - 1;\n      return Math.floor(matches / (step || 1)) > 1;\n    }; // Extract a number from the string value\n\n\n    var getNumber = function (match, step) {\n      var isDoubled = doubled(match, step);\n      var size = [2, 3, isDoubled ? 4 : 2, isDoubled ? 4 : 2, 10, 11, 20]['oyYJ@!'.indexOf(match) + 1];\n      var digits = new RegExp('^-?\\\\d{1,' + size + '}');\n      var num = value.substring(iValue).match(digits);\n\n      if (!num) {\n        throw (main.local.missingNumberAt || main.regionalOptions[''].missingNumberAt).replace(/\\{0\\}/, iValue);\n      }\n\n      iValue += num[0].length;\n      return parseInt(num[0], 10);\n    }; // Extract a month number from the string value\n\n\n    var calendar = this;\n\n    var getMonthNumber = function () {\n      if (typeof monthNumbers === 'function') {\n        doubled('m'); // update iFormat\n\n        var month = monthNumbers.call(calendar, value.substring(iValue));\n        iValue += month.length;\n        return month;\n      }\n\n      return getNumber('m');\n    }; // Extract a name from the string value and convert to an index\n\n\n    var getName = function (match, shortNames, longNames, step) {\n      var names = doubled(match, step) ? longNames : shortNames;\n\n      for (var i = 0; i < names.length; i++) {\n        if (value.substr(iValue, names[i].length).toLowerCase() === names[i].toLowerCase()) {\n          iValue += names[i].length;\n          return i + calendar.minMonth;\n        }\n      }\n\n      throw (main.local.unknownNameAt || main.regionalOptions[''].unknownNameAt).replace(/\\{0\\}/, iValue);\n    }; // Extract a month number from the string value\n\n\n    var getMonthName = function () {\n      if (typeof monthNames === 'function') {\n        var month = doubled('M') ? monthNames.call(calendar, value.substring(iValue)) : monthNamesShort.call(calendar, value.substring(iValue));\n        iValue += month.length;\n        return month;\n      }\n\n      return getName('M', monthNamesShort, monthNames);\n    }; // Confirm that a literal character matches the string value\n\n\n    var checkLiteral = function () {\n      if (value.charAt(iValue) !== format.charAt(iFormat)) {\n        throw (main.local.unexpectedLiteralAt || main.regionalOptions[''].unexpectedLiteralAt).replace(/\\{0\\}/, iValue);\n      }\n\n      iValue++;\n    };\n\n    var iValue = 0;\n\n    for (var iFormat = 0; iFormat < format.length; iFormat++) {\n      if (literal) {\n        if (format.charAt(iFormat) === \"'\" && !doubled(\"'\")) {\n          literal = false;\n        } else {\n          checkLiteral();\n        }\n      } else {\n        switch (format.charAt(iFormat)) {\n          case 'd':\n            day = getNumber('d');\n            break;\n\n          case 'D':\n            getName('D', dayNamesShort, dayNames);\n            break;\n\n          case 'o':\n            doy = getNumber('o');\n            break;\n\n          case 'w':\n            getNumber('w');\n            break;\n\n          case 'm':\n            month = getMonthNumber();\n            break;\n\n          case 'M':\n            month = getMonthName();\n            break;\n\n          case 'y':\n            var iSave = iFormat;\n            shortYear = !doubled('y', 2);\n            iFormat = iSave;\n            year = getNumber('y', 2);\n            break;\n\n          case 'Y':\n            year = getNumber('Y', 2);\n            break;\n\n          case 'J':\n            jd = getNumber('J') + 0.5;\n\n            if (value.charAt(iValue) === '.') {\n              iValue++;\n              getNumber('J');\n            }\n\n            break;\n\n          case '@':\n            jd = getNumber('@') / this.SECS_PER_DAY + this.UNIX_EPOCH;\n            break;\n\n          case '!':\n            jd = getNumber('!') / this.TICKS_PER_DAY + this.TICKS_EPOCH;\n            break;\n\n          case '*':\n            iValue = value.length;\n            break;\n\n          case \"'\":\n            if (doubled(\"'\")) {\n              checkLiteral();\n            } else {\n              literal = true;\n            }\n\n            break;\n\n          default:\n            checkLiteral();\n        }\n      }\n    }\n\n    if (iValue < value.length) {\n      throw main.local.unexpectedText || main.regionalOptions[''].unexpectedText;\n    }\n\n    if (year === -1) {\n      year = this.today().year();\n    } else if (year < 100 && shortYear) {\n      year += shortYearCutoff === -1 ? 1900 : this.today().year() - this.today().year() % 100 - (year <= shortYearCutoff ? 0 : 100);\n    }\n\n    if (typeof month === 'string') {\n      month = parseMonth.call(this, year, month);\n    }\n\n    if (doy > -1) {\n      month = 1;\n      day = doy;\n\n      for (var dim = this.daysInMonth(year, month); day > dim; dim = this.daysInMonth(year, month)) {\n        month++;\n        day -= dim;\n      }\n    }\n\n    return jd > -1 ? this.fromJD(jd) : this.newDate(year, month, day);\n  },\n\n  /** A date may be specified as an exact value or a relative one.\r\n      Found in the <code>jquery.calendars.plus.js</code> module.\r\n      @memberof BaseCalendar\r\n      @param dateSpec {CDate|number|string} The date as an object or string in the given format or\r\n              an offset - numeric days from today, or string amounts and periods, e.g. '+1m +2w'.\r\n      @param defaultDate {CDate} The date to use if no other supplied, may be <code>null</code>.\r\n      @param currentDate {CDate} The current date as a possible basis for relative dates,\r\n              if <code>null</code> today is used (optional)\r\n      @param [dateFormat] {string} The expected date format - see <a href=\"#formatDate\"><code>formatDate</code></a>.\r\n      @param [settings] {object} Additional options whose attributes include:\r\n      @property [shortYearCutoff] {number} The cutoff year for determining the century.\r\n      @property [dayNamesShort] {string[]} Abbreviated names of the days from Sunday.\r\n      @property [dayNames] {string[]} Names of the days from Sunday.\r\n      @property [monthNamesShort] {string[]} Abbreviated names of the months.\r\n      @property [monthNames] {string[]} Names of the months.\r\n      @return {CDate} The decoded date. */\n  determineDate: function (dateSpec, defaultDate, currentDate, dateFormat, settings) {\n    if (currentDate && typeof currentDate !== 'object') {\n      settings = dateFormat;\n      dateFormat = currentDate;\n      currentDate = null;\n    }\n\n    if (typeof dateFormat !== 'string') {\n      settings = dateFormat;\n      dateFormat = '';\n    }\n\n    var calendar = this;\n\n    var offsetString = function (offset) {\n      try {\n        return calendar.parseDate(dateFormat, offset, settings);\n      } catch (e) {// Ignore\n      }\n\n      offset = offset.toLowerCase();\n      var date = (offset.match(/^c/) && currentDate ? currentDate.newDate() : null) || calendar.today();\n      var pattern = /([+-]?[0-9]+)\\s*(d|w|m|y)?/g;\n      var matches = pattern.exec(offset);\n\n      while (matches) {\n        date.add(parseInt(matches[1], 10), matches[2] || 'd');\n        matches = pattern.exec(offset);\n      }\n\n      return date;\n    };\n\n    defaultDate = defaultDate ? defaultDate.newDate() : null;\n    dateSpec = dateSpec == null ? defaultDate : typeof dateSpec === 'string' ? offsetString(dateSpec) : typeof dateSpec === 'number' ? isNaN(dateSpec) || dateSpec === Infinity || dateSpec === -Infinity ? defaultDate : calendar.today().add(dateSpec, 'd') : calendar.newDate(dateSpec);\n    return dateSpec;\n  }\n});","map":{"version":3,"sources":["C:/Users/mikke/VSC/fantasy-django-react/fantasy-django/fantasy-react-app/node_modules/world-calendars/dist/plus.js"],"names":["assign","require","main","regionalOptions","invalidArguments","invalidFormat","missingNumberAt","unknownNameAt","unexpectedLiteralAt","unexpectedText","local","cdate","prototype","formatDate","format","settings","_calendar","baseCalendar","UNIX_EPOCH","instance","newDate","toJD","SECS_PER_DAY","TICKS_EPOCH","jdEpoch","TICKS_PER_DAY","ATOM","COOKIE","FULL","ISO_8601","JULIAN","RFC_822","RFC_850","RFC_1036","RFC_1123","RFC_2822","RSS","TICKS","TIMESTAMP","W3C","date","calendar","dateFormat","dayNamesShort","dayNames","monthNumbers","monthNamesShort","monthNames","calculateWeek","doubled","match","step","matches","iFormat","length","charAt","Math","floor","formatNumber","value","len","num","formatName","shortNames","longNames","formatMonth","call","localiseNumbers","month","formatMonthName","useLongName","minMonth","digits","localNumbers","output","literal","day","dayOfWeek","dayOfYear","weekOfYear","year","formatYear","parseDate","toString","shortYearCutoff","today","parseInt","parseMonth","jd","doy","shortYear","getNumber","isDoubled","size","indexOf","RegExp","substring","iValue","replace","getMonthNumber","getName","names","i","substr","toLowerCase","getMonthName","checkLiteral","iSave","dim","daysInMonth","fromJD","determineDate","dateSpec","defaultDate","currentDate","offsetString","offset","e","pattern","exec","add","isNaN","Infinity"],"mappings":"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","sourcesContent":["/*\r\n * World Calendars\r\n * https://github.com/alexcjohnson/world-calendars\r\n *\r\n * Batch-converted from kbwood/calendars\r\n * Many thanks to Keith Wood and all of the contributors to the original project!\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n\r\n﻿/* http://keith-wood.name/calendars.html\r\n   Calendars extras for jQuery v2.0.2.\r\n   Written by Keith Wood (wood.keith{at}optusnet.com.au) August 2009.\r\n   Available under the MIT (http://keith-wood.name/licence.html) license. \r\n   Please attribute the author if you use it. */\r\n\r\nvar assign = require('object-assign');\r\nvar main = require('./main');\r\n\r\n\r\nassign(main.regionalOptions[''], {\r\n    invalidArguments: 'Invalid arguments',\r\n    invalidFormat: 'Cannot format a date from another calendar',\r\n    missingNumberAt: 'Missing number at position {0}',\r\n    unknownNameAt: 'Unknown name at position {0}',\r\n    unexpectedLiteralAt: 'Unexpected literal at position {0}',\r\n    unexpectedText: 'Additional text found at end'\r\n});\r\nmain.local = main.regionalOptions[''];\r\n\r\nassign(main.cdate.prototype, {\r\n\r\n    /** Format this date.\r\n        Found in the <code>jquery.calendars.plus.js</code> module.\r\n        @memberof CDate\r\n        @param [format] {string} The date format to use (see <a href=\"BaseCalendar.html#formatDate\"><code>formatDate</code></a>).\r\n        @param [settings] {object} Options for the <code>formatDate</code> function.\r\n        @return {string} The formatted date. */\r\n    formatDate: function(format, settings) {\r\n        if (typeof format !== 'string') {\r\n            settings = format;\r\n            format = '';\r\n        }\r\n        return this._calendar.formatDate(format || '', this, settings);\r\n    }\r\n});\r\n\r\nassign(main.baseCalendar.prototype, {\r\n\r\n    UNIX_EPOCH: main.instance().newDate(1970, 1, 1).toJD(),\r\n    SECS_PER_DAY: 24 * 60 * 60,\r\n    TICKS_EPOCH: main.instance().jdEpoch, // 1 January 0001 CE\r\n    TICKS_PER_DAY: 24 * 60 * 60 * 10000000,\r\n\r\n    /** Date form for ATOM (RFC 3339/ISO 8601).\r\n        Found in the <code>jquery.calendars.plus.js</code> module.\r\n        @memberof BaseCalendar */\r\n    ATOM: 'yyyy-mm-dd',\r\n    /** Date form for cookies.\r\n        Found in the <code>jquery.calendars.plus.js</code> module.\r\n        @memberof BaseCalendar */\r\n    COOKIE: 'D, dd M yyyy',\r\n    /** Date form for full date.\r\n        Found in the <code>jquery.calendars.plus.js</code> module.\r\n        @memberof BaseCalendar */\r\n    FULL: 'DD, MM d, yyyy',\r\n    /** Date form for ISO 8601.\r\n        Found in the <code>jquery.calendars.plus.js</code> module.\r\n        @memberof BaseCalendar */\r\n    ISO_8601: 'yyyy-mm-dd',\r\n    /** Date form for Julian date.\r\n        Found in the <code>jquery.calendars.plus.js</code> module.\r\n        @memberof BaseCalendar */\r\n    JULIAN: 'J',\r\n    /** Date form for RFC 822.\r\n        Found in the <code>jquery.calendars.plus.js</code> module.\r\n        @memberof BaseCalendar */\r\n    RFC_822: 'D, d M yy',\r\n    /** Date form for RFC 850.\r\n        Found in the <code>jquery.calendars.plus.js</code> module.\r\n        @memberof BaseCalendar */\r\n    RFC_850: 'DD, dd-M-yy',\r\n    /** Date form for RFC 1036.\r\n        Found in the <code>jquery.calendars.plus.js</code> module.\r\n        @memberof BaseCalendar */\r\n    RFC_1036: 'D, d M yy',\r\n    /** Date form for RFC 1123.\r\n        Found in the <code>jquery.calendars.plus.js</code> module.\r\n        @memberof BaseCalendar */\r\n    RFC_1123: 'D, d M yyyy',\r\n    /** Date form for RFC 2822.\r\n        Found in the <code>jquery.calendars.plus.js</code> module.\r\n        @memberof BaseCalendar */\r\n    RFC_2822: 'D, d M yyyy',\r\n    /** Date form for RSS (RFC 822).\r\n        Found in the <code>jquery.calendars.plus.js</code> module.\r\n        @memberof BaseCalendar */\r\n    RSS: 'D, d M yy',\r\n    /** Date form for Windows ticks.\r\n        Found in the <code>jquery.calendars.plus.js</code> module.\r\n        @memberof BaseCalendar */\r\n    TICKS: '!',\r\n    /** Date form for Unix timestamp.\r\n        Found in the <code>jquery.calendars.plus.js</code> module.\r\n        @memberof BaseCalendar */\r\n    TIMESTAMP: '@',\r\n    /** Date form for W3c (ISO 8601).\r\n        Found in the <code>jquery.calendars.plus.js</code> module.\r\n        @memberof BaseCalendar */\r\n    W3C: 'yyyy-mm-dd',\r\n\r\n    /** Format a date object into a string value.\r\n        The format can be combinations of the following:\r\n        <ul>\r\n        <li>d  - day of month (no leading zero)</li>\r\n        <li>dd - day of month (two digit)</li>\r\n        <li>o  - day of year (no leading zeros)</li>\r\n        <li>oo - day of year (three digit)</li>\r\n        <li>D  - day name short</li>\r\n        <li>DD - day name long</li>\r\n        <li>w  - week of year (no leading zero)</li>\r\n        <li>ww - week of year (two digit)</li>\r\n        <li>m  - month of year (no leading zero)</li>\r\n        <li>mm - month of year (two digit)</li>\r\n        <li>M  - month name short</li>\r\n        <li>MM - month name long</li>\r\n        <li>yy - year (two digit)</li>\r\n        <li>yyyy - year (four digit)</li>\r\n        <li>YYYY - formatted year</li>\r\n        <li>J  - Julian date (days since January 1, 4713 BCE Greenwich noon)</li>\r\n        <li>@  - Unix timestamp (s since 01/01/1970)</li>\r\n        <li>!  - Windows ticks (100ns since 01/01/0001)</li>\r\n        <li>'...' - literal text</li>\r\n        <li>'' - single quote</li>\r\n        </ul>\r\n        Found in the <code>jquery.calendars.plus.js</code> module.\r\n        @memberof BaseCalendar\r\n        @param [format] {string} The desired format of the date (defaults to calendar format).\r\n        @param date {CDate} The date value to format.\r\n        @param [settings] {object} Addition options, whose attributes include:\r\n        @property [dayNamesShort] {string[]} Abbreviated names of the days from Sunday.\r\n        @property [dayNames] {string[]} Names of the days from Sunday.\r\n        @property [monthNamesShort] {string[]} Abbreviated names of the months.\r\n        @property [monthNames] {string[]} Names of the months.\r\n        @property [calculateWeek] {CalendarsPickerCalculateWeek} Function that determines week of the year.\r\n        @property [localNumbers=false] {boolean} <code>true</code> to localise numbers (if available),\r\n                  <code>false</code> to use normal Arabic numerals.\r\n        @return {string} The date in the above format.\r\n        @throws Errors if the date is from a different calendar. */\r\n    formatDate: function(format, date, settings) {\r\n        if (typeof format !== 'string') {\r\n            settings = date;\r\n            date = format;\r\n            format = '';\r\n        }\r\n        if (!date) {\r\n            return '';\r\n        }\r\n        if (date.calendar() !== this) {\r\n            throw main.local.invalidFormat || main.regionalOptions[''].invalidFormat;\r\n        }\r\n        format = format || this.local.dateFormat;\r\n        settings = settings || {};\r\n        var dayNamesShort = settings.dayNamesShort || this.local.dayNamesShort;\r\n        var dayNames = settings.dayNames || this.local.dayNames;\r\n        var monthNumbers = settings.monthNumbers || this.local.monthNumbers;\r\n        var monthNamesShort = settings.monthNamesShort || this.local.monthNamesShort;\r\n        var monthNames = settings.monthNames || this.local.monthNames;\r\n        var calculateWeek = settings.calculateWeek || this.local.calculateWeek;\r\n        // Check whether a format character is doubled\r\n        var doubled = function(match, step) {\r\n            var matches = 1;\r\n            while (iFormat + matches < format.length && format.charAt(iFormat + matches) === match) {\r\n                matches++;\r\n            }\r\n            iFormat += matches - 1;\r\n            return Math.floor(matches / (step || 1)) > 1;\r\n        };\r\n        // Format a number, with leading zeroes if necessary\r\n        var formatNumber = function(match, value, len, step) {\r\n            var num = '' + value;\r\n            if (doubled(match, step)) {\r\n                while (num.length < len) {\r\n                    num = '0' + num;\r\n                }\r\n            }\r\n            return num;\r\n        };\r\n        // Format a name, short or long as requested\r\n        var formatName = function(match, value, shortNames, longNames) {\r\n            return (doubled(match) ? longNames[value] : shortNames[value]);\r\n        };\r\n        // Format month number\r\n        // (e.g. Chinese calendar needs to account for intercalary months)\r\n        var calendar = this;\r\n        var formatMonth = function(date) {\r\n            return (typeof monthNumbers === 'function') ?\r\n                monthNumbers.call(calendar, date, doubled('m')) :\r\n                localiseNumbers(formatNumber('m', date.month(), 2));\r\n        };\r\n        // Format a month name, short or long as requested\r\n        var formatMonthName = function(date, useLongName) {\r\n            if (useLongName) {\r\n                return (typeof monthNames === 'function') ?\r\n                    monthNames.call(calendar, date) :\r\n                    monthNames[date.month() - calendar.minMonth];\r\n            } else {\r\n                return (typeof monthNamesShort === 'function') ?\r\n                    monthNamesShort.call(calendar, date) :\r\n                    monthNamesShort[date.month() - calendar.minMonth];\r\n            }\r\n        };\r\n        // Localise numbers if requested and available\r\n        var digits = this.local.digits;\r\n        var localiseNumbers = function(value) {\r\n            return (settings.localNumbers && digits ? digits(value) : value);\r\n        };\r\n        var output = '';\r\n        var literal = false;\r\n        for (var iFormat = 0; iFormat < format.length; iFormat++) {\r\n            if (literal) {\r\n                if (format.charAt(iFormat) === \"'\" && !doubled(\"'\")) {\r\n                    literal = false;\r\n                }\r\n                else {\r\n                    output += format.charAt(iFormat);\r\n                }\r\n            }\r\n            else {\r\n                switch (format.charAt(iFormat)) {\r\n                    case 'd': output += localiseNumbers(formatNumber('d', date.day(), 2)); break;\r\n                    case 'D': output += formatName('D', date.dayOfWeek(),\r\n                        dayNamesShort, dayNames); break;\r\n                    case 'o': output += formatNumber('o', date.dayOfYear(), 3); break;\r\n                    case 'w': output += formatNumber('w', date.weekOfYear(), 2); break;\r\n                    case 'm': output += formatMonth(date); break;\r\n                    case 'M': output += formatMonthName(date, doubled('M')); break;\r\n                    case 'y':\r\n                        output += (doubled('y', 2) ? date.year() :\r\n                            (date.year() % 100 < 10 ? '0' : '') + date.year() % 100);\r\n                        break;\r\n                    case 'Y':\r\n                        doubled('Y', 2);\r\n                        output += date.formatYear();\r\n                        break;\r\n                    case 'J': output += date.toJD(); break;\r\n                    case '@': output += (date.toJD() - this.UNIX_EPOCH) * this.SECS_PER_DAY; break;\r\n                    case '!': output += (date.toJD() - this.TICKS_EPOCH) * this.TICKS_PER_DAY; break;\r\n                    case \"'\":\r\n                        if (doubled(\"'\")) {\r\n                            output += \"'\";\r\n                        }\r\n                        else {\r\n                            literal = true;\r\n                        }\r\n                        break;\r\n                    default:\r\n                        output += format.charAt(iFormat);\r\n                }\r\n            }\r\n        }\r\n        return output;\r\n    },\r\n\r\n    /** Parse a string value into a date object.\r\n        See <a href=\"#formatDate\"><code>formatDate</code></a> for the possible formats, plus:\r\n        <ul>\r\n        <li>* - ignore rest of string</li>\r\n        </ul>\r\n        Found in the <code>jquery.calendars.plus.js</code> module.\r\n        @memberof BaseCalendar\r\n        @param format {string} The expected format of the date ('' for default calendar format).\r\n        @param value {string} The date in the above format.\r\n        @param [settings] {object} Additional options whose attributes include:\r\n        @property [shortYearCutoff] {number} The cutoff year for determining the century.\r\n        @property [dayNamesShort] {string[]} Abbreviated names of the days from Sunday.\r\n        @property [dayNames] {string[]} Names of the days from Sunday.\r\n        @property [monthNamesShort] {string[]} Abbreviated names of the months.\r\n        @property [monthNames] {string[]} Names of the months.\r\n        @return {CDate} The extracted date value or <code>null</code> if value is blank.\r\n        @throws Errors if the format and/or value are missing,\r\n                if the value doesn't match the format, or if the date is invalid. */\r\n    parseDate: function(format, value, settings) {\r\n        if (value == null) {\r\n            throw main.local.invalidArguments || main.regionalOptions[''].invalidArguments;\r\n        }\r\n        value = (typeof value === 'object' ? value.toString() : value + '');\r\n        if (value === '') {\r\n            return null;\r\n        }\r\n        format = format || this.local.dateFormat;\r\n        settings = settings || {};\r\n        var shortYearCutoff = settings.shortYearCutoff || this.shortYearCutoff;\r\n        shortYearCutoff = (typeof shortYearCutoff !== 'string' ? shortYearCutoff :\r\n            this.today().year() % 100 + parseInt(shortYearCutoff, 10));\r\n        var dayNamesShort = settings.dayNamesShort || this.local.dayNamesShort;\r\n        var dayNames = settings.dayNames || this.local.dayNames;\r\n        var parseMonth = settings.parseMonth || this.local.parseMonth;\r\n        var monthNumbers = settings.monthNumbers || this.local.monthNumbers;\r\n        var monthNamesShort = settings.monthNamesShort || this.local.monthNamesShort;\r\n        var monthNames = settings.monthNames || this.local.monthNames;\r\n        var jd = -1;\r\n        var year = -1;\r\n        var month = -1;\r\n        var day = -1;\r\n        var doy = -1;\r\n        var shortYear = false;\r\n        var literal = false;\r\n        // Check whether a format character is doubled\r\n        var doubled = function(match, step) {\r\n            var matches = 1;\r\n            while (iFormat + matches < format.length && format.charAt(iFormat + matches) === match) {\r\n                matches++;\r\n            }\r\n            iFormat += matches - 1;\r\n            return Math.floor(matches / (step || 1)) > 1;\r\n        };\r\n        // Extract a number from the string value\r\n        var getNumber = function(match, step) {\r\n            var isDoubled = doubled(match, step);\r\n            var size = [2, 3, isDoubled ? 4 : 2, isDoubled ? 4 : 2, 10, 11, 20]['oyYJ@!'.indexOf(match) + 1];\r\n            var digits = new RegExp('^-?\\\\d{1,' + size + '}');\r\n            var num = value.substring(iValue).match(digits);\r\n            if (!num) {\r\n                throw (main.local.missingNumberAt || main.regionalOptions[''].missingNumberAt).\r\n                    replace(/\\{0\\}/, iValue);\r\n            }\r\n            iValue += num[0].length;\r\n            return parseInt(num[0], 10);\r\n        };\r\n        // Extract a month number from the string value\r\n        var calendar = this;\r\n        var getMonthNumber = function() {\r\n            if (typeof monthNumbers === 'function') {\r\n                doubled('m');  // update iFormat\r\n                var month = monthNumbers.call(calendar, value.substring(iValue));\r\n                iValue += month.length;\r\n                return month;\r\n            }\r\n\r\n            return getNumber('m');\r\n        };\r\n        // Extract a name from the string value and convert to an index\r\n        var getName = function(match, shortNames, longNames, step) {\r\n            var names = (doubled(match, step) ? longNames : shortNames);\r\n            for (var i = 0; i < names.length; i++) {\r\n                if (value.substr(iValue, names[i].length).toLowerCase() === names[i].toLowerCase()) {\r\n                    iValue += names[i].length;\r\n                    return i + calendar.minMonth;\r\n                }\r\n            }\r\n            throw (main.local.unknownNameAt || main.regionalOptions[''].unknownNameAt).\r\n                replace(/\\{0\\}/, iValue);\r\n        };\r\n        // Extract a month number from the string value\r\n        var getMonthName = function() {\r\n            if (typeof monthNames === 'function') {\r\n                var month = doubled('M') ?\r\n                    monthNames.call(calendar, value.substring(iValue)) :\r\n                    monthNamesShort.call(calendar, value.substring(iValue));\r\n                iValue += month.length;\r\n                return month;\r\n            }\r\n\r\n            return getName('M', monthNamesShort, monthNames);\r\n        };\r\n        // Confirm that a literal character matches the string value\r\n        var checkLiteral = function() {\r\n            if (value.charAt(iValue) !== format.charAt(iFormat)) {\r\n                throw (main.local.unexpectedLiteralAt ||\r\n                    main.regionalOptions[''].unexpectedLiteralAt).replace(/\\{0\\}/, iValue);\r\n            }\r\n            iValue++;\r\n        };\r\n        var iValue = 0;\r\n        for (var iFormat = 0; iFormat < format.length; iFormat++) {\r\n            if (literal) {\r\n                if (format.charAt(iFormat) === \"'\" && !doubled(\"'\")) {\r\n                    literal = false;\r\n                }\r\n                else {\r\n                    checkLiteral();\r\n                }\r\n            }\r\n            else {\r\n                switch (format.charAt(iFormat)) {\r\n                    case 'd': day = getNumber('d'); break;\r\n                    case 'D': getName('D', dayNamesShort, dayNames); break;\r\n                    case 'o': doy = getNumber('o'); break;\r\n                    case 'w': getNumber('w'); break;\r\n                    case 'm': month = getMonthNumber(); break;\r\n                    case 'M': month = getMonthName(); break;\r\n                    case 'y':\r\n                        var iSave = iFormat;\r\n                        shortYear = !doubled('y', 2);\r\n                        iFormat = iSave;\r\n                        year = getNumber('y', 2);\r\n                        break;\r\n                    case 'Y': year = getNumber('Y', 2); break;\r\n                    case 'J':\r\n                        jd = getNumber('J') + 0.5;\r\n                        if (value.charAt(iValue) === '.') {\r\n                            iValue++;\r\n                            getNumber('J');\r\n                        }\r\n                        break;\r\n                    case '@': jd = getNumber('@') / this.SECS_PER_DAY + this.UNIX_EPOCH; break;\r\n                    case '!': jd = getNumber('!') / this.TICKS_PER_DAY + this.TICKS_EPOCH; break;\r\n                    case '*': iValue = value.length; break;\r\n                    case \"'\":\r\n                        if (doubled(\"'\")) {\r\n                            checkLiteral();\r\n                        }\r\n                        else {\r\n                            literal = true;\r\n                        }\r\n                        break;\r\n                    default: checkLiteral();\r\n                }\r\n            }\r\n        }\r\n        if (iValue < value.length) {\r\n            throw main.local.unexpectedText || main.regionalOptions[''].unexpectedText;\r\n        }\r\n        if (year === -1) {\r\n            year = this.today().year();\r\n        }\r\n        else if (year < 100 && shortYear) {\r\n            year += (shortYearCutoff === -1 ? 1900 : this.today().year() -\r\n                this.today().year() % 100 - (year <= shortYearCutoff ? 0 : 100));\r\n        }\r\n        if (typeof month === 'string') {\r\n            month = parseMonth.call(this, year, month);\r\n        }\r\n        if (doy > -1) {\r\n            month = 1;\r\n            day = doy;\r\n            for (var dim = this.daysInMonth(year, month); day > dim; dim = this.daysInMonth(year, month)) {\r\n                month++;\r\n                day -= dim;\r\n            }\r\n        }\r\n        return (jd > -1 ? this.fromJD(jd) : this.newDate(year, month, day));\r\n    },\r\n\r\n    /** A date may be specified as an exact value or a relative one.\r\n        Found in the <code>jquery.calendars.plus.js</code> module.\r\n        @memberof BaseCalendar\r\n        @param dateSpec {CDate|number|string} The date as an object or string in the given format or\r\n                an offset - numeric days from today, or string amounts and periods, e.g. '+1m +2w'.\r\n        @param defaultDate {CDate} The date to use if no other supplied, may be <code>null</code>.\r\n        @param currentDate {CDate} The current date as a possible basis for relative dates,\r\n                if <code>null</code> today is used (optional)\r\n        @param [dateFormat] {string} The expected date format - see <a href=\"#formatDate\"><code>formatDate</code></a>.\r\n        @param [settings] {object} Additional options whose attributes include:\r\n        @property [shortYearCutoff] {number} The cutoff year for determining the century.\r\n        @property [dayNamesShort] {string[]} Abbreviated names of the days from Sunday.\r\n        @property [dayNames] {string[]} Names of the days from Sunday.\r\n        @property [monthNamesShort] {string[]} Abbreviated names of the months.\r\n        @property [monthNames] {string[]} Names of the months.\r\n        @return {CDate} The decoded date. */\r\n    determineDate: function(dateSpec, defaultDate, currentDate, dateFormat, settings) {\r\n        if (currentDate && typeof currentDate !== 'object') {\r\n            settings = dateFormat;\r\n            dateFormat = currentDate;\r\n            currentDate = null;\r\n        }\r\n        if (typeof dateFormat !== 'string') {\r\n            settings = dateFormat;\r\n            dateFormat = '';\r\n        }\r\n        var calendar = this;\r\n        var offsetString = function(offset) {\r\n            try {\r\n                return calendar.parseDate(dateFormat, offset, settings);\r\n            }\r\n            catch (e) {\r\n                // Ignore\r\n            }\r\n            offset = offset.toLowerCase();\r\n            var date = (offset.match(/^c/) && currentDate ?\r\n                currentDate.newDate() : null) || calendar.today();\r\n            var pattern = /([+-]?[0-9]+)\\s*(d|w|m|y)?/g;\r\n            var matches = pattern.exec(offset);\r\n            while (matches) {\r\n                date.add(parseInt(matches[1], 10), matches[2] || 'd');\r\n                matches = pattern.exec(offset);\r\n            }\r\n            return date;\r\n        };\r\n        defaultDate = (defaultDate ? defaultDate.newDate() : null);\r\n        dateSpec = (dateSpec == null ? defaultDate :\r\n            (typeof dateSpec === 'string' ? offsetString(dateSpec) : (typeof dateSpec === 'number' ?\r\n            (isNaN(dateSpec) || dateSpec === Infinity || dateSpec === -Infinity ? defaultDate :\r\n            calendar.today().add(dateSpec, 'd')) : calendar.newDate(dateSpec))));\r\n        return dateSpec;\r\n    }\r\n});\r\n\r\n"]},"metadata":{},"sourceType":"script"}