{"ast":null,"code":"'use strict';\n\nvar d3 = require('@plotly/d3');\n\nvar tinycolor = require('tinycolor2');\n\nvar isNumeric = require('fast-isnumeric');\n\nvar Lib = require('../../lib');\n\nvar Color = require('../color');\n\nvar isValidScale = require('./scales').isValid;\n\nfunction hasColorscale(trace, containerStr, colorKey) {\n  var container = containerStr ? Lib.nestedProperty(trace, containerStr).get() || {} : trace;\n  var color = container[colorKey || 'color'];\n  var isArrayWithOneNumber = false;\n\n  if (Lib.isArrayOrTypedArray(color)) {\n    for (var i = 0; i < color.length; i++) {\n      if (isNumeric(color[i])) {\n        isArrayWithOneNumber = true;\n        break;\n      }\n    }\n  }\n\n  return Lib.isPlainObject(container) && (isArrayWithOneNumber || container.showscale === true || isNumeric(container.cmin) && isNumeric(container.cmax) || isValidScale(container.colorscale) || Lib.isPlainObject(container.colorbar));\n}\n\nvar constantAttrs = ['showscale', 'autocolorscale', 'colorscale', 'reversescale', 'colorbar'];\nvar letterAttrs = ['min', 'max', 'mid', 'auto'];\n/**\r\n * Extract 'c' / 'z', trace / color axis colorscale options\r\n *\r\n * Note that it would be nice to replace all z* with c* equivalents in v3\r\n *\r\n * @param {object} cont : attribute container\r\n * @return {object}:\r\n *  - min: cmin or zmin\r\n *  - max: cmax or zmax\r\n *  - mid: cmid or zmid\r\n *  - auto: cauto or zauto\r\n *  - *scale: *scale attrs\r\n *  - colorbar: colorbar\r\n *  - _sync: function syncing attr and underscore dual (useful when calc'ing min/max)\r\n */\n\nfunction extractOpts(cont) {\n  var colorAx = cont._colorAx;\n  var cont2 = colorAx ? colorAx : cont;\n  var out = {};\n  var cLetter;\n  var i, k;\n\n  for (i = 0; i < constantAttrs.length; i++) {\n    k = constantAttrs[i];\n    out[k] = cont2[k];\n  }\n\n  if (colorAx) {\n    cLetter = 'c';\n\n    for (i = 0; i < letterAttrs.length; i++) {\n      k = letterAttrs[i];\n      out[k] = cont2['c' + k];\n    }\n  } else {\n    var k2;\n\n    for (i = 0; i < letterAttrs.length; i++) {\n      k = letterAttrs[i];\n      k2 = 'c' + k;\n\n      if (k2 in cont2) {\n        out[k] = cont2[k2];\n        continue;\n      }\n\n      k2 = 'z' + k;\n\n      if (k2 in cont2) {\n        out[k] = cont2[k2];\n      }\n    }\n\n    cLetter = k2.charAt(0);\n  }\n\n  out._sync = function (k, v) {\n    var k2 = letterAttrs.indexOf(k) !== -1 ? cLetter + k : k;\n    cont2[k2] = cont2['_' + k2] = v;\n  };\n\n  return out;\n}\n/**\r\n * Extract colorscale into numeric domain and color range.\r\n *\r\n * @param {object} cont colorscale container (e.g. trace, marker)\r\n *  - colorscale {array of arrays}\r\n *  - cmin/zmin {number}\r\n *  - cmax/zmax {number}\r\n *  - reversescale {boolean}\r\n *\r\n * @return {object}\r\n *  - domain {array}\r\n *  - range {array}\r\n */\n\n\nfunction extractScale(cont) {\n  var cOpts = extractOpts(cont);\n  var cmin = cOpts.min;\n  var cmax = cOpts.max;\n  var scl = cOpts.reversescale ? flipScale(cOpts.colorscale) : cOpts.colorscale;\n  var N = scl.length;\n  var domain = new Array(N);\n  var range = new Array(N);\n\n  for (var i = 0; i < N; i++) {\n    var si = scl[i];\n    domain[i] = cmin + si[0] * (cmax - cmin);\n    range[i] = si[1];\n  }\n\n  return {\n    domain: domain,\n    range: range\n  };\n}\n\nfunction flipScale(scl) {\n  var N = scl.length;\n  var sclNew = new Array(N);\n\n  for (var i = N - 1, j = 0; i >= 0; i--, j++) {\n    var si = scl[i];\n    sclNew[j] = [1 - si[0], si[1]];\n  }\n\n  return sclNew;\n}\n/**\r\n * General colorscale function generator.\r\n *\r\n * @param {object} specs output of Colorscale.extractScale or precomputed domain, range.\r\n *  - domain {array}\r\n *  - range {array}\r\n *\r\n * @param {object} opts\r\n *  - noNumericCheck {boolean} if true, scale func bypasses numeric checks\r\n *  - returnArray {boolean} if true, scale func return 4-item array instead of color strings\r\n *\r\n * @return {function}\r\n */\n\n\nfunction makeColorScaleFunc(specs, opts) {\n  opts = opts || {};\n  var domain = specs.domain;\n  var range = specs.range;\n  var N = range.length;\n\n  var _range = new Array(N);\n\n  for (var i = 0; i < N; i++) {\n    var rgba = tinycolor(range[i]).toRgb();\n    _range[i] = [rgba.r, rgba.g, rgba.b, rgba.a];\n  }\n\n  var _sclFunc = d3.scale.linear().domain(domain).range(_range).clamp(true);\n\n  var noNumericCheck = opts.noNumericCheck;\n  var returnArray = opts.returnArray;\n  var sclFunc;\n\n  if (noNumericCheck && returnArray) {\n    sclFunc = _sclFunc;\n  } else if (noNumericCheck) {\n    sclFunc = function (v) {\n      return colorArray2rbga(_sclFunc(v));\n    };\n  } else if (returnArray) {\n    sclFunc = function (v) {\n      if (isNumeric(v)) return _sclFunc(v);else if (tinycolor(v).isValid()) return v;else return Color.defaultLine;\n    };\n  } else {\n    sclFunc = function (v) {\n      if (isNumeric(v)) return colorArray2rbga(_sclFunc(v));else if (tinycolor(v).isValid()) return v;else return Color.defaultLine;\n    };\n  } // colorbar draw looks into the d3 scale closure for domain and range\n\n\n  sclFunc.domain = _sclFunc.domain;\n\n  sclFunc.range = function () {\n    return range;\n  };\n\n  return sclFunc;\n}\n\nfunction makeColorScaleFuncFromTrace(trace, opts) {\n  return makeColorScaleFunc(extractScale(trace), opts);\n}\n\nfunction colorArray2rbga(colorArray) {\n  var colorObj = {\n    r: colorArray[0],\n    g: colorArray[1],\n    b: colorArray[2],\n    a: colorArray[3]\n  };\n  return tinycolor(colorObj).toRgbString();\n}\n\nmodule.exports = {\n  hasColorscale: hasColorscale,\n  extractOpts: extractOpts,\n  extractScale: extractScale,\n  flipScale: flipScale,\n  makeColorScaleFunc: makeColorScaleFunc,\n  makeColorScaleFuncFromTrace: makeColorScaleFuncFromTrace\n};","map":{"version":3,"sources":["C:/Users/mikke/VSC/fantasy-django-react/fantasy-django/fantasy-react-app/node_modules/plotly.js/src/components/colorscale/helpers.js"],"names":["d3","require","tinycolor","isNumeric","Lib","Color","isValidScale","isValid","hasColorscale","trace","containerStr","colorKey","container","nestedProperty","get","color","isArrayWithOneNumber","isArrayOrTypedArray","i","length","isPlainObject","showscale","cmin","cmax","colorscale","colorbar","constantAttrs","letterAttrs","extractOpts","cont","colorAx","_colorAx","cont2","out","cLetter","k","k2","charAt","_sync","v","indexOf","extractScale","cOpts","min","max","scl","reversescale","flipScale","N","domain","Array","range","si","sclNew","j","makeColorScaleFunc","specs","opts","_range","rgba","toRgb","r","g","b","a","_sclFunc","scale","linear","clamp","noNumericCheck","returnArray","sclFunc","colorArray2rbga","defaultLine","makeColorScaleFuncFromTrace","colorArray","colorObj","toRgbString","module","exports"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nvar d3 = require('@plotly/d3');\r\nvar tinycolor = require('tinycolor2');\r\nvar isNumeric = require('fast-isnumeric');\r\n\r\nvar Lib = require('../../lib');\r\nvar Color = require('../color');\r\n\r\nvar isValidScale = require('./scales').isValid;\r\n\r\nfunction hasColorscale(trace, containerStr, colorKey) {\r\n    var container = containerStr ?\r\n        Lib.nestedProperty(trace, containerStr).get() || {} :\r\n        trace;\r\n    var color = container[colorKey || 'color'];\r\n\r\n    var isArrayWithOneNumber = false;\r\n    if(Lib.isArrayOrTypedArray(color)) {\r\n        for(var i = 0; i < color.length; i++) {\r\n            if(isNumeric(color[i])) {\r\n                isArrayWithOneNumber = true;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        Lib.isPlainObject(container) && (\r\n            isArrayWithOneNumber ||\r\n            container.showscale === true ||\r\n            (isNumeric(container.cmin) && isNumeric(container.cmax)) ||\r\n            isValidScale(container.colorscale) ||\r\n            Lib.isPlainObject(container.colorbar)\r\n        )\r\n    );\r\n}\r\n\r\nvar constantAttrs = ['showscale', 'autocolorscale', 'colorscale', 'reversescale', 'colorbar'];\r\nvar letterAttrs = ['min', 'max', 'mid', 'auto'];\r\n\r\n/**\r\n * Extract 'c' / 'z', trace / color axis colorscale options\r\n *\r\n * Note that it would be nice to replace all z* with c* equivalents in v3\r\n *\r\n * @param {object} cont : attribute container\r\n * @return {object}:\r\n *  - min: cmin or zmin\r\n *  - max: cmax or zmax\r\n *  - mid: cmid or zmid\r\n *  - auto: cauto or zauto\r\n *  - *scale: *scale attrs\r\n *  - colorbar: colorbar\r\n *  - _sync: function syncing attr and underscore dual (useful when calc'ing min/max)\r\n */\r\nfunction extractOpts(cont) {\r\n    var colorAx = cont._colorAx;\r\n    var cont2 = colorAx ? colorAx : cont;\r\n    var out = {};\r\n    var cLetter;\r\n    var i, k;\r\n\r\n    for(i = 0; i < constantAttrs.length; i++) {\r\n        k = constantAttrs[i];\r\n        out[k] = cont2[k];\r\n    }\r\n\r\n    if(colorAx) {\r\n        cLetter = 'c';\r\n        for(i = 0; i < letterAttrs.length; i++) {\r\n            k = letterAttrs[i];\r\n            out[k] = cont2['c' + k];\r\n        }\r\n    } else {\r\n        var k2;\r\n        for(i = 0; i < letterAttrs.length; i++) {\r\n            k = letterAttrs[i];\r\n            k2 = 'c' + k;\r\n            if(k2 in cont2) {\r\n                out[k] = cont2[k2];\r\n                continue;\r\n            }\r\n            k2 = 'z' + k;\r\n            if(k2 in cont2) {\r\n                out[k] = cont2[k2];\r\n            }\r\n        }\r\n        cLetter = k2.charAt(0);\r\n    }\r\n\r\n    out._sync = function(k, v) {\r\n        var k2 = letterAttrs.indexOf(k) !== -1 ? cLetter + k : k;\r\n        cont2[k2] = cont2['_' + k2] = v;\r\n    };\r\n\r\n    return out;\r\n}\r\n\r\n/**\r\n * Extract colorscale into numeric domain and color range.\r\n *\r\n * @param {object} cont colorscale container (e.g. trace, marker)\r\n *  - colorscale {array of arrays}\r\n *  - cmin/zmin {number}\r\n *  - cmax/zmax {number}\r\n *  - reversescale {boolean}\r\n *\r\n * @return {object}\r\n *  - domain {array}\r\n *  - range {array}\r\n */\r\nfunction extractScale(cont) {\r\n    var cOpts = extractOpts(cont);\r\n    var cmin = cOpts.min;\r\n    var cmax = cOpts.max;\r\n\r\n    var scl = cOpts.reversescale ?\r\n        flipScale(cOpts.colorscale) :\r\n        cOpts.colorscale;\r\n\r\n    var N = scl.length;\r\n    var domain = new Array(N);\r\n    var range = new Array(N);\r\n\r\n    for(var i = 0; i < N; i++) {\r\n        var si = scl[i];\r\n        domain[i] = cmin + si[0] * (cmax - cmin);\r\n        range[i] = si[1];\r\n    }\r\n\r\n    return {domain: domain, range: range};\r\n}\r\n\r\nfunction flipScale(scl) {\r\n    var N = scl.length;\r\n    var sclNew = new Array(N);\r\n\r\n    for(var i = N - 1, j = 0; i >= 0; i--, j++) {\r\n        var si = scl[i];\r\n        sclNew[j] = [1 - si[0], si[1]];\r\n    }\r\n    return sclNew;\r\n}\r\n\r\n/**\r\n * General colorscale function generator.\r\n *\r\n * @param {object} specs output of Colorscale.extractScale or precomputed domain, range.\r\n *  - domain {array}\r\n *  - range {array}\r\n *\r\n * @param {object} opts\r\n *  - noNumericCheck {boolean} if true, scale func bypasses numeric checks\r\n *  - returnArray {boolean} if true, scale func return 4-item array instead of color strings\r\n *\r\n * @return {function}\r\n */\r\nfunction makeColorScaleFunc(specs, opts) {\r\n    opts = opts || {};\r\n\r\n    var domain = specs.domain;\r\n    var range = specs.range;\r\n    var N = range.length;\r\n    var _range = new Array(N);\r\n\r\n    for(var i = 0; i < N; i++) {\r\n        var rgba = tinycolor(range[i]).toRgb();\r\n        _range[i] = [rgba.r, rgba.g, rgba.b, rgba.a];\r\n    }\r\n\r\n    var _sclFunc = d3.scale.linear()\r\n        .domain(domain)\r\n        .range(_range)\r\n        .clamp(true);\r\n\r\n    var noNumericCheck = opts.noNumericCheck;\r\n    var returnArray = opts.returnArray;\r\n    var sclFunc;\r\n\r\n    if(noNumericCheck && returnArray) {\r\n        sclFunc = _sclFunc;\r\n    } else if(noNumericCheck) {\r\n        sclFunc = function(v) {\r\n            return colorArray2rbga(_sclFunc(v));\r\n        };\r\n    } else if(returnArray) {\r\n        sclFunc = function(v) {\r\n            if(isNumeric(v)) return _sclFunc(v);\r\n            else if(tinycolor(v).isValid()) return v;\r\n            else return Color.defaultLine;\r\n        };\r\n    } else {\r\n        sclFunc = function(v) {\r\n            if(isNumeric(v)) return colorArray2rbga(_sclFunc(v));\r\n            else if(tinycolor(v).isValid()) return v;\r\n            else return Color.defaultLine;\r\n        };\r\n    }\r\n\r\n    // colorbar draw looks into the d3 scale closure for domain and range\r\n    sclFunc.domain = _sclFunc.domain;\r\n    sclFunc.range = function() { return range; };\r\n\r\n    return sclFunc;\r\n}\r\n\r\nfunction makeColorScaleFuncFromTrace(trace, opts) {\r\n    return makeColorScaleFunc(extractScale(trace), opts);\r\n}\r\n\r\nfunction colorArray2rbga(colorArray) {\r\n    var colorObj = {\r\n        r: colorArray[0],\r\n        g: colorArray[1],\r\n        b: colorArray[2],\r\n        a: colorArray[3]\r\n    };\r\n\r\n    return tinycolor(colorObj).toRgbString();\r\n}\r\n\r\nmodule.exports = {\r\n    hasColorscale: hasColorscale,\r\n    extractOpts: extractOpts,\r\n    extractScale: extractScale,\r\n    flipScale: flipScale,\r\n    makeColorScaleFunc: makeColorScaleFunc,\r\n    makeColorScaleFuncFromTrace: makeColorScaleFuncFromTrace\r\n};\r\n"]},"metadata":{},"sourceType":"script"}