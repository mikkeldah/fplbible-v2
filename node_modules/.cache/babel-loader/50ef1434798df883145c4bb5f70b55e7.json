{"ast":null,"code":"'use strict';\n\nvar colorAttrs = require('../../components/color/attributes');\n\nvar domainAttrs = require('../domain').attributes;\n\nvar constants = require('./constants');\n\nvar overrideAll = require('../../plot_api/edit_types').overrideAll;\n\nvar geoAxesAttrs = {\n  range: {\n    valType: 'info_array',\n    items: [{\n      valType: 'number'\n    }, {\n      valType: 'number'\n    }],\n    description: ['Sets the range of this axis (in degrees),', 'sets the map\\'s clipped coordinates.'].join(' ')\n  },\n  showgrid: {\n    valType: 'boolean',\n    dflt: false,\n    description: 'Sets whether or not graticule are shown on the map.'\n  },\n  tick0: {\n    valType: 'number',\n    dflt: 0,\n    description: ['Sets the graticule\\'s starting tick longitude/latitude.'].join(' ')\n  },\n  dtick: {\n    valType: 'number',\n    description: ['Sets the graticule\\'s longitude/latitude tick step.'].join(' ')\n  },\n  gridcolor: {\n    valType: 'color',\n    dflt: colorAttrs.lightLine,\n    description: ['Sets the graticule\\'s stroke color.'].join(' ')\n  },\n  gridwidth: {\n    valType: 'number',\n    min: 0,\n    dflt: 1,\n    description: ['Sets the graticule\\'s stroke width (in px).'].join(' ')\n  }\n};\nvar attrs = module.exports = overrideAll({\n  domain: domainAttrs({\n    name: 'geo'\n  }, {\n    description: ['Note that geo subplots are constrained by domain.', 'In general, when `projection.scale` is set to 1.', 'a map will fit either its x or y domain, but not both.'].join(' ')\n  }),\n  fitbounds: {\n    valType: 'enumerated',\n    values: [false, 'locations', 'geojson'],\n    dflt: false,\n    editType: 'plot',\n    description: ['Determines if this subplot\\'s view settings are auto-computed to fit trace data.', 'On scoped maps, setting `fitbounds` leads to `center.lon` and `center.lat` getting auto-filled.', 'On maps with a non-clipped projection, setting `fitbounds` leads to `center.lon`, `center.lat`,', 'and `projection.rotation.lon` getting auto-filled.', 'On maps with a clipped projection, setting `fitbounds` leads to `center.lon`, `center.lat`,', '`projection.rotation.lon`, `projection.rotation.lat`, `lonaxis.range` and `lonaxis.range`', 'getting auto-filled.', // TODO we should auto-fill `projection.parallels` for maps\n    // with conic projection, but how?\n    'If *locations*, only the trace\\'s visible locations are considered in the `fitbounds` computations.', 'If *geojson*, the entire trace input `geojson` (if provided) is considered in the `fitbounds` computations,', 'Defaults to *false*.'].join(' ')\n  },\n  resolution: {\n    valType: 'enumerated',\n    values: [110, 50],\n    dflt: 110,\n    coerceNumber: true,\n    description: ['Sets the resolution of the base layers.', 'The values have units of km/mm', 'e.g. 110 corresponds to a scale ratio of 1:110,000,000.'].join(' ')\n  },\n  scope: {\n    valType: 'enumerated',\n    values: Object.keys(constants.scopeDefaults),\n    dflt: 'world',\n    description: 'Set the scope of the map.'\n  },\n  projection: {\n    type: {\n      valType: 'enumerated',\n      values: Object.keys(constants.projNames),\n      description: 'Sets the projection type.'\n    },\n    rotation: {\n      lon: {\n        valType: 'number',\n        description: ['Rotates the map along parallels', '(in degrees East).', 'Defaults to the center of the `lonaxis.range` values.'].join(' ')\n      },\n      lat: {\n        valType: 'number',\n        description: ['Rotates the map along meridians', '(in degrees North).'].join(' ')\n      },\n      roll: {\n        valType: 'number',\n        description: ['Roll the map (in degrees)', 'For example, a roll of *180* makes the map appear upside down.'].join(' ')\n      }\n    },\n    parallels: {\n      valType: 'info_array',\n      items: [{\n        valType: 'number'\n      }, {\n        valType: 'number'\n      }],\n      description: ['For conic projection types only.', 'Sets the parallels (tangent, secant)', 'where the cone intersects the sphere.'].join(' ')\n    },\n    scale: {\n      valType: 'number',\n      min: 0,\n      dflt: 1,\n      description: ['Zooms in or out on the map view.', 'A scale of *1* corresponds to the largest zoom level', 'that fits the map\\'s lon and lat ranges. '].join(' ')\n    }\n  },\n  center: {\n    lon: {\n      valType: 'number',\n      description: ['Sets the longitude of the map\\'s center.', 'By default, the map\\'s longitude center lies at the middle of the longitude range', 'for scoped projection and above `projection.rotation.lon` otherwise.'].join(' ')\n    },\n    lat: {\n      valType: 'number',\n      description: ['Sets the latitude of the map\\'s center.', 'For all projection types, the map\\'s latitude center lies', 'at the middle of the latitude range by default.'].join(' ')\n    }\n  },\n  visible: {\n    valType: 'boolean',\n    dflt: true,\n    description: 'Sets the default visibility of the base layers.'\n  },\n  showcoastlines: {\n    valType: 'boolean',\n    description: 'Sets whether or not the coastlines are drawn.'\n  },\n  coastlinecolor: {\n    valType: 'color',\n    dflt: colorAttrs.defaultLine,\n    description: 'Sets the coastline color.'\n  },\n  coastlinewidth: {\n    valType: 'number',\n    min: 0,\n    dflt: 1,\n    description: 'Sets the coastline stroke width (in px).'\n  },\n  showland: {\n    valType: 'boolean',\n    dflt: false,\n    description: 'Sets whether or not land masses are filled in color.'\n  },\n  landcolor: {\n    valType: 'color',\n    dflt: constants.landColor,\n    description: 'Sets the land mass color.'\n  },\n  showocean: {\n    valType: 'boolean',\n    dflt: false,\n    description: 'Sets whether or not oceans are filled in color.'\n  },\n  oceancolor: {\n    valType: 'color',\n    dflt: constants.waterColor,\n    description: 'Sets the ocean color'\n  },\n  showlakes: {\n    valType: 'boolean',\n    dflt: false,\n    description: 'Sets whether or not lakes are drawn.'\n  },\n  lakecolor: {\n    valType: 'color',\n    dflt: constants.waterColor,\n    description: 'Sets the color of the lakes.'\n  },\n  showrivers: {\n    valType: 'boolean',\n    dflt: false,\n    description: 'Sets whether or not rivers are drawn.'\n  },\n  rivercolor: {\n    valType: 'color',\n    dflt: constants.waterColor,\n    description: 'Sets color of the rivers.'\n  },\n  riverwidth: {\n    valType: 'number',\n    min: 0,\n    dflt: 1,\n    description: 'Sets the stroke width (in px) of the rivers.'\n  },\n  showcountries: {\n    valType: 'boolean',\n    description: 'Sets whether or not country boundaries are drawn.'\n  },\n  countrycolor: {\n    valType: 'color',\n    dflt: colorAttrs.defaultLine,\n    description: 'Sets line color of the country boundaries.'\n  },\n  countrywidth: {\n    valType: 'number',\n    min: 0,\n    dflt: 1,\n    description: 'Sets line width (in px) of the country boundaries.'\n  },\n  showsubunits: {\n    valType: 'boolean',\n    description: ['Sets whether or not boundaries of subunits within countries', '(e.g. states, provinces) are drawn.'].join(' ')\n  },\n  subunitcolor: {\n    valType: 'color',\n    dflt: colorAttrs.defaultLine,\n    description: 'Sets the color of the subunits boundaries.'\n  },\n  subunitwidth: {\n    valType: 'number',\n    min: 0,\n    dflt: 1,\n    description: 'Sets the stroke width (in px) of the subunits boundaries.'\n  },\n  showframe: {\n    valType: 'boolean',\n    description: 'Sets whether or not a frame is drawn around the map.'\n  },\n  framecolor: {\n    valType: 'color',\n    dflt: colorAttrs.defaultLine,\n    description: 'Sets the color the frame.'\n  },\n  framewidth: {\n    valType: 'number',\n    min: 0,\n    dflt: 1,\n    description: 'Sets the stroke width (in px) of the frame.'\n  },\n  bgcolor: {\n    valType: 'color',\n    dflt: colorAttrs.background,\n    description: 'Set the background color of the map'\n  },\n  lonaxis: geoAxesAttrs,\n  lataxis: geoAxesAttrs\n}, 'plot', 'from-root'); // set uirevision outside of overrideAll so it can be `editType: 'none'`\n\nattrs.uirevision = {\n  valType: 'any',\n  editType: 'none',\n  description: ['Controls persistence of user-driven changes in the view', '(projection and center). Defaults to `layout.uirevision`.'].join(' ')\n};","map":{"version":3,"sources":["C:/Users/mikke/VSC/fantasy-django-react/fantasy-django/fantasy-react-app/node_modules/plotly.js/src/plots/geo/layout_attributes.js"],"names":["colorAttrs","require","domainAttrs","attributes","constants","overrideAll","geoAxesAttrs","range","valType","items","description","join","showgrid","dflt","tick0","dtick","gridcolor","lightLine","gridwidth","min","attrs","module","exports","domain","name","fitbounds","values","editType","resolution","coerceNumber","scope","Object","keys","scopeDefaults","projection","type","projNames","rotation","lon","lat","roll","parallels","scale","center","visible","showcoastlines","coastlinecolor","defaultLine","coastlinewidth","showland","landcolor","landColor","showocean","oceancolor","waterColor","showlakes","lakecolor","showrivers","rivercolor","riverwidth","showcountries","countrycolor","countrywidth","showsubunits","subunitcolor","subunitwidth","showframe","framecolor","framewidth","bgcolor","background","lonaxis","lataxis","uirevision"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nvar colorAttrs = require('../../components/color/attributes');\r\nvar domainAttrs = require('../domain').attributes;\r\nvar constants = require('./constants');\r\nvar overrideAll = require('../../plot_api/edit_types').overrideAll;\r\n\r\nvar geoAxesAttrs = {\r\n    range: {\r\n        valType: 'info_array',\r\n        items: [\r\n            {valType: 'number'},\r\n            {valType: 'number'}\r\n        ],\r\n        description: [\r\n            'Sets the range of this axis (in degrees),',\r\n            'sets the map\\'s clipped coordinates.'\r\n        ].join(' ')\r\n    },\r\n    showgrid: {\r\n        valType: 'boolean',\r\n        dflt: false,\r\n        description: 'Sets whether or not graticule are shown on the map.'\r\n    },\r\n    tick0: {\r\n        valType: 'number',\r\n        dflt: 0,\r\n        description: [\r\n            'Sets the graticule\\'s starting tick longitude/latitude.'\r\n        ].join(' ')\r\n    },\r\n    dtick: {\r\n        valType: 'number',\r\n        description: [\r\n            'Sets the graticule\\'s longitude/latitude tick step.'\r\n        ].join(' ')\r\n    },\r\n    gridcolor: {\r\n        valType: 'color',\r\n        dflt: colorAttrs.lightLine,\r\n        description: [\r\n            'Sets the graticule\\'s stroke color.'\r\n        ].join(' ')\r\n    },\r\n    gridwidth: {\r\n        valType: 'number',\r\n        min: 0,\r\n        dflt: 1,\r\n        description: [\r\n            'Sets the graticule\\'s stroke width (in px).'\r\n        ].join(' ')\r\n    }\r\n};\r\n\r\nvar attrs = module.exports = overrideAll({\r\n    domain: domainAttrs({name: 'geo'}, {\r\n        description: [\r\n            'Note that geo subplots are constrained by domain.',\r\n            'In general, when `projection.scale` is set to 1.',\r\n            'a map will fit either its x or y domain, but not both.'\r\n        ].join(' ')\r\n    }),\r\n\r\n    fitbounds: {\r\n        valType: 'enumerated',\r\n        values: [false, 'locations', 'geojson'],\r\n        dflt: false,\r\n        editType: 'plot',\r\n        description: [\r\n            'Determines if this subplot\\'s view settings are auto-computed to fit trace data.',\r\n\r\n            'On scoped maps, setting `fitbounds` leads to `center.lon` and `center.lat` getting auto-filled.',\r\n\r\n            'On maps with a non-clipped projection, setting `fitbounds` leads to `center.lon`, `center.lat`,',\r\n            'and `projection.rotation.lon` getting auto-filled.',\r\n\r\n            'On maps with a clipped projection, setting `fitbounds` leads to `center.lon`, `center.lat`,',\r\n            '`projection.rotation.lon`, `projection.rotation.lat`, `lonaxis.range` and `lonaxis.range`',\r\n            'getting auto-filled.',\r\n\r\n            // TODO we should auto-fill `projection.parallels` for maps\r\n            // with conic projection, but how?\r\n\r\n            'If *locations*, only the trace\\'s visible locations are considered in the `fitbounds` computations.',\r\n            'If *geojson*, the entire trace input `geojson` (if provided) is considered in the `fitbounds` computations,',\r\n            'Defaults to *false*.'\r\n        ].join(' ')\r\n    },\r\n\r\n    resolution: {\r\n        valType: 'enumerated',\r\n        values: [110, 50],\r\n        dflt: 110,\r\n        coerceNumber: true,\r\n        description: [\r\n            'Sets the resolution of the base layers.',\r\n            'The values have units of km/mm',\r\n            'e.g. 110 corresponds to a scale ratio of 1:110,000,000.'\r\n        ].join(' ')\r\n    },\r\n    scope: {\r\n        valType: 'enumerated',\r\n        values: Object.keys(constants.scopeDefaults),\r\n        dflt: 'world',\r\n        description: 'Set the scope of the map.'\r\n    },\r\n    projection: {\r\n        type: {\r\n            valType: 'enumerated',\r\n            values: Object.keys(constants.projNames),\r\n            description: 'Sets the projection type.'\r\n        },\r\n        rotation: {\r\n            lon: {\r\n                valType: 'number',\r\n                description: [\r\n                    'Rotates the map along parallels',\r\n                    '(in degrees East).',\r\n                    'Defaults to the center of the `lonaxis.range` values.'\r\n                ].join(' ')\r\n            },\r\n            lat: {\r\n                valType: 'number',\r\n                description: [\r\n                    'Rotates the map along meridians',\r\n                    '(in degrees North).'\r\n                ].join(' ')\r\n            },\r\n            roll: {\r\n                valType: 'number',\r\n                description: [\r\n                    'Roll the map (in degrees)',\r\n                    'For example, a roll of *180* makes the map appear upside down.'\r\n                ].join(' ')\r\n            }\r\n        },\r\n        parallels: {\r\n            valType: 'info_array',\r\n            items: [\r\n                {valType: 'number'},\r\n                {valType: 'number'}\r\n            ],\r\n            description: [\r\n                'For conic projection types only.',\r\n                'Sets the parallels (tangent, secant)',\r\n                'where the cone intersects the sphere.'\r\n            ].join(' ')\r\n        },\r\n        scale: {\r\n            valType: 'number',\r\n            min: 0,\r\n            dflt: 1,\r\n            description: [\r\n                'Zooms in or out on the map view.',\r\n                'A scale of *1* corresponds to the largest zoom level',\r\n                'that fits the map\\'s lon and lat ranges. '\r\n            ].join(' ')\r\n        },\r\n    },\r\n    center: {\r\n        lon: {\r\n            valType: 'number',\r\n            description: [\r\n                'Sets the longitude of the map\\'s center.',\r\n                'By default, the map\\'s longitude center lies at the middle of the longitude range',\r\n                'for scoped projection and above `projection.rotation.lon` otherwise.'\r\n            ].join(' ')\r\n        },\r\n        lat: {\r\n            valType: 'number',\r\n            description: [\r\n                'Sets the latitude of the map\\'s center.',\r\n                'For all projection types, the map\\'s latitude center lies',\r\n                'at the middle of the latitude range by default.'\r\n            ].join(' ')\r\n        }\r\n    },\r\n    visible: {\r\n        valType: 'boolean',\r\n        dflt: true,\r\n        description: 'Sets the default visibility of the base layers.'\r\n    },\r\n    showcoastlines: {\r\n        valType: 'boolean',\r\n        description: 'Sets whether or not the coastlines are drawn.'\r\n    },\r\n    coastlinecolor: {\r\n        valType: 'color',\r\n        dflt: colorAttrs.defaultLine,\r\n        description: 'Sets the coastline color.'\r\n    },\r\n    coastlinewidth: {\r\n        valType: 'number',\r\n        min: 0,\r\n        dflt: 1,\r\n        description: 'Sets the coastline stroke width (in px).'\r\n    },\r\n    showland: {\r\n        valType: 'boolean',\r\n        dflt: false,\r\n        description: 'Sets whether or not land masses are filled in color.'\r\n    },\r\n    landcolor: {\r\n        valType: 'color',\r\n        dflt: constants.landColor,\r\n        description: 'Sets the land mass color.'\r\n    },\r\n    showocean: {\r\n        valType: 'boolean',\r\n        dflt: false,\r\n        description: 'Sets whether or not oceans are filled in color.'\r\n    },\r\n    oceancolor: {\r\n        valType: 'color',\r\n        dflt: constants.waterColor,\r\n        description: 'Sets the ocean color'\r\n    },\r\n    showlakes: {\r\n        valType: 'boolean',\r\n        dflt: false,\r\n        description: 'Sets whether or not lakes are drawn.'\r\n    },\r\n    lakecolor: {\r\n        valType: 'color',\r\n        dflt: constants.waterColor,\r\n        description: 'Sets the color of the lakes.'\r\n    },\r\n    showrivers: {\r\n        valType: 'boolean',\r\n        dflt: false,\r\n        description: 'Sets whether or not rivers are drawn.'\r\n    },\r\n    rivercolor: {\r\n        valType: 'color',\r\n        dflt: constants.waterColor,\r\n        description: 'Sets color of the rivers.'\r\n    },\r\n    riverwidth: {\r\n        valType: 'number',\r\n        min: 0,\r\n        dflt: 1,\r\n        description: 'Sets the stroke width (in px) of the rivers.'\r\n    },\r\n    showcountries: {\r\n        valType: 'boolean',\r\n        description: 'Sets whether or not country boundaries are drawn.'\r\n    },\r\n    countrycolor: {\r\n        valType: 'color',\r\n        dflt: colorAttrs.defaultLine,\r\n        description: 'Sets line color of the country boundaries.'\r\n    },\r\n    countrywidth: {\r\n        valType: 'number',\r\n        min: 0,\r\n        dflt: 1,\r\n        description: 'Sets line width (in px) of the country boundaries.'\r\n    },\r\n    showsubunits: {\r\n        valType: 'boolean',\r\n        description: [\r\n            'Sets whether or not boundaries of subunits within countries',\r\n            '(e.g. states, provinces) are drawn.'\r\n        ].join(' ')\r\n    },\r\n    subunitcolor: {\r\n        valType: 'color',\r\n        dflt: colorAttrs.defaultLine,\r\n        description: 'Sets the color of the subunits boundaries.'\r\n    },\r\n    subunitwidth: {\r\n        valType: 'number',\r\n        min: 0,\r\n        dflt: 1,\r\n        description: 'Sets the stroke width (in px) of the subunits boundaries.'\r\n    },\r\n    showframe: {\r\n        valType: 'boolean',\r\n        description: 'Sets whether or not a frame is drawn around the map.'\r\n    },\r\n    framecolor: {\r\n        valType: 'color',\r\n        dflt: colorAttrs.defaultLine,\r\n        description: 'Sets the color the frame.'\r\n    },\r\n    framewidth: {\r\n        valType: 'number',\r\n        min: 0,\r\n        dflt: 1,\r\n        description: 'Sets the stroke width (in px) of the frame.'\r\n    },\r\n    bgcolor: {\r\n        valType: 'color',\r\n        dflt: colorAttrs.background,\r\n        description: 'Set the background color of the map'\r\n    },\r\n    lonaxis: geoAxesAttrs,\r\n    lataxis: geoAxesAttrs\r\n}, 'plot', 'from-root');\r\n\r\n// set uirevision outside of overrideAll so it can be `editType: 'none'`\r\nattrs.uirevision = {\r\n    valType: 'any',\r\n    editType: 'none',\r\n    description: [\r\n        'Controls persistence of user-driven changes in the view',\r\n        '(projection and center). Defaults to `layout.uirevision`.'\r\n    ].join(' ')\r\n};\r\n"]},"metadata":{},"sourceType":"script"}