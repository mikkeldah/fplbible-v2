{"ast":null,"code":"'use strict';\n\nvar colorScaleAttrs = require('../../components/colorscale/attributes');\n\nvar axisHoverFormat = require('../../plots/hoverformat_attributes');\n\nvar hovertemplateAttrs = require('../../plots/template_attributes').hovertemplateAttrs;\n\nvar meshAttrs = require('../mesh3d/attributes');\n\nvar baseAttrs = require('../../plots/attributes');\n\nvar extendFlat = require('../../lib/extend').extendFlat;\n\nvar overrideAll = require('../../plot_api/edit_types').overrideAll;\n\nfunction makeSliceAttr(axLetter) {\n  return {\n    show: {\n      valType: 'boolean',\n      dflt: false,\n      description: ['Determines whether or not slice planes about the', axLetter, 'dimension are drawn.'].join(' ')\n    },\n    locations: {\n      valType: 'data_array',\n      dflt: [],\n      description: ['Specifies the location(s) of slices on the axis.', 'When not specified slices would be created for', 'all points of the axis', axLetter, 'except start and end.'].join(' ')\n    },\n    fill: {\n      valType: 'number',\n      min: 0,\n      max: 1,\n      dflt: 1,\n      description: ['Sets the fill ratio of the `slices`. The default fill value of the', '`slices` is 1 meaning that they are entirely shaded. On the other hand', 'Applying a `fill` ratio less than one would allow the creation of', 'openings parallel to the edges.'].join(' ')\n    }\n  };\n}\n\nfunction makeCapAttr(axLetter) {\n  return {\n    show: {\n      valType: 'boolean',\n      dflt: true,\n      description: ['Sets the fill ratio of the `slices`. The default fill value of the', axLetter, '`slices` is 1 meaning that they are entirely shaded. On the other hand', 'Applying a `fill` ratio less than one would allow the creation of', 'openings parallel to the edges.'].join(' ')\n    },\n    fill: {\n      valType: 'number',\n      min: 0,\n      max: 1,\n      dflt: 1,\n      description: ['Sets the fill ratio of the `caps`. The default fill value of the', '`caps` is 1 meaning that they are entirely shaded. On the other hand', 'Applying a `fill` ratio less than one would allow the creation of', 'openings parallel to the edges.'].join(' ')\n    }\n  };\n}\n\nvar attrs = module.exports = overrideAll(extendFlat({\n  x: {\n    valType: 'data_array',\n    description: ['Sets the X coordinates of the vertices on X axis.'].join(' ')\n  },\n  y: {\n    valType: 'data_array',\n    description: ['Sets the Y coordinates of the vertices on Y axis.'].join(' ')\n  },\n  z: {\n    valType: 'data_array',\n    description: ['Sets the Z coordinates of the vertices on Z axis.'].join(' ')\n  },\n  value: {\n    valType: 'data_array',\n    description: ['Sets the 4th dimension (value) of the vertices.'].join(' ')\n  },\n  isomin: {\n    valType: 'number',\n    description: ['Sets the minimum boundary for iso-surface plot.'].join(' ')\n  },\n  isomax: {\n    valType: 'number',\n    description: ['Sets the maximum boundary for iso-surface plot.'].join(' ')\n  },\n  surface: {\n    show: {\n      valType: 'boolean',\n      dflt: true,\n      description: ['Hides/displays surfaces between minimum and maximum iso-values.'].join(' ')\n    },\n    count: {\n      valType: 'integer',\n      dflt: 2,\n      min: 1,\n      description: ['Sets the number of iso-surfaces between minimum and maximum iso-values.', 'By default this value is 2 meaning that only minimum and maximum surfaces', 'would be drawn.'].join(' ')\n    },\n    fill: {\n      valType: 'number',\n      min: 0,\n      max: 1,\n      dflt: 1,\n      description: ['Sets the fill ratio of the iso-surface. The default fill value of the', 'surface is 1 meaning that they are entirely shaded. On the other hand', 'Applying a `fill` ratio less than one would allow the creation of', 'openings parallel to the edges.'].join(' ')\n    },\n    pattern: {\n      valType: 'flaglist',\n      flags: ['A', 'B', 'C', 'D', 'E'],\n      extras: ['all', 'odd', 'even'],\n      dflt: 'all',\n      description: ['Sets the surface pattern of the iso-surface 3-D sections. The default pattern of', 'the surface is `all` meaning that the rest of surface elements would be shaded.', 'The check options (either 1 or 2) could be used to draw half of the squares', 'on the surface. Using various combinations of capital `A`, `B`, `C`, `D` and `E`', 'may also be used to reduce the number of triangles on the iso-surfaces and', 'creating other patterns of interest.'].join(' ')\n    }\n  },\n  spaceframe: {\n    show: {\n      valType: 'boolean',\n      dflt: false,\n      description: ['Displays/hides tetrahedron shapes between minimum and', 'maximum iso-values. Often useful when either caps or', 'surfaces are disabled or filled with values less than 1.'].join(' ')\n    },\n    fill: {\n      valType: 'number',\n      min: 0,\n      max: 1,\n      dflt: 0.15,\n      description: ['Sets the fill ratio of the `spaceframe` elements. The default fill value', 'is 0.15 meaning that only 15% of the area of every faces of tetras would be', 'shaded. Applying a greater `fill` ratio would allow the creation of stronger', 'elements or could be sued to have entirely closed areas (in case of using 1).'].join(' ')\n    }\n  },\n  slices: {\n    x: makeSliceAttr('x'),\n    y: makeSliceAttr('y'),\n    z: makeSliceAttr('z')\n  },\n  caps: {\n    x: makeCapAttr('x'),\n    y: makeCapAttr('y'),\n    z: makeCapAttr('z')\n  },\n  text: {\n    valType: 'string',\n    dflt: '',\n    arrayOk: true,\n    description: ['Sets the text elements associated with the vertices.', 'If trace `hoverinfo` contains a *text* flag and *hovertext* is not set,', 'these elements will be seen in the hover labels.'].join(' ')\n  },\n  hovertext: {\n    valType: 'string',\n    dflt: '',\n    arrayOk: true,\n    description: 'Same as `text`.'\n  },\n  hovertemplate: hovertemplateAttrs(),\n  xhoverformat: axisHoverFormat('x'),\n  yhoverformat: axisHoverFormat('y'),\n  zhoverformat: axisHoverFormat('z'),\n  valuehoverformat: axisHoverFormat('value', 1),\n  showlegend: extendFlat({}, baseAttrs.showlegend, {\n    dflt: false\n  })\n}, colorScaleAttrs('', {\n  colorAttr: '`value`',\n  showScaleDflt: true,\n  editTypeOverride: 'calc'\n}), {\n  opacity: meshAttrs.opacity,\n  lightposition: meshAttrs.lightposition,\n  lighting: meshAttrs.lighting,\n  flatshading: meshAttrs.flatshading,\n  contour: meshAttrs.contour,\n  hoverinfo: extendFlat({}, baseAttrs.hoverinfo)\n}), 'calc', 'nested'); // required defaults to speed up surface normal calculations\n\nattrs.flatshading.dflt = true;\nattrs.lighting.facenormalsepsilon.dflt = 0;\nattrs.x.editType = attrs.y.editType = attrs.z.editType = attrs.value.editType = 'calc+clearAxisTypes';\nattrs.transforms = undefined;","map":{"version":3,"sources":["C:/Users/mikke/VSC/fantasy-django-react/fantasy-django/fantasy-react-app/node_modules/plotly.js/src/traces/isosurface/attributes.js"],"names":["colorScaleAttrs","require","axisHoverFormat","hovertemplateAttrs","meshAttrs","baseAttrs","extendFlat","overrideAll","makeSliceAttr","axLetter","show","valType","dflt","description","join","locations","fill","min","max","makeCapAttr","attrs","module","exports","x","y","z","value","isomin","isomax","surface","count","pattern","flags","extras","spaceframe","slices","caps","text","arrayOk","hovertext","hovertemplate","xhoverformat","yhoverformat","zhoverformat","valuehoverformat","showlegend","colorAttr","showScaleDflt","editTypeOverride","opacity","lightposition","lighting","flatshading","contour","hoverinfo","facenormalsepsilon","editType","transforms","undefined"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nvar colorScaleAttrs = require('../../components/colorscale/attributes');\r\nvar axisHoverFormat = require('../../plots/hoverformat_attributes');\r\nvar hovertemplateAttrs = require('../../plots/template_attributes').hovertemplateAttrs;\r\nvar meshAttrs = require('../mesh3d/attributes');\r\nvar baseAttrs = require('../../plots/attributes');\r\n\r\nvar extendFlat = require('../../lib/extend').extendFlat;\r\nvar overrideAll = require('../../plot_api/edit_types').overrideAll;\r\n\r\nfunction makeSliceAttr(axLetter) {\r\n    return {\r\n        show: {\r\n            valType: 'boolean',\r\n            dflt: false,\r\n            description: [\r\n                'Determines whether or not slice planes about the', axLetter,\r\n                'dimension are drawn.'\r\n            ].join(' ')\r\n        },\r\n        locations: {\r\n            valType: 'data_array',\r\n            dflt: [],\r\n            description: [\r\n                'Specifies the location(s) of slices on the axis.',\r\n                'When not specified slices would be created for',\r\n                'all points of the axis', axLetter, 'except start and end.'\r\n            ].join(' ')\r\n        },\r\n        fill: {\r\n            valType: 'number',\r\n            min: 0,\r\n            max: 1,\r\n            dflt: 1,\r\n            description: [\r\n                'Sets the fill ratio of the `slices`. The default fill value of the',\r\n                '`slices` is 1 meaning that they are entirely shaded. On the other hand',\r\n                'Applying a `fill` ratio less than one would allow the creation of',\r\n                'openings parallel to the edges.'\r\n            ].join(' ')\r\n        }\r\n    };\r\n}\r\n\r\nfunction makeCapAttr(axLetter) {\r\n    return {\r\n        show: {\r\n            valType: 'boolean',\r\n            dflt: true,\r\n            description: [\r\n                'Sets the fill ratio of the `slices`. The default fill value of the', axLetter,\r\n                '`slices` is 1 meaning that they are entirely shaded. On the other hand',\r\n                'Applying a `fill` ratio less than one would allow the creation of',\r\n                'openings parallel to the edges.'\r\n            ].join(' ')\r\n        },\r\n        fill: {\r\n            valType: 'number',\r\n            min: 0,\r\n            max: 1,\r\n            dflt: 1,\r\n            description: [\r\n                'Sets the fill ratio of the `caps`. The default fill value of the',\r\n                '`caps` is 1 meaning that they are entirely shaded. On the other hand',\r\n                'Applying a `fill` ratio less than one would allow the creation of',\r\n                'openings parallel to the edges.'\r\n            ].join(' ')\r\n        }\r\n    };\r\n}\r\n\r\nvar attrs = module.exports = overrideAll(extendFlat({\r\n    x: {\r\n        valType: 'data_array',\r\n        description: [\r\n            'Sets the X coordinates of the vertices on X axis.'\r\n        ].join(' ')\r\n    },\r\n    y: {\r\n        valType: 'data_array',\r\n        description: [\r\n            'Sets the Y coordinates of the vertices on Y axis.'\r\n        ].join(' ')\r\n    },\r\n    z: {\r\n        valType: 'data_array',\r\n        description: [\r\n            'Sets the Z coordinates of the vertices on Z axis.'\r\n        ].join(' ')\r\n    },\r\n    value: {\r\n        valType: 'data_array',\r\n        description: [\r\n            'Sets the 4th dimension (value) of the vertices.'\r\n        ].join(' ')\r\n    },\r\n    isomin: {\r\n        valType: 'number',\r\n        description: [\r\n            'Sets the minimum boundary for iso-surface plot.'\r\n        ].join(' ')\r\n    },\r\n    isomax: {\r\n        valType: 'number',\r\n        description: [\r\n            'Sets the maximum boundary for iso-surface plot.'\r\n        ].join(' ')\r\n    },\r\n\r\n    surface: {\r\n        show: {\r\n            valType: 'boolean',\r\n            dflt: true,\r\n            description: [\r\n                'Hides/displays surfaces between minimum and maximum iso-values.'\r\n            ].join(' ')\r\n        },\r\n        count: {\r\n            valType: 'integer',\r\n            dflt: 2,\r\n            min: 1,\r\n            description: [\r\n                'Sets the number of iso-surfaces between minimum and maximum iso-values.',\r\n                'By default this value is 2 meaning that only minimum and maximum surfaces',\r\n                'would be drawn.'\r\n            ].join(' ')\r\n        },\r\n        fill: {\r\n            valType: 'number',\r\n            min: 0,\r\n            max: 1,\r\n            dflt: 1,\r\n            description: [\r\n                'Sets the fill ratio of the iso-surface. The default fill value of the',\r\n                'surface is 1 meaning that they are entirely shaded. On the other hand',\r\n                'Applying a `fill` ratio less than one would allow the creation of',\r\n                'openings parallel to the edges.'\r\n            ].join(' ')\r\n        },\r\n        pattern: {\r\n            valType: 'flaglist',\r\n            flags: ['A', 'B', 'C', 'D', 'E'],\r\n            extras: ['all', 'odd', 'even'],\r\n            dflt: 'all',\r\n            description: [\r\n                'Sets the surface pattern of the iso-surface 3-D sections. The default pattern of',\r\n                'the surface is `all` meaning that the rest of surface elements would be shaded.',\r\n                'The check options (either 1 or 2) could be used to draw half of the squares',\r\n                'on the surface. Using various combinations of capital `A`, `B`, `C`, `D` and `E`',\r\n                'may also be used to reduce the number of triangles on the iso-surfaces and',\r\n                'creating other patterns of interest.'\r\n            ].join(' ')\r\n        }\r\n    },\r\n\r\n    spaceframe: {\r\n        show: {\r\n            valType: 'boolean',\r\n            dflt: false,\r\n            description: [\r\n                'Displays/hides tetrahedron shapes between minimum and',\r\n                'maximum iso-values. Often useful when either caps or',\r\n                'surfaces are disabled or filled with values less than 1.'\r\n            ].join(' ')\r\n        },\r\n        fill: {\r\n            valType: 'number',\r\n            min: 0,\r\n            max: 1,\r\n            dflt: 0.15,\r\n            description: [\r\n                'Sets the fill ratio of the `spaceframe` elements. The default fill value',\r\n                'is 0.15 meaning that only 15% of the area of every faces of tetras would be',\r\n                'shaded. Applying a greater `fill` ratio would allow the creation of stronger',\r\n                'elements or could be sued to have entirely closed areas (in case of using 1).'\r\n            ].join(' ')\r\n        }\r\n    },\r\n\r\n    slices: {\r\n        x: makeSliceAttr('x'),\r\n        y: makeSliceAttr('y'),\r\n        z: makeSliceAttr('z')\r\n    },\r\n\r\n    caps: {\r\n        x: makeCapAttr('x'),\r\n        y: makeCapAttr('y'),\r\n        z: makeCapAttr('z')\r\n    },\r\n\r\n    text: {\r\n        valType: 'string',\r\n        dflt: '',\r\n        arrayOk: true,\r\n        description: [\r\n            'Sets the text elements associated with the vertices.',\r\n            'If trace `hoverinfo` contains a *text* flag and *hovertext* is not set,',\r\n            'these elements will be seen in the hover labels.'\r\n        ].join(' ')\r\n    },\r\n    hovertext: {\r\n        valType: 'string',\r\n        dflt: '',\r\n        arrayOk: true,\r\n        description: 'Same as `text`.'\r\n    },\r\n    hovertemplate: hovertemplateAttrs(),\r\n    xhoverformat: axisHoverFormat('x'),\r\n    yhoverformat: axisHoverFormat('y'),\r\n    zhoverformat: axisHoverFormat('z'),\r\n    valuehoverformat: axisHoverFormat('value', 1),\r\n\r\n    showlegend: extendFlat({}, baseAttrs.showlegend, {dflt: false})\r\n},\r\n\r\ncolorScaleAttrs('', {\r\n    colorAttr: '`value`',\r\n    showScaleDflt: true,\r\n    editTypeOverride: 'calc'\r\n}), {\r\n    opacity: meshAttrs.opacity,\r\n    lightposition: meshAttrs.lightposition,\r\n    lighting: meshAttrs.lighting,\r\n    flatshading: meshAttrs.flatshading,\r\n    contour: meshAttrs.contour,\r\n\r\n    hoverinfo: extendFlat({}, baseAttrs.hoverinfo)\r\n}), 'calc', 'nested');\r\n\r\n// required defaults to speed up surface normal calculations\r\nattrs.flatshading.dflt = true; attrs.lighting.facenormalsepsilon.dflt = 0;\r\n\r\nattrs.x.editType = attrs.y.editType = attrs.z.editType = attrs.value.editType = 'calc+clearAxisTypes';\r\nattrs.transforms = undefined;\r\n"]},"metadata":{},"sourceType":"script"}