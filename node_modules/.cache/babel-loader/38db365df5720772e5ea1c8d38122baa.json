{"ast":null,"code":"'use strict';\n\nvar convert = require('./convert').convert;\n\nvar convertOnSelect = require('./convert').convertOnSelect;\n\nvar LAYER_PREFIX = require('../../plots/mapbox/constants').traceLayerPrefix;\n\nfunction ChoroplethMapbox(subplot, uid) {\n  this.type = 'choroplethmapbox';\n  this.subplot = subplot;\n  this.uid = uid; // N.B. fill and line layers share same source\n\n  this.sourceId = 'source-' + uid;\n  this.layerList = [['fill', LAYER_PREFIX + uid + '-fill'], ['line', LAYER_PREFIX + uid + '-line']]; // previous 'below' value,\n  // need this to update it properly\n\n  this.below = null;\n}\n\nvar proto = ChoroplethMapbox.prototype;\n\nproto.update = function (calcTrace) {\n  this._update(convert(calcTrace));\n};\n\nproto.updateOnSelect = function (calcTrace) {\n  this._update(convertOnSelect(calcTrace));\n};\n\nproto._update = function (optsAll) {\n  var subplot = this.subplot;\n  var layerList = this.layerList;\n  var below = subplot.belowLookup['trace-' + this.uid];\n  subplot.map.getSource(this.sourceId).setData(optsAll.geojson);\n\n  if (below !== this.below) {\n    this._removeLayers();\n\n    this._addLayers(optsAll, below);\n\n    this.below = below;\n  }\n\n  for (var i = 0; i < layerList.length; i++) {\n    var item = layerList[i];\n    var k = item[0];\n    var id = item[1];\n    var opts = optsAll[k];\n    subplot.setOptions(id, 'setLayoutProperty', opts.layout);\n\n    if (opts.layout.visibility === 'visible') {\n      subplot.setOptions(id, 'setPaintProperty', opts.paint);\n    }\n  }\n};\n\nproto._addLayers = function (optsAll, below) {\n  var subplot = this.subplot;\n  var layerList = this.layerList;\n  var sourceId = this.sourceId;\n\n  for (var i = 0; i < layerList.length; i++) {\n    var item = layerList[i];\n    var k = item[0];\n    var opts = optsAll[k];\n    subplot.addLayer({\n      type: k,\n      id: item[1],\n      source: sourceId,\n      layout: opts.layout,\n      paint: opts.paint\n    }, below);\n  }\n};\n\nproto._removeLayers = function () {\n  var map = this.subplot.map;\n  var layerList = this.layerList;\n\n  for (var i = layerList.length - 1; i >= 0; i--) {\n    map.removeLayer(layerList[i][1]);\n  }\n};\n\nproto.dispose = function () {\n  var map = this.subplot.map;\n\n  this._removeLayers();\n\n  map.removeSource(this.sourceId);\n};\n\nmodule.exports = function createChoroplethMapbox(subplot, calcTrace) {\n  var trace = calcTrace[0].trace;\n  var choroplethMapbox = new ChoroplethMapbox(subplot, trace.uid);\n  var sourceId = choroplethMapbox.sourceId;\n  var optsAll = convert(calcTrace);\n  var below = choroplethMapbox.below = subplot.belowLookup['trace-' + trace.uid];\n  subplot.map.addSource(sourceId, {\n    type: 'geojson',\n    data: optsAll.geojson\n  });\n\n  choroplethMapbox._addLayers(optsAll, below); // link ref for quick update during selections\n\n\n  calcTrace[0].trace._glTrace = choroplethMapbox;\n  return choroplethMapbox;\n};","map":{"version":3,"sources":["C:/Users/mikke/VSC/fantasy-django-react/fantasy-django/fantasy-react-app/node_modules/plotly.js/src/traces/choroplethmapbox/plot.js"],"names":["convert","require","convertOnSelect","LAYER_PREFIX","traceLayerPrefix","ChoroplethMapbox","subplot","uid","type","sourceId","layerList","below","proto","prototype","update","calcTrace","_update","updateOnSelect","optsAll","belowLookup","map","getSource","setData","geojson","_removeLayers","_addLayers","i","length","item","k","id","opts","setOptions","layout","visibility","paint","addLayer","source","removeLayer","dispose","removeSource","module","exports","createChoroplethMapbox","trace","choroplethMapbox","addSource","data","_glTrace"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nvar convert = require('./convert').convert;\r\nvar convertOnSelect = require('./convert').convertOnSelect;\r\nvar LAYER_PREFIX = require('../../plots/mapbox/constants').traceLayerPrefix;\r\n\r\nfunction ChoroplethMapbox(subplot, uid) {\r\n    this.type = 'choroplethmapbox';\r\n    this.subplot = subplot;\r\n    this.uid = uid;\r\n\r\n    // N.B. fill and line layers share same source\r\n    this.sourceId = 'source-' + uid;\r\n\r\n    this.layerList = [\r\n        ['fill', LAYER_PREFIX + uid + '-fill'],\r\n        ['line', LAYER_PREFIX + uid + '-line']\r\n    ];\r\n\r\n    // previous 'below' value,\r\n    // need this to update it properly\r\n    this.below = null;\r\n}\r\n\r\nvar proto = ChoroplethMapbox.prototype;\r\n\r\nproto.update = function(calcTrace) {\r\n    this._update(convert(calcTrace));\r\n};\r\n\r\nproto.updateOnSelect = function(calcTrace) {\r\n    this._update(convertOnSelect(calcTrace));\r\n};\r\n\r\nproto._update = function(optsAll) {\r\n    var subplot = this.subplot;\r\n    var layerList = this.layerList;\r\n    var below = subplot.belowLookup['trace-' + this.uid];\r\n\r\n    subplot.map\r\n        .getSource(this.sourceId)\r\n        .setData(optsAll.geojson);\r\n\r\n    if(below !== this.below) {\r\n        this._removeLayers();\r\n        this._addLayers(optsAll, below);\r\n        this.below = below;\r\n    }\r\n\r\n    for(var i = 0; i < layerList.length; i++) {\r\n        var item = layerList[i];\r\n        var k = item[0];\r\n        var id = item[1];\r\n        var opts = optsAll[k];\r\n\r\n        subplot.setOptions(id, 'setLayoutProperty', opts.layout);\r\n\r\n        if(opts.layout.visibility === 'visible') {\r\n            subplot.setOptions(id, 'setPaintProperty', opts.paint);\r\n        }\r\n    }\r\n};\r\n\r\nproto._addLayers = function(optsAll, below) {\r\n    var subplot = this.subplot;\r\n    var layerList = this.layerList;\r\n    var sourceId = this.sourceId;\r\n\r\n    for(var i = 0; i < layerList.length; i++) {\r\n        var item = layerList[i];\r\n        var k = item[0];\r\n        var opts = optsAll[k];\r\n\r\n        subplot.addLayer({\r\n            type: k,\r\n            id: item[1],\r\n            source: sourceId,\r\n            layout: opts.layout,\r\n            paint: opts.paint\r\n        }, below);\r\n    }\r\n};\r\n\r\nproto._removeLayers = function() {\r\n    var map = this.subplot.map;\r\n    var layerList = this.layerList;\r\n\r\n    for(var i = layerList.length - 1; i >= 0; i--) {\r\n        map.removeLayer(layerList[i][1]);\r\n    }\r\n};\r\n\r\nproto.dispose = function() {\r\n    var map = this.subplot.map;\r\n    this._removeLayers();\r\n    map.removeSource(this.sourceId);\r\n};\r\n\r\nmodule.exports = function createChoroplethMapbox(subplot, calcTrace) {\r\n    var trace = calcTrace[0].trace;\r\n    var choroplethMapbox = new ChoroplethMapbox(subplot, trace.uid);\r\n    var sourceId = choroplethMapbox.sourceId;\r\n    var optsAll = convert(calcTrace);\r\n    var below = choroplethMapbox.below = subplot.belowLookup['trace-' + trace.uid];\r\n\r\n    subplot.map.addSource(sourceId, {\r\n        type: 'geojson',\r\n        data: optsAll.geojson\r\n    });\r\n\r\n    choroplethMapbox._addLayers(optsAll, below);\r\n\r\n    // link ref for quick update during selections\r\n    calcTrace[0].trace._glTrace = choroplethMapbox;\r\n\r\n    return choroplethMapbox;\r\n};\r\n"]},"metadata":{},"sourceType":"script"}