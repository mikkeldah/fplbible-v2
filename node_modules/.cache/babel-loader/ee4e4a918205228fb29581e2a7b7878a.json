{"ast":null,"code":"'use strict';\n\nvar handleAxisDefaults = require('./axis_defaults');\n\nvar Template = require('../../plot_api/plot_template');\n\nmodule.exports = function handleABDefaults(traceIn, traceOut, fullLayout, coerce, dfltColor) {\n  var a = coerce('a');\n\n  if (!a) {\n    coerce('da');\n    coerce('a0');\n  }\n\n  var b = coerce('b');\n\n  if (!b) {\n    coerce('db');\n    coerce('b0');\n  }\n\n  mimickAxisDefaults(traceIn, traceOut, fullLayout, dfltColor);\n};\n\nfunction mimickAxisDefaults(traceIn, traceOut, fullLayout, dfltColor) {\n  var axesList = ['aaxis', 'baxis'];\n  axesList.forEach(function (axName) {\n    var axLetter = axName.charAt(0);\n    var axIn = traceIn[axName] || {};\n    var axOut = Template.newContainer(traceOut, axName);\n    var defaultOptions = {\n      tickfont: 'x',\n      id: axLetter + 'axis',\n      letter: axLetter,\n      font: traceOut.font,\n      name: axName,\n      data: traceIn[axLetter],\n      calendar: traceOut.calendar,\n      dfltColor: dfltColor,\n      bgColor: fullLayout.paper_bgcolor,\n      autotypenumbersDflt: fullLayout.autotypenumbers,\n      fullLayout: fullLayout\n    };\n    handleAxisDefaults(axIn, axOut, defaultOptions);\n    axOut._categories = axOut._categories || []; // so we don't have to repeat autotype unnecessarily,\n    // copy an autotype back to traceIn\n\n    if (!traceIn[axName] && axIn.type !== '-') {\n      traceIn[axName] = {\n        type: axIn.type\n      };\n    }\n  });\n}","map":{"version":3,"sources":["C:/Users/mikke/VSC/fantasy-django-react/fantasy-django/fantasy-react-app/node_modules/plotly.js/src/traces/carpet/ab_defaults.js"],"names":["handleAxisDefaults","require","Template","module","exports","handleABDefaults","traceIn","traceOut","fullLayout","coerce","dfltColor","a","b","mimickAxisDefaults","axesList","forEach","axName","axLetter","charAt","axIn","axOut","newContainer","defaultOptions","tickfont","id","letter","font","name","data","calendar","bgColor","paper_bgcolor","autotypenumbersDflt","autotypenumbers","_categories","type"],"mappings":"AAAA;;AAEA,IAAIA,kBAAkB,GAAGC,OAAO,CAAC,iBAAD,CAAhC;;AACA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,8BAAD,CAAtB;;AAEAE,MAAM,CAACC,OAAP,GAAiB,SAASC,gBAAT,CAA0BC,OAA1B,EAAmCC,QAAnC,EAA6CC,UAA7C,EAAyDC,MAAzD,EAAiEC,SAAjE,EAA4E;AACzF,MAAIC,CAAC,GAAGF,MAAM,CAAC,GAAD,CAAd;;AAEA,MAAG,CAACE,CAAJ,EAAO;AACHF,IAAAA,MAAM,CAAC,IAAD,CAAN;AACAA,IAAAA,MAAM,CAAC,IAAD,CAAN;AACH;;AAED,MAAIG,CAAC,GAAGH,MAAM,CAAC,GAAD,CAAd;;AAEA,MAAG,CAACG,CAAJ,EAAO;AACHH,IAAAA,MAAM,CAAC,IAAD,CAAN;AACAA,IAAAA,MAAM,CAAC,IAAD,CAAN;AACH;;AAEDI,EAAAA,kBAAkB,CAACP,OAAD,EAAUC,QAAV,EAAoBC,UAApB,EAAgCE,SAAhC,CAAlB;AACH,CAhBD;;AAkBA,SAASG,kBAAT,CAA4BP,OAA5B,EAAqCC,QAArC,EAA+CC,UAA/C,EAA2DE,SAA3D,EAAsE;AAClE,MAAII,QAAQ,GAAG,CAAC,OAAD,EAAU,OAAV,CAAf;AAEAA,EAAAA,QAAQ,CAACC,OAAT,CAAiB,UAASC,MAAT,EAAiB;AAC9B,QAAIC,QAAQ,GAAGD,MAAM,CAACE,MAAP,CAAc,CAAd,CAAf;AACA,QAAIC,IAAI,GAAGb,OAAO,CAACU,MAAD,CAAP,IAAmB,EAA9B;AACA,QAAII,KAAK,GAAGlB,QAAQ,CAACmB,YAAT,CAAsBd,QAAtB,EAAgCS,MAAhC,CAAZ;AAEA,QAAIM,cAAc,GAAG;AACjBC,MAAAA,QAAQ,EAAE,GADO;AAEjBC,MAAAA,EAAE,EAAEP,QAAQ,GAAG,MAFE;AAGjBQ,MAAAA,MAAM,EAAER,QAHS;AAIjBS,MAAAA,IAAI,EAAEnB,QAAQ,CAACmB,IAJE;AAKjBC,MAAAA,IAAI,EAAEX,MALW;AAMjBY,MAAAA,IAAI,EAAEtB,OAAO,CAACW,QAAD,CANI;AAOjBY,MAAAA,QAAQ,EAAEtB,QAAQ,CAACsB,QAPF;AAQjBnB,MAAAA,SAAS,EAAEA,SARM;AASjBoB,MAAAA,OAAO,EAAEtB,UAAU,CAACuB,aATH;AAUjBC,MAAAA,mBAAmB,EAAExB,UAAU,CAACyB,eAVf;AAWjBzB,MAAAA,UAAU,EAAEA;AAXK,KAArB;AAcAR,IAAAA,kBAAkB,CAACmB,IAAD,EAAOC,KAAP,EAAcE,cAAd,CAAlB;AACAF,IAAAA,KAAK,CAACc,WAAN,GAAoBd,KAAK,CAACc,WAAN,IAAqB,EAAzC,CApB8B,CAsB9B;AACA;;AACA,QAAG,CAAC5B,OAAO,CAACU,MAAD,CAAR,IAAoBG,IAAI,CAACgB,IAAL,KAAc,GAArC,EAA0C;AACtC7B,MAAAA,OAAO,CAACU,MAAD,CAAP,GAAkB;AAACmB,QAAAA,IAAI,EAAEhB,IAAI,CAACgB;AAAZ,OAAlB;AACH;AACJ,GA3BD;AA4BH","sourcesContent":["'use strict';\r\n\r\nvar handleAxisDefaults = require('./axis_defaults');\r\nvar Template = require('../../plot_api/plot_template');\r\n\r\nmodule.exports = function handleABDefaults(traceIn, traceOut, fullLayout, coerce, dfltColor) {\r\n    var a = coerce('a');\r\n\r\n    if(!a) {\r\n        coerce('da');\r\n        coerce('a0');\r\n    }\r\n\r\n    var b = coerce('b');\r\n\r\n    if(!b) {\r\n        coerce('db');\r\n        coerce('b0');\r\n    }\r\n\r\n    mimickAxisDefaults(traceIn, traceOut, fullLayout, dfltColor);\r\n};\r\n\r\nfunction mimickAxisDefaults(traceIn, traceOut, fullLayout, dfltColor) {\r\n    var axesList = ['aaxis', 'baxis'];\r\n\r\n    axesList.forEach(function(axName) {\r\n        var axLetter = axName.charAt(0);\r\n        var axIn = traceIn[axName] || {};\r\n        var axOut = Template.newContainer(traceOut, axName);\r\n\r\n        var defaultOptions = {\r\n            tickfont: 'x',\r\n            id: axLetter + 'axis',\r\n            letter: axLetter,\r\n            font: traceOut.font,\r\n            name: axName,\r\n            data: traceIn[axLetter],\r\n            calendar: traceOut.calendar,\r\n            dfltColor: dfltColor,\r\n            bgColor: fullLayout.paper_bgcolor,\r\n            autotypenumbersDflt: fullLayout.autotypenumbers,\r\n            fullLayout: fullLayout\r\n        };\r\n\r\n        handleAxisDefaults(axIn, axOut, defaultOptions);\r\n        axOut._categories = axOut._categories || [];\r\n\r\n        // so we don't have to repeat autotype unnecessarily,\r\n        // copy an autotype back to traceIn\r\n        if(!traceIn[axName] && axIn.type !== '-') {\r\n            traceIn[axName] = {type: axIn.type};\r\n        }\r\n    });\r\n}\r\n"]},"metadata":{},"sourceType":"script"}