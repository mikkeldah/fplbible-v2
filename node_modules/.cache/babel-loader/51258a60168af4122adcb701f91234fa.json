{"ast":null,"code":"'use strict';\n\nvar createMesh = require('gl-mesh3d');\n\nvar parseColorScale = require('../../lib/gl_format_color').parseColorScale;\n\nvar str2RgbaArray = require('../../lib/str2rgbarray');\n\nvar extractOpts = require('../../components/colorscale').extractOpts;\n\nvar zip3 = require('../../plots/gl3d/zip3');\n\nvar findNearestOnAxis = require('../isosurface/convert').findNearestOnAxis;\n\nvar generateIsoMeshes = require('../isosurface/convert').generateIsoMeshes;\n\nfunction VolumeTrace(scene, mesh, uid) {\n  this.scene = scene;\n  this.uid = uid;\n  this.mesh = mesh;\n  this.name = '';\n  this.data = null;\n  this.showContour = false;\n}\n\nvar proto = VolumeTrace.prototype;\n\nproto.handlePick = function (selection) {\n  if (selection.object === this.mesh) {\n    var rawId = selection.data.index;\n    var x = this.data._meshX[rawId];\n    var y = this.data._meshY[rawId];\n    var z = this.data._meshZ[rawId];\n    var height = this.data._Ys.length;\n    var depth = this.data._Zs.length;\n    var i = findNearestOnAxis(x, this.data._Xs).id;\n    var j = findNearestOnAxis(y, this.data._Ys).id;\n    var k = findNearestOnAxis(z, this.data._Zs).id;\n    var selectIndex = selection.index = k + depth * j + depth * height * i;\n    selection.traceCoordinate = [this.data._meshX[selectIndex], this.data._meshY[selectIndex], this.data._meshZ[selectIndex], this.data._value[selectIndex]];\n    var text = this.data.hovertext || this.data.text;\n\n    if (Array.isArray(text) && text[selectIndex] !== undefined) {\n      selection.textLabel = text[selectIndex];\n    } else if (text) {\n      selection.textLabel = text;\n    }\n\n    return true;\n  }\n};\n\nproto.update = function (data) {\n  var scene = this.scene;\n  var layout = scene.fullSceneLayout;\n  this.data = generateIsoMeshes(data); // Unpack position data\n\n  function toDataCoords(axis, coord, scale, calendar) {\n    return coord.map(function (x) {\n      return axis.d2l(x, 0, calendar) * scale;\n    });\n  }\n\n  var positions = zip3(toDataCoords(layout.xaxis, data._meshX, scene.dataScale[0], data.xcalendar), toDataCoords(layout.yaxis, data._meshY, scene.dataScale[1], data.ycalendar), toDataCoords(layout.zaxis, data._meshZ, scene.dataScale[2], data.zcalendar));\n  var cells = zip3(data._meshI, data._meshJ, data._meshK);\n  var config = {\n    positions: positions,\n    cells: cells,\n    lightPosition: [data.lightposition.x, data.lightposition.y, data.lightposition.z],\n    ambient: data.lighting.ambient,\n    diffuse: data.lighting.diffuse,\n    specular: data.lighting.specular,\n    roughness: data.lighting.roughness,\n    fresnel: data.lighting.fresnel,\n    vertexNormalsEpsilon: data.lighting.vertexnormalsepsilon,\n    faceNormalsEpsilon: data.lighting.facenormalsepsilon,\n    opacity: data.opacity,\n    opacityscale: data.opacityscale,\n    contourEnable: data.contour.show,\n    contourColor: str2RgbaArray(data.contour.color).slice(0, 3),\n    contourWidth: data.contour.width,\n    useFacetNormals: data.flatshading\n  };\n  var cOpts = extractOpts(data);\n  config.vertexIntensity = data._meshIntensity;\n  config.vertexIntensityBounds = [cOpts.min, cOpts.max];\n  config.colormap = parseColorScale(data); // Update mesh\n\n  this.mesh.update(config);\n};\n\nproto.dispose = function () {\n  this.scene.glplot.remove(this.mesh);\n  this.mesh.dispose();\n};\n\nfunction createVolumeTrace(scene, data) {\n  var gl = scene.glplot.gl;\n  var mesh = createMesh({\n    gl: gl\n  });\n  var result = new VolumeTrace(scene, mesh, data.uid);\n  mesh._trace = result;\n  result.update(data);\n  scene.glplot.add(mesh);\n  return result;\n}\n\nmodule.exports = createVolumeTrace;","map":{"version":3,"sources":["C:/Users/mikke/VSC/fantasy-django-react/fantasy-django/fantasy-react-app/node_modules/plotly.js/src/traces/volume/convert.js"],"names":["createMesh","require","parseColorScale","str2RgbaArray","extractOpts","zip3","findNearestOnAxis","generateIsoMeshes","VolumeTrace","scene","mesh","uid","name","data","showContour","proto","prototype","handlePick","selection","object","rawId","index","x","_meshX","y","_meshY","z","_meshZ","height","_Ys","length","depth","_Zs","i","_Xs","id","j","k","selectIndex","traceCoordinate","_value","text","hovertext","Array","isArray","undefined","textLabel","update","layout","fullSceneLayout","toDataCoords","axis","coord","scale","calendar","map","d2l","positions","xaxis","dataScale","xcalendar","yaxis","ycalendar","zaxis","zcalendar","cells","_meshI","_meshJ","_meshK","config","lightPosition","lightposition","ambient","lighting","diffuse","specular","roughness","fresnel","vertexNormalsEpsilon","vertexnormalsepsilon","faceNormalsEpsilon","facenormalsepsilon","opacity","opacityscale","contourEnable","contour","show","contourColor","color","slice","contourWidth","width","useFacetNormals","flatshading","cOpts","vertexIntensity","_meshIntensity","vertexIntensityBounds","min","max","colormap","dispose","glplot","remove","createVolumeTrace","gl","result","_trace","add","module","exports"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nvar createMesh = require('gl-mesh3d');\r\n\r\nvar parseColorScale = require('../../lib/gl_format_color').parseColorScale;\r\nvar str2RgbaArray = require('../../lib/str2rgbarray');\r\nvar extractOpts = require('../../components/colorscale').extractOpts;\r\nvar zip3 = require('../../plots/gl3d/zip3');\r\n\r\nvar findNearestOnAxis = require('../isosurface/convert').findNearestOnAxis;\r\nvar generateIsoMeshes = require('../isosurface/convert').generateIsoMeshes;\r\n\r\nfunction VolumeTrace(scene, mesh, uid) {\r\n    this.scene = scene;\r\n    this.uid = uid;\r\n    this.mesh = mesh;\r\n    this.name = '';\r\n    this.data = null;\r\n    this.showContour = false;\r\n}\r\n\r\nvar proto = VolumeTrace.prototype;\r\n\r\nproto.handlePick = function(selection) {\r\n    if(selection.object === this.mesh) {\r\n        var rawId = selection.data.index;\r\n\r\n        var x = this.data._meshX[rawId];\r\n        var y = this.data._meshY[rawId];\r\n        var z = this.data._meshZ[rawId];\r\n\r\n        var height = this.data._Ys.length;\r\n        var depth = this.data._Zs.length;\r\n\r\n        var i = findNearestOnAxis(x, this.data._Xs).id;\r\n        var j = findNearestOnAxis(y, this.data._Ys).id;\r\n        var k = findNearestOnAxis(z, this.data._Zs).id;\r\n\r\n        var selectIndex = selection.index = k + depth * j + depth * height * i;\r\n\r\n        selection.traceCoordinate = [\r\n            this.data._meshX[selectIndex],\r\n            this.data._meshY[selectIndex],\r\n            this.data._meshZ[selectIndex],\r\n            this.data._value[selectIndex]\r\n        ];\r\n\r\n        var text = this.data.hovertext || this.data.text;\r\n        if(Array.isArray(text) && text[selectIndex] !== undefined) {\r\n            selection.textLabel = text[selectIndex];\r\n        } else if(text) {\r\n            selection.textLabel = text;\r\n        }\r\n\r\n        return true;\r\n    }\r\n};\r\n\r\nproto.update = function(data) {\r\n    var scene = this.scene;\r\n    var layout = scene.fullSceneLayout;\r\n\r\n    this.data = generateIsoMeshes(data);\r\n\r\n    // Unpack position data\r\n    function toDataCoords(axis, coord, scale, calendar) {\r\n        return coord.map(function(x) {\r\n            return axis.d2l(x, 0, calendar) * scale;\r\n        });\r\n    }\r\n\r\n    var positions = zip3(\r\n        toDataCoords(layout.xaxis, data._meshX, scene.dataScale[0], data.xcalendar),\r\n        toDataCoords(layout.yaxis, data._meshY, scene.dataScale[1], data.ycalendar),\r\n        toDataCoords(layout.zaxis, data._meshZ, scene.dataScale[2], data.zcalendar));\r\n\r\n    var cells = zip3(data._meshI, data._meshJ, data._meshK);\r\n\r\n    var config = {\r\n        positions: positions,\r\n        cells: cells,\r\n        lightPosition: [data.lightposition.x, data.lightposition.y, data.lightposition.z],\r\n        ambient: data.lighting.ambient,\r\n        diffuse: data.lighting.diffuse,\r\n        specular: data.lighting.specular,\r\n        roughness: data.lighting.roughness,\r\n        fresnel: data.lighting.fresnel,\r\n        vertexNormalsEpsilon: data.lighting.vertexnormalsepsilon,\r\n        faceNormalsEpsilon: data.lighting.facenormalsepsilon,\r\n        opacity: data.opacity,\r\n        opacityscale: data.opacityscale,\r\n        contourEnable: data.contour.show,\r\n        contourColor: str2RgbaArray(data.contour.color).slice(0, 3),\r\n        contourWidth: data.contour.width,\r\n        useFacetNormals: data.flatshading\r\n    };\r\n\r\n    var cOpts = extractOpts(data);\r\n    config.vertexIntensity = data._meshIntensity;\r\n    config.vertexIntensityBounds = [cOpts.min, cOpts.max];\r\n    config.colormap = parseColorScale(data);\r\n\r\n    // Update mesh\r\n    this.mesh.update(config);\r\n};\r\n\r\nproto.dispose = function() {\r\n    this.scene.glplot.remove(this.mesh);\r\n    this.mesh.dispose();\r\n};\r\n\r\nfunction createVolumeTrace(scene, data) {\r\n    var gl = scene.glplot.gl;\r\n    var mesh = createMesh({gl: gl});\r\n    var result = new VolumeTrace(scene, mesh, data.uid);\r\n\r\n    mesh._trace = result;\r\n    result.update(data);\r\n    scene.glplot.add(mesh);\r\n    return result;\r\n}\r\n\r\nmodule.exports = createVolumeTrace;\r\n"]},"metadata":{},"sourceType":"script"}