{"ast":null,"code":"'use strict';\n\nvar Lib = require('../lib');\n\nvar PlotSchema = require('../plot_api/plot_schema');\n\nvar Plots = require('../plots/plots');\n\nvar pointsAccessorFunction = require('./helpers').pointsAccessorFunction;\n\nexports.moduleType = 'transform';\nexports.name = 'groupby';\nexports.attributes = {\n  enabled: {\n    valType: 'boolean',\n    dflt: true,\n    editType: 'calc',\n    description: ['Determines whether this group-by transform is enabled or disabled.'].join(' ')\n  },\n  groups: {\n    valType: 'data_array',\n    dflt: [],\n    editType: 'calc',\n    description: ['Sets the groups in which the trace data will be split.', 'For example, with `x` set to *[1, 2, 3, 4]* and', '`groups` set to *[\\'a\\', \\'b\\', \\'a\\', \\'b\\']*,', 'the groupby transform with split in one trace', 'with `x` [1, 3] and one trace with `x` [2, 4].'].join(' ')\n  },\n  nameformat: {\n    valType: 'string',\n    editType: 'calc',\n    description: ['Pattern by which grouped traces are named. If only one trace is present,', 'defaults to the group name (`\"%{group}\"`), otherwise defaults to the group name', 'with trace name (`\"%{group} (%{trace})\"`). Available escape sequences are `%{group}`, which', 'inserts the group name, and `%{trace}`, which inserts the trace name. If grouping', 'GDP data by country when more than one trace is present, for example, the', 'default \"%{group} (%{trace})\" would return \"Monaco (GDP per capita)\".'].join(' ')\n  },\n  styles: {\n    _isLinkedToArray: 'style',\n    target: {\n      valType: 'string',\n      editType: 'calc',\n      description: ['The group value which receives these styles.'].join(' ')\n    },\n    value: {\n      valType: 'any',\n      dflt: {},\n      editType: 'calc',\n      description: ['Sets each group styles.', 'For example, with `groups` set to *[\\'a\\', \\'b\\', \\'a\\', \\'b\\']*', 'and `styles` set to *[{target: \\'a\\', value: { marker: { color: \\'red\\' } }}]', 'marker points in group *\\'a\\'* will be drawn in red.'].join(' '),\n      _compareAsJSON: true\n    },\n    editType: 'calc'\n  },\n  editType: 'calc'\n};\n/**\r\n * Supply transform attributes defaults\r\n *\r\n * @param {object} transformIn\r\n *  object linked to trace.transforms[i] with 'type' set to exports.name\r\n * @param {object} traceOut\r\n *  the _fullData trace this transform applies to\r\n * @param {object} layout\r\n *  the plot's (not-so-full) layout\r\n * @param {object} traceIn\r\n *  the input data trace this transform applies to\r\n *\r\n * @return {object} transformOut\r\n *  copy of transformIn that contains attribute defaults\r\n */\n\nexports.supplyDefaults = function (transformIn, traceOut, layout) {\n  var i;\n  var transformOut = {};\n\n  function coerce(attr, dflt) {\n    return Lib.coerce(transformIn, transformOut, exports.attributes, attr, dflt);\n  }\n\n  var enabled = coerce('enabled');\n  if (!enabled) return transformOut;\n  coerce('groups');\n  coerce('nameformat', layout._dataLength > 1 ? '%{group} (%{trace})' : '%{group}');\n  var styleIn = transformIn.styles;\n  var styleOut = transformOut.styles = [];\n\n  if (styleIn) {\n    for (i = 0; i < styleIn.length; i++) {\n      var thisStyle = styleOut[i] = {};\n      Lib.coerce(styleIn[i], styleOut[i], exports.attributes.styles, 'target');\n      var value = Lib.coerce(styleIn[i], styleOut[i], exports.attributes.styles, 'value'); // so that you can edit value in place and have Plotly.react notice it, or\n      // rebuild it every time and have Plotly.react NOT think it changed:\n      // use _compareAsJSON to say we should diff the _JSON_value\n\n      if (Lib.isPlainObject(value)) thisStyle.value = Lib.extendDeep({}, value);else if (value) delete thisStyle.value;\n    }\n  }\n\n  return transformOut;\n};\n/**\r\n * Apply transform !!!\r\n *\r\n * @param {array} data\r\n *  array of transformed traces (is [fullTrace] upon first transform)\r\n *\r\n * @param {object} state\r\n *  state object which includes:\r\n *      - transform {object} full transform attributes\r\n *      - fullTrace {object} full trace object which is being transformed\r\n *      - fullData {array} full pre-transform(s) data array\r\n *      - layout {object} the plot's (not-so-full) layout\r\n *\r\n * @return {object} newData\r\n *  array of transformed traces\r\n */\n\n\nexports.transform = function (data, state) {\n  var newTraces, i, j;\n  var newData = [];\n\n  for (i = 0; i < data.length; i++) {\n    newTraces = transformOne(data[i], state);\n\n    for (j = 0; j < newTraces.length; j++) {\n      newData.push(newTraces[j]);\n    }\n  }\n\n  return newData;\n};\n\nfunction transformOne(trace, state) {\n  var i, j, k, attr, srcArray, groupName, newTrace, transforms, arrayLookup;\n  var groupNameObj;\n  var opts = state.transform;\n  var transformIndex = state.transformIndex;\n  var groups = trace.transforms[transformIndex].groups;\n  var originalPointsAccessor = pointsAccessorFunction(trace.transforms, opts);\n\n  if (!Lib.isArrayOrTypedArray(groups) || groups.length === 0) {\n    return [trace];\n  }\n\n  var groupNames = Lib.filterUnique(groups);\n  var newData = new Array(groupNames.length);\n  var len = groups.length;\n  var arrayAttrs = PlotSchema.findArrayAttributes(trace);\n  var styles = opts.styles || [];\n  var styleLookup = {};\n\n  for (i = 0; i < styles.length; i++) {\n    styleLookup[styles[i].target] = styles[i].value;\n  }\n\n  if (opts.styles) {\n    groupNameObj = Lib.keyedContainer(opts, 'styles', 'target', 'value.name');\n  } // An index to map group name --> expanded trace index\n\n\n  var indexLookup = {};\n  var indexCnts = {};\n\n  for (i = 0; i < groupNames.length; i++) {\n    groupName = groupNames[i];\n    indexLookup[groupName] = i;\n    indexCnts[groupName] = 0; // Start with a deep extend that just copies array references.\n\n    newTrace = newData[i] = Lib.extendDeepNoArrays({}, trace);\n    newTrace._group = groupName;\n    newTrace.transforms[transformIndex]._indexToPoints = {};\n    var suppliedName = null;\n\n    if (groupNameObj) {\n      suppliedName = groupNameObj.get(groupName);\n    }\n\n    if (suppliedName || suppliedName === '') {\n      newTrace.name = suppliedName;\n    } else {\n      newTrace.name = Lib.templateString(opts.nameformat, {\n        trace: trace.name,\n        group: groupName\n      });\n    } // In order for groups to apply correctly to other transform data (e.g.\n    // a filter transform), we have to break the connection and clone the\n    // transforms so that each group writes grouped values into a different\n    // destination. This function does not break the array reference\n    // connection between the split transforms it creates. That's handled in\n    // initialize, which creates a new empty array for each arrayAttr.\n\n\n    transforms = newTrace.transforms;\n    newTrace.transforms = [];\n\n    for (j = 0; j < transforms.length; j++) {\n      newTrace.transforms[j] = Lib.extendDeepNoArrays({}, transforms[j]);\n    } // Initialize empty arrays for the arrayAttrs, to be split in the next step\n\n\n    for (j = 0; j < arrayAttrs.length; j++) {\n      Lib.nestedProperty(newTrace, arrayAttrs[j]).set([]);\n    }\n  } // For each array attribute including those nested inside this and other\n  // transforms (small note that we technically only need to do this for\n  // transforms that have not yet been applied):\n\n\n  for (k = 0; k < arrayAttrs.length; k++) {\n    attr = arrayAttrs[k]; // Cache all the arrays to which we'll push:\n\n    for (j = 0, arrayLookup = []; j < groupNames.length; j++) {\n      arrayLookup[j] = Lib.nestedProperty(newData[j], attr).get();\n    } // Get the input data:\n\n\n    srcArray = Lib.nestedProperty(trace, attr).get(); // Send each data point to the appropriate expanded trace:\n\n    for (j = 0; j < len; j++) {\n      // Map group data --> trace index --> array and push data onto it\n      arrayLookup[indexLookup[groups[j]]].push(srcArray[j]);\n    }\n  }\n\n  for (j = 0; j < len; j++) {\n    newTrace = newData[indexLookup[groups[j]]];\n    var indexToPoints = newTrace.transforms[transformIndex]._indexToPoints;\n    indexToPoints[indexCnts[groups[j]]] = originalPointsAccessor(j);\n    indexCnts[groups[j]]++;\n  }\n\n  for (i = 0; i < groupNames.length; i++) {\n    groupName = groupNames[i];\n    newTrace = newData[i];\n    Plots.clearExpandedTraceDefaultColors(newTrace); // there's no need to coerce styleLookup[groupName] here\n    // as another round of supplyDefaults is done on the transformed traces\n\n    newTrace = Lib.extendDeepNoArrays(newTrace, styleLookup[groupName] || {});\n  }\n\n  return newData;\n}","map":{"version":3,"sources":["C:/Users/mikke/VSC/fantasy-django-react/fantasy-django/fantasy-react-app/node_modules/plotly.js/src/transforms/groupby.js"],"names":["Lib","require","PlotSchema","Plots","pointsAccessorFunction","exports","moduleType","name","attributes","enabled","valType","dflt","editType","description","join","groups","nameformat","styles","_isLinkedToArray","target","value","_compareAsJSON","supplyDefaults","transformIn","traceOut","layout","i","transformOut","coerce","attr","_dataLength","styleIn","styleOut","length","thisStyle","isPlainObject","extendDeep","transform","data","state","newTraces","j","newData","transformOne","push","trace","k","srcArray","groupName","newTrace","transforms","arrayLookup","groupNameObj","opts","transformIndex","originalPointsAccessor","isArrayOrTypedArray","groupNames","filterUnique","Array","len","arrayAttrs","findArrayAttributes","styleLookup","keyedContainer","indexLookup","indexCnts","extendDeepNoArrays","_group","_indexToPoints","suppliedName","get","templateString","group","nestedProperty","set","indexToPoints","clearExpandedTraceDefaultColors"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nvar Lib = require('../lib');\r\nvar PlotSchema = require('../plot_api/plot_schema');\r\nvar Plots = require('../plots/plots');\r\nvar pointsAccessorFunction = require('./helpers').pointsAccessorFunction;\r\n\r\nexports.moduleType = 'transform';\r\n\r\nexports.name = 'groupby';\r\n\r\nexports.attributes = {\r\n    enabled: {\r\n        valType: 'boolean',\r\n        dflt: true,\r\n        editType: 'calc',\r\n        description: [\r\n            'Determines whether this group-by transform is enabled or disabled.'\r\n        ].join(' ')\r\n    },\r\n    groups: {\r\n        valType: 'data_array',\r\n        dflt: [],\r\n        editType: 'calc',\r\n        description: [\r\n            'Sets the groups in which the trace data will be split.',\r\n            'For example, with `x` set to *[1, 2, 3, 4]* and',\r\n            '`groups` set to *[\\'a\\', \\'b\\', \\'a\\', \\'b\\']*,',\r\n            'the groupby transform with split in one trace',\r\n            'with `x` [1, 3] and one trace with `x` [2, 4].'\r\n        ].join(' ')\r\n    },\r\n    nameformat: {\r\n        valType: 'string',\r\n        editType: 'calc',\r\n        description: [\r\n            'Pattern by which grouped traces are named. If only one trace is present,',\r\n            'defaults to the group name (`\"%{group}\"`), otherwise defaults to the group name',\r\n            'with trace name (`\"%{group} (%{trace})\"`). Available escape sequences are `%{group}`, which',\r\n            'inserts the group name, and `%{trace}`, which inserts the trace name. If grouping',\r\n            'GDP data by country when more than one trace is present, for example, the',\r\n            'default \"%{group} (%{trace})\" would return \"Monaco (GDP per capita)\".'\r\n        ].join(' ')\r\n    },\r\n    styles: {\r\n        _isLinkedToArray: 'style',\r\n        target: {\r\n            valType: 'string',\r\n            editType: 'calc',\r\n            description: [\r\n                'The group value which receives these styles.'\r\n            ].join(' ')\r\n        },\r\n        value: {\r\n            valType: 'any',\r\n            dflt: {},\r\n            editType: 'calc',\r\n            description: [\r\n                'Sets each group styles.',\r\n                'For example, with `groups` set to *[\\'a\\', \\'b\\', \\'a\\', \\'b\\']*',\r\n                'and `styles` set to *[{target: \\'a\\', value: { marker: { color: \\'red\\' } }}]',\r\n                'marker points in group *\\'a\\'* will be drawn in red.'\r\n            ].join(' '),\r\n            _compareAsJSON: true\r\n        },\r\n        editType: 'calc'\r\n    },\r\n    editType: 'calc'\r\n};\r\n\r\n/**\r\n * Supply transform attributes defaults\r\n *\r\n * @param {object} transformIn\r\n *  object linked to trace.transforms[i] with 'type' set to exports.name\r\n * @param {object} traceOut\r\n *  the _fullData trace this transform applies to\r\n * @param {object} layout\r\n *  the plot's (not-so-full) layout\r\n * @param {object} traceIn\r\n *  the input data trace this transform applies to\r\n *\r\n * @return {object} transformOut\r\n *  copy of transformIn that contains attribute defaults\r\n */\r\nexports.supplyDefaults = function(transformIn, traceOut, layout) {\r\n    var i;\r\n    var transformOut = {};\r\n\r\n    function coerce(attr, dflt) {\r\n        return Lib.coerce(transformIn, transformOut, exports.attributes, attr, dflt);\r\n    }\r\n\r\n    var enabled = coerce('enabled');\r\n\r\n    if(!enabled) return transformOut;\r\n\r\n    coerce('groups');\r\n    coerce('nameformat', layout._dataLength > 1 ? '%{group} (%{trace})' : '%{group}');\r\n\r\n    var styleIn = transformIn.styles;\r\n    var styleOut = transformOut.styles = [];\r\n\r\n    if(styleIn) {\r\n        for(i = 0; i < styleIn.length; i++) {\r\n            var thisStyle = styleOut[i] = {};\r\n            Lib.coerce(styleIn[i], styleOut[i], exports.attributes.styles, 'target');\r\n            var value = Lib.coerce(styleIn[i], styleOut[i], exports.attributes.styles, 'value');\r\n\r\n            // so that you can edit value in place and have Plotly.react notice it, or\r\n            // rebuild it every time and have Plotly.react NOT think it changed:\r\n            // use _compareAsJSON to say we should diff the _JSON_value\r\n            if(Lib.isPlainObject(value)) thisStyle.value = Lib.extendDeep({}, value);\r\n            else if(value) delete thisStyle.value;\r\n        }\r\n    }\r\n\r\n    return transformOut;\r\n};\r\n\r\n\r\n/**\r\n * Apply transform !!!\r\n *\r\n * @param {array} data\r\n *  array of transformed traces (is [fullTrace] upon first transform)\r\n *\r\n * @param {object} state\r\n *  state object which includes:\r\n *      - transform {object} full transform attributes\r\n *      - fullTrace {object} full trace object which is being transformed\r\n *      - fullData {array} full pre-transform(s) data array\r\n *      - layout {object} the plot's (not-so-full) layout\r\n *\r\n * @return {object} newData\r\n *  array of transformed traces\r\n */\r\nexports.transform = function(data, state) {\r\n    var newTraces, i, j;\r\n    var newData = [];\r\n\r\n    for(i = 0; i < data.length; i++) {\r\n        newTraces = transformOne(data[i], state);\r\n\r\n        for(j = 0; j < newTraces.length; j++) {\r\n            newData.push(newTraces[j]);\r\n        }\r\n    }\r\n\r\n    return newData;\r\n};\r\n\r\nfunction transformOne(trace, state) {\r\n    var i, j, k, attr, srcArray, groupName, newTrace, transforms, arrayLookup;\r\n    var groupNameObj;\r\n\r\n    var opts = state.transform;\r\n    var transformIndex = state.transformIndex;\r\n    var groups = trace.transforms[transformIndex].groups;\r\n    var originalPointsAccessor = pointsAccessorFunction(trace.transforms, opts);\r\n\r\n    if(!(Lib.isArrayOrTypedArray(groups)) || groups.length === 0) {\r\n        return [trace];\r\n    }\r\n\r\n    var groupNames = Lib.filterUnique(groups);\r\n    var newData = new Array(groupNames.length);\r\n    var len = groups.length;\r\n\r\n    var arrayAttrs = PlotSchema.findArrayAttributes(trace);\r\n\r\n    var styles = opts.styles || [];\r\n    var styleLookup = {};\r\n    for(i = 0; i < styles.length; i++) {\r\n        styleLookup[styles[i].target] = styles[i].value;\r\n    }\r\n\r\n    if(opts.styles) {\r\n        groupNameObj = Lib.keyedContainer(opts, 'styles', 'target', 'value.name');\r\n    }\r\n\r\n    // An index to map group name --> expanded trace index\r\n    var indexLookup = {};\r\n    var indexCnts = {};\r\n\r\n    for(i = 0; i < groupNames.length; i++) {\r\n        groupName = groupNames[i];\r\n        indexLookup[groupName] = i;\r\n        indexCnts[groupName] = 0;\r\n\r\n        // Start with a deep extend that just copies array references.\r\n        newTrace = newData[i] = Lib.extendDeepNoArrays({}, trace);\r\n        newTrace._group = groupName;\r\n        newTrace.transforms[transformIndex]._indexToPoints = {};\r\n\r\n        var suppliedName = null;\r\n        if(groupNameObj) {\r\n            suppliedName = groupNameObj.get(groupName);\r\n        }\r\n\r\n        if(suppliedName || suppliedName === '') {\r\n            newTrace.name = suppliedName;\r\n        } else {\r\n            newTrace.name = Lib.templateString(opts.nameformat, {\r\n                trace: trace.name,\r\n                group: groupName\r\n            });\r\n        }\r\n\r\n        // In order for groups to apply correctly to other transform data (e.g.\r\n        // a filter transform), we have to break the connection and clone the\r\n        // transforms so that each group writes grouped values into a different\r\n        // destination. This function does not break the array reference\r\n        // connection between the split transforms it creates. That's handled in\r\n        // initialize, which creates a new empty array for each arrayAttr.\r\n        transforms = newTrace.transforms;\r\n        newTrace.transforms = [];\r\n        for(j = 0; j < transforms.length; j++) {\r\n            newTrace.transforms[j] = Lib.extendDeepNoArrays({}, transforms[j]);\r\n        }\r\n\r\n        // Initialize empty arrays for the arrayAttrs, to be split in the next step\r\n        for(j = 0; j < arrayAttrs.length; j++) {\r\n            Lib.nestedProperty(newTrace, arrayAttrs[j]).set([]);\r\n        }\r\n    }\r\n\r\n    // For each array attribute including those nested inside this and other\r\n    // transforms (small note that we technically only need to do this for\r\n    // transforms that have not yet been applied):\r\n    for(k = 0; k < arrayAttrs.length; k++) {\r\n        attr = arrayAttrs[k];\r\n\r\n        // Cache all the arrays to which we'll push:\r\n        for(j = 0, arrayLookup = []; j < groupNames.length; j++) {\r\n            arrayLookup[j] = Lib.nestedProperty(newData[j], attr).get();\r\n        }\r\n\r\n        // Get the input data:\r\n        srcArray = Lib.nestedProperty(trace, attr).get();\r\n\r\n        // Send each data point to the appropriate expanded trace:\r\n        for(j = 0; j < len; j++) {\r\n            // Map group data --> trace index --> array and push data onto it\r\n            arrayLookup[indexLookup[groups[j]]].push(srcArray[j]);\r\n        }\r\n    }\r\n\r\n    for(j = 0; j < len; j++) {\r\n        newTrace = newData[indexLookup[groups[j]]];\r\n\r\n        var indexToPoints = newTrace.transforms[transformIndex]._indexToPoints;\r\n        indexToPoints[indexCnts[groups[j]]] = originalPointsAccessor(j);\r\n        indexCnts[groups[j]]++;\r\n    }\r\n\r\n    for(i = 0; i < groupNames.length; i++) {\r\n        groupName = groupNames[i];\r\n        newTrace = newData[i];\r\n\r\n        Plots.clearExpandedTraceDefaultColors(newTrace);\r\n\r\n        // there's no need to coerce styleLookup[groupName] here\r\n        // as another round of supplyDefaults is done on the transformed traces\r\n        newTrace = Lib.extendDeepNoArrays(newTrace, styleLookup[groupName] || {});\r\n    }\r\n\r\n    return newData;\r\n}\r\n"]},"metadata":{},"sourceType":"script"}