{"ast":null,"code":"'use strict';\n\nvar boxAttrs = require('../box/attributes');\n\nvar extendFlat = require('../../lib/extend').extendFlat;\n\nvar axisHoverFormat = require('../../plots/hoverformat_attributes');\n\nmodule.exports = {\n  y: boxAttrs.y,\n  x: boxAttrs.x,\n  x0: boxAttrs.x0,\n  y0: boxAttrs.y0,\n  xhoverformat: axisHoverFormat('x'),\n  yhoverformat: axisHoverFormat('y'),\n  name: extendFlat({}, boxAttrs.name, {\n    description: ['Sets the trace name.', 'The trace name appear as the legend item and on hover.', 'For violin traces, the name will also be used for the position', 'coordinate, if `x` and `x0` (`y` and `y0` if horizontal) are', 'missing and the position axis is categorical.', 'Note that the trace name is also used as a default value', 'for attribute `scalegroup` (please see its description for details).'].join(' ')\n  }),\n  orientation: extendFlat({}, boxAttrs.orientation, {\n    description: ['Sets the orientation of the violin(s).', 'If *v* (*h*), the distribution is visualized along', 'the vertical (horizontal).'].join(' ')\n  }),\n  bandwidth: {\n    valType: 'number',\n    min: 0,\n    editType: 'calc',\n    description: ['Sets the bandwidth used to compute the kernel density estimate.', 'By default, the bandwidth is determined by Silverman\\'s rule of thumb.'].join(' ')\n  },\n  scalegroup: {\n    valType: 'string',\n    dflt: '',\n    editType: 'calc',\n    description: ['If there are multiple violins that should be sized according to', 'to some metric (see `scalemode`), link them by providing a non-empty group id here', 'shared by every trace in the same group.', 'If a violin\\'s `width` is undefined, `scalegroup` will default to the trace\\'s name.', 'In this case, violins with the same names will be linked together'].join(' ')\n  },\n  scalemode: {\n    valType: 'enumerated',\n    values: ['width', 'count'],\n    dflt: 'width',\n    editType: 'calc',\n    description: ['Sets the metric by which the width of each violin is determined.', '*width* means each violin has the same (max) width', '*count* means the violins are scaled by the number of sample points making', 'up each violin.'].join('')\n  },\n  spanmode: {\n    valType: 'enumerated',\n    values: ['soft', 'hard', 'manual'],\n    dflt: 'soft',\n    editType: 'calc',\n    description: ['Sets the method by which the span in data space where the density function will be computed.', '*soft* means the span goes from the sample\\'s minimum value minus two bandwidths', 'to the sample\\'s maximum value plus two bandwidths.', '*hard* means the span goes from the sample\\'s minimum to its maximum value.', 'For custom span settings, use mode *manual* and fill in the `span` attribute.'].join(' ')\n  },\n  span: {\n    valType: 'info_array',\n    items: [{\n      valType: 'any',\n      editType: 'calc'\n    }, {\n      valType: 'any',\n      editType: 'calc'\n    }],\n    editType: 'calc',\n    description: ['Sets the span in data space for which the density function will be computed.', 'Has an effect only when `spanmode` is set to *manual*.'].join(' ')\n  },\n  line: {\n    color: {\n      valType: 'color',\n      editType: 'style',\n      description: 'Sets the color of line bounding the violin(s).'\n    },\n    width: {\n      valType: 'number',\n      min: 0,\n      dflt: 2,\n      editType: 'style',\n      description: 'Sets the width (in px) of line bounding the violin(s).'\n    },\n    editType: 'plot'\n  },\n  fillcolor: boxAttrs.fillcolor,\n  points: extendFlat({}, boxAttrs.boxpoints, {\n    description: ['If *outliers*, only the sample points lying outside the whiskers', 'are shown', 'If *suspectedoutliers*, the outlier points are shown and', 'points either less than 4*Q1-3*Q3 or greater than 4*Q3-3*Q1', 'are highlighted (see `outliercolor`)', 'If *all*, all sample points are shown', 'If *false*, only the violins are shown with no sample points.', 'Defaults to *suspectedoutliers* when `marker.outliercolor` or', '`marker.line.outliercolor` is set,', 'otherwise defaults to *outliers*.'].join(' ')\n  }),\n  jitter: extendFlat({}, boxAttrs.jitter, {\n    description: ['Sets the amount of jitter in the sample points drawn.', 'If *0*, the sample points align along the distribution axis.', 'If *1*, the sample points are drawn in a random jitter of width', 'equal to the width of the violins.'].join(' ')\n  }),\n  pointpos: extendFlat({}, boxAttrs.pointpos, {\n    description: ['Sets the position of the sample points in relation to the violins.', 'If *0*, the sample points are places over the center of the violins.', 'Positive (negative) values correspond to positions to the', 'right (left) for vertical violins and above (below) for horizontal violins.'].join(' ')\n  }),\n  width: extendFlat({}, boxAttrs.width, {\n    description: ['Sets the width of the violin in data coordinates.', 'If *0* (default value) the width is automatically selected based on the positions', 'of other violin traces in the same subplot.'].join(' ')\n  }),\n  marker: boxAttrs.marker,\n  text: boxAttrs.text,\n  hovertext: boxAttrs.hovertext,\n  hovertemplate: boxAttrs.hovertemplate,\n  box: {\n    visible: {\n      valType: 'boolean',\n      dflt: false,\n      editType: 'plot',\n      description: ['Determines if an miniature box plot is drawn inside the violins. '].join(' ')\n    },\n    width: {\n      valType: 'number',\n      min: 0,\n      max: 1,\n      dflt: 0.25,\n      editType: 'plot',\n      description: ['Sets the width of the inner box plots relative to', 'the violins\\' width.', 'For example, with 1, the inner box plots are as wide as the violins.'].join(' ')\n    },\n    fillcolor: {\n      valType: 'color',\n      editType: 'style',\n      description: 'Sets the inner box plot fill color.'\n    },\n    line: {\n      color: {\n        valType: 'color',\n        editType: 'style',\n        description: 'Sets the inner box plot bounding line color.'\n      },\n      width: {\n        valType: 'number',\n        min: 0,\n        editType: 'style',\n        description: 'Sets the inner box plot bounding line width.'\n      },\n      editType: 'style'\n    },\n    editType: 'plot'\n  },\n  meanline: {\n    visible: {\n      valType: 'boolean',\n      dflt: false,\n      editType: 'plot',\n      description: ['Determines if a line corresponding to the sample\\'s mean is shown', 'inside the violins.', 'If `box.visible` is turned on, the mean line is drawn inside the inner box.', 'Otherwise, the mean line is drawn from one side of the violin to other.'].join(' ')\n    },\n    color: {\n      valType: 'color',\n      editType: 'style',\n      description: 'Sets the mean line color.'\n    },\n    width: {\n      valType: 'number',\n      min: 0,\n      editType: 'style',\n      description: 'Sets the mean line width.'\n    },\n    editType: 'plot'\n  },\n  side: {\n    valType: 'enumerated',\n    values: ['both', 'positive', 'negative'],\n    dflt: 'both',\n    editType: 'calc',\n    description: ['Determines on which side of the position value the density function making up', 'one half of a violin is plotted.', 'Useful when comparing two violin traces under *overlay* mode, where one trace', 'has `side` set to *positive* and the other to *negative*.'].join(' ')\n  },\n  offsetgroup: boxAttrs.offsetgroup,\n  alignmentgroup: boxAttrs.alignmentgroup,\n  selected: boxAttrs.selected,\n  unselected: boxAttrs.unselected,\n  hoveron: {\n    valType: 'flaglist',\n    flags: ['violins', 'points', 'kde'],\n    dflt: 'violins+points+kde',\n    extras: ['all'],\n    editType: 'style',\n    description: ['Do the hover effects highlight individual violins', 'or sample points or the kernel density estimate or any combination of them?'].join(' ')\n  }\n};","map":{"version":3,"sources":["C:/Users/mikke/VSC/fantasy-django-react/fantasy-django/fantasy-react-app/node_modules/plotly.js/src/traces/violin/attributes.js"],"names":["boxAttrs","require","extendFlat","axisHoverFormat","module","exports","y","x","x0","y0","xhoverformat","yhoverformat","name","description","join","orientation","bandwidth","valType","min","editType","scalegroup","dflt","scalemode","values","spanmode","span","items","line","color","width","fillcolor","points","boxpoints","jitter","pointpos","marker","text","hovertext","hovertemplate","box","visible","max","meanline","side","offsetgroup","alignmentgroup","selected","unselected","hoveron","flags","extras"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nvar boxAttrs = require('../box/attributes');\r\nvar extendFlat = require('../../lib/extend').extendFlat;\r\nvar axisHoverFormat = require('../../plots/hoverformat_attributes');\r\n\r\nmodule.exports = {\r\n    y: boxAttrs.y,\r\n    x: boxAttrs.x,\r\n    x0: boxAttrs.x0,\r\n    y0: boxAttrs.y0,\r\n\r\n    xhoverformat: axisHoverFormat('x'),\r\n    yhoverformat: axisHoverFormat('y'),\r\n\r\n    name: extendFlat({}, boxAttrs.name, {\r\n        description: [\r\n            'Sets the trace name.',\r\n            'The trace name appear as the legend item and on hover.',\r\n            'For violin traces, the name will also be used for the position',\r\n            'coordinate, if `x` and `x0` (`y` and `y0` if horizontal) are',\r\n            'missing and the position axis is categorical.',\r\n            'Note that the trace name is also used as a default value',\r\n            'for attribute `scalegroup` (please see its description for details).'\r\n        ].join(' ')\r\n    }),\r\n    orientation: extendFlat({}, boxAttrs.orientation, {\r\n        description: [\r\n            'Sets the orientation of the violin(s).',\r\n            'If *v* (*h*), the distribution is visualized along',\r\n            'the vertical (horizontal).'\r\n        ].join(' ')\r\n    }),\r\n\r\n    bandwidth: {\r\n        valType: 'number',\r\n        min: 0,\r\n        editType: 'calc',\r\n        description: [\r\n            'Sets the bandwidth used to compute the kernel density estimate.',\r\n            'By default, the bandwidth is determined by Silverman\\'s rule of thumb.'\r\n        ].join(' ')\r\n    },\r\n\r\n    scalegroup: {\r\n        valType: 'string',\r\n        dflt: '',\r\n        editType: 'calc',\r\n        description: [\r\n            'If there are multiple violins that should be sized according to',\r\n            'to some metric (see `scalemode`), link them by providing a non-empty group id here',\r\n            'shared by every trace in the same group.',\r\n            'If a violin\\'s `width` is undefined, `scalegroup` will default to the trace\\'s name.',\r\n            'In this case, violins with the same names will be linked together'\r\n        ].join(' ')\r\n    },\r\n    scalemode: {\r\n        valType: 'enumerated',\r\n        values: ['width', 'count'],\r\n        dflt: 'width',\r\n        editType: 'calc',\r\n        description: [\r\n            'Sets the metric by which the width of each violin is determined.',\r\n            '*width* means each violin has the same (max) width',\r\n            '*count* means the violins are scaled by the number of sample points making',\r\n            'up each violin.'\r\n        ].join('')\r\n    },\r\n\r\n    spanmode: {\r\n        valType: 'enumerated',\r\n        values: ['soft', 'hard', 'manual'],\r\n        dflt: 'soft',\r\n        editType: 'calc',\r\n        description: [\r\n            'Sets the method by which the span in data space where the density function will be computed.',\r\n            '*soft* means the span goes from the sample\\'s minimum value minus two bandwidths',\r\n            'to the sample\\'s maximum value plus two bandwidths.',\r\n            '*hard* means the span goes from the sample\\'s minimum to its maximum value.',\r\n            'For custom span settings, use mode *manual* and fill in the `span` attribute.'\r\n        ].join(' ')\r\n    },\r\n    span: {\r\n        valType: 'info_array',\r\n        items: [\r\n            {valType: 'any', editType: 'calc'},\r\n            {valType: 'any', editType: 'calc'}\r\n        ],\r\n        editType: 'calc',\r\n        description: [\r\n            'Sets the span in data space for which the density function will be computed.',\r\n            'Has an effect only when `spanmode` is set to *manual*.'\r\n        ].join(' ')\r\n    },\r\n\r\n    line: {\r\n        color: {\r\n            valType: 'color',\r\n            editType: 'style',\r\n            description: 'Sets the color of line bounding the violin(s).'\r\n        },\r\n        width: {\r\n            valType: 'number',\r\n            min: 0,\r\n            dflt: 2,\r\n            editType: 'style',\r\n            description: 'Sets the width (in px) of line bounding the violin(s).'\r\n        },\r\n        editType: 'plot'\r\n    },\r\n    fillcolor: boxAttrs.fillcolor,\r\n\r\n    points: extendFlat({}, boxAttrs.boxpoints, {\r\n        description: [\r\n            'If *outliers*, only the sample points lying outside the whiskers',\r\n            'are shown',\r\n            'If *suspectedoutliers*, the outlier points are shown and',\r\n            'points either less than 4*Q1-3*Q3 or greater than 4*Q3-3*Q1',\r\n            'are highlighted (see `outliercolor`)',\r\n            'If *all*, all sample points are shown',\r\n            'If *false*, only the violins are shown with no sample points.',\r\n            'Defaults to *suspectedoutliers* when `marker.outliercolor` or',\r\n            '`marker.line.outliercolor` is set,',\r\n            'otherwise defaults to *outliers*.'\r\n        ].join(' ')\r\n    }),\r\n    jitter: extendFlat({}, boxAttrs.jitter, {\r\n        description: [\r\n            'Sets the amount of jitter in the sample points drawn.',\r\n            'If *0*, the sample points align along the distribution axis.',\r\n            'If *1*, the sample points are drawn in a random jitter of width',\r\n            'equal to the width of the violins.'\r\n        ].join(' ')\r\n    }),\r\n    pointpos: extendFlat({}, boxAttrs.pointpos, {\r\n        description: [\r\n            'Sets the position of the sample points in relation to the violins.',\r\n            'If *0*, the sample points are places over the center of the violins.',\r\n            'Positive (negative) values correspond to positions to the',\r\n            'right (left) for vertical violins and above (below) for horizontal violins.'\r\n        ].join(' ')\r\n    }),\r\n\r\n    width: extendFlat({}, boxAttrs.width, {\r\n        description: [\r\n            'Sets the width of the violin in data coordinates.',\r\n            'If *0* (default value) the width is automatically selected based on the positions',\r\n            'of other violin traces in the same subplot.',\r\n        ].join(' ')\r\n    }),\r\n\r\n    marker: boxAttrs.marker,\r\n    text: boxAttrs.text,\r\n    hovertext: boxAttrs.hovertext,\r\n    hovertemplate: boxAttrs.hovertemplate,\r\n\r\n    box: {\r\n        visible: {\r\n            valType: 'boolean',\r\n            dflt: false,\r\n            editType: 'plot',\r\n            description: [\r\n                'Determines if an miniature box plot is drawn inside the violins. '\r\n            ].join(' ')\r\n        },\r\n        width: {\r\n            valType: 'number',\r\n            min: 0,\r\n            max: 1,\r\n            dflt: 0.25,\r\n            editType: 'plot',\r\n            description: [\r\n                'Sets the width of the inner box plots relative to',\r\n                'the violins\\' width.',\r\n                'For example, with 1, the inner box plots are as wide as the violins.'\r\n            ].join(' ')\r\n        },\r\n        fillcolor: {\r\n            valType: 'color',\r\n            editType: 'style',\r\n            description: 'Sets the inner box plot fill color.'\r\n        },\r\n        line: {\r\n            color: {\r\n                valType: 'color',\r\n                editType: 'style',\r\n                description: 'Sets the inner box plot bounding line color.'\r\n            },\r\n            width: {\r\n                valType: 'number',\r\n                min: 0,\r\n                editType: 'style',\r\n                description: 'Sets the inner box plot bounding line width.'\r\n            },\r\n            editType: 'style'\r\n        },\r\n        editType: 'plot'\r\n    },\r\n\r\n    meanline: {\r\n        visible: {\r\n            valType: 'boolean',\r\n            dflt: false,\r\n            editType: 'plot',\r\n            description: [\r\n                'Determines if a line corresponding to the sample\\'s mean is shown',\r\n                'inside the violins.',\r\n                'If `box.visible` is turned on, the mean line is drawn inside the inner box.',\r\n                'Otherwise, the mean line is drawn from one side of the violin to other.'\r\n            ].join(' ')\r\n        },\r\n        color: {\r\n            valType: 'color',\r\n            editType: 'style',\r\n            description: 'Sets the mean line color.'\r\n        },\r\n        width: {\r\n            valType: 'number',\r\n            min: 0,\r\n            editType: 'style',\r\n            description: 'Sets the mean line width.'\r\n        },\r\n        editType: 'plot'\r\n    },\r\n\r\n    side: {\r\n        valType: 'enumerated',\r\n        values: ['both', 'positive', 'negative'],\r\n        dflt: 'both',\r\n        editType: 'calc',\r\n        description: [\r\n            'Determines on which side of the position value the density function making up',\r\n            'one half of a violin is plotted.',\r\n            'Useful when comparing two violin traces under *overlay* mode, where one trace',\r\n            'has `side` set to *positive* and the other to *negative*.'\r\n        ].join(' ')\r\n    },\r\n\r\n    offsetgroup: boxAttrs.offsetgroup,\r\n    alignmentgroup: boxAttrs.alignmentgroup,\r\n\r\n    selected: boxAttrs.selected,\r\n    unselected: boxAttrs.unselected,\r\n\r\n    hoveron: {\r\n        valType: 'flaglist',\r\n        flags: ['violins', 'points', 'kde'],\r\n        dflt: 'violins+points+kde',\r\n        extras: ['all'],\r\n        editType: 'style',\r\n        description: [\r\n            'Do the hover effects highlight individual violins',\r\n            'or sample points or the kernel density estimate or any combination of them?'\r\n        ].join(' ')\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}