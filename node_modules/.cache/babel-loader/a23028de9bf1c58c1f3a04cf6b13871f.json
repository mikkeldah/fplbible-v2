{"ast":null,"code":"'use strict';\n\nvar d3Hierarchy = require('d3-hierarchy');\n\nvar flipTree = require('../treemap/flip_tree');\n\nmodule.exports = function partition(entry, size, opts) {\n  var flipX = opts.flipX;\n  var flipY = opts.flipY;\n  var swapXY = opts.orientation === 'h';\n  var maxDepth = opts.maxDepth;\n  var newWidth = size[0];\n  var newHeight = size[1];\n\n  if (maxDepth) {\n    newWidth = (entry.height + 1) * size[0] / Math.min(entry.height + 1, maxDepth);\n    newHeight = (entry.height + 1) * size[1] / Math.min(entry.height + 1, maxDepth);\n  }\n\n  var result = d3Hierarchy.partition().padding(opts.pad.inner).size(swapXY ? [size[1], newWidth] : [size[0], newHeight])(entry);\n\n  if (swapXY || flipX || flipY) {\n    flipTree(result, size, {\n      swapXY: swapXY,\n      flipX: flipX,\n      flipY: flipY\n    });\n  }\n\n  return result;\n};","map":{"version":3,"sources":["C:/Users/mikke/VSC/fantasy-django-react/fantasy-django/fantasy-react-app/node_modules/plotly.js/src/traces/icicle/partition.js"],"names":["d3Hierarchy","require","flipTree","module","exports","partition","entry","size","opts","flipX","flipY","swapXY","orientation","maxDepth","newWidth","newHeight","height","Math","min","result","padding","pad","inner"],"mappings":"AAAA;;AAEA,IAAIA,WAAW,GAAGC,OAAO,CAAC,cAAD,CAAzB;;AACA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,sBAAD,CAAtB;;AAEAE,MAAM,CAACC,OAAP,GAAiB,SAASC,SAAT,CAAmBC,KAAnB,EAA0BC,IAA1B,EAAgCC,IAAhC,EAAsC;AACnD,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AACA,MAAIC,KAAK,GAAGF,IAAI,CAACE,KAAjB;AACA,MAAIC,MAAM,GAAGH,IAAI,CAACI,WAAL,KAAqB,GAAlC;AACA,MAAIC,QAAQ,GAAGL,IAAI,CAACK,QAApB;AAEA,MAAIC,QAAQ,GAAGP,IAAI,CAAC,CAAD,CAAnB;AACA,MAAIQ,SAAS,GAAGR,IAAI,CAAC,CAAD,CAApB;;AACA,MAAGM,QAAH,EAAa;AACTC,IAAAA,QAAQ,GAAG,CAACR,KAAK,CAACU,MAAN,GAAe,CAAhB,IAAqBT,IAAI,CAAC,CAAD,CAAzB,GAA+BU,IAAI,CAACC,GAAL,CAASZ,KAAK,CAACU,MAAN,GAAe,CAAxB,EAA2BH,QAA3B,CAA1C;AACAE,IAAAA,SAAS,GAAG,CAACT,KAAK,CAACU,MAAN,GAAe,CAAhB,IAAqBT,IAAI,CAAC,CAAD,CAAzB,GAA+BU,IAAI,CAACC,GAAL,CAASZ,KAAK,CAACU,MAAN,GAAe,CAAxB,EAA2BH,QAA3B,CAA3C;AACH;;AAED,MAAIM,MAAM,GAAGnB,WAAW,CACnBK,SADQ,GAERe,OAFQ,CAEAZ,IAAI,CAACa,GAAL,CAASC,KAFT,EAGRf,IAHQ,CAILI,MAAM,GAAG,CAACJ,IAAI,CAAC,CAAD,CAAL,EAAUO,QAAV,CAAH,GAAyB,CAACP,IAAI,CAAC,CAAD,CAAL,EAAUQ,SAAV,CAJ1B,EAKPT,KALO,CAAb;;AAOA,MAAGK,MAAM,IAAIF,KAAV,IAAmBC,KAAtB,EAA6B;AACzBR,IAAAA,QAAQ,CAACiB,MAAD,EAASZ,IAAT,EAAe;AACnBI,MAAAA,MAAM,EAAEA,MADW;AAEnBF,MAAAA,KAAK,EAAEA,KAFY;AAGnBC,MAAAA,KAAK,EAAEA;AAHY,KAAf,CAAR;AAKH;;AACD,SAAOS,MAAP;AACH,CA5BD","sourcesContent":["'use strict';\r\n\r\nvar d3Hierarchy = require('d3-hierarchy');\r\nvar flipTree = require('../treemap/flip_tree');\r\n\r\nmodule.exports = function partition(entry, size, opts) {\r\n    var flipX = opts.flipX;\r\n    var flipY = opts.flipY;\r\n    var swapXY = opts.orientation === 'h';\r\n    var maxDepth = opts.maxDepth;\r\n\r\n    var newWidth = size[0];\r\n    var newHeight = size[1];\r\n    if(maxDepth) {\r\n        newWidth = (entry.height + 1) * size[0] / Math.min(entry.height + 1, maxDepth);\r\n        newHeight = (entry.height + 1) * size[1] / Math.min(entry.height + 1, maxDepth);\r\n    }\r\n\r\n    var result = d3Hierarchy\r\n        .partition()\r\n        .padding(opts.pad.inner)\r\n        .size(\r\n            swapXY ? [size[1], newWidth] : [size[0], newHeight]\r\n        )(entry);\r\n\r\n    if(swapXY || flipX || flipY) {\r\n        flipTree(result, size, {\r\n            swapXY: swapXY,\r\n            flipX: flipX,\r\n            flipY: flipY\r\n        });\r\n    }\r\n    return result;\r\n};\r\n"]},"metadata":{},"sourceType":"script"}