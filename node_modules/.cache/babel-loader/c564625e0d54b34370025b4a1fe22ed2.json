{"ast":null,"code":"'use strict';\n\nvar d3 = require('@plotly/d3');\n\nvar isNumeric = require('fast-isnumeric');\n\nvar Plots = require('../../plots/plots');\n\nvar Registry = require('../../registry');\n\nvar Lib = require('../../lib');\n\nvar strTranslate = Lib.strTranslate;\n\nvar Drawing = require('../drawing');\n\nvar Color = require('../color');\n\nvar svgTextUtils = require('../../lib/svg_text_utils');\n\nvar interactConstants = require('../../constants/interactions');\n\nvar OPPOSITE_SIDE = require('../../constants/alignment').OPPOSITE_SIDE;\n\nvar numStripRE = / [XY][0-9]* /;\n/**\r\n * Titles - (re)draw titles on the axes and plot:\r\n * @param {DOM element} gd - the graphDiv\r\n * @param {string} titleClass - the css class of this title\r\n * @param {object} options - how and what to draw\r\n *      propContainer - the layout object containing `title` and `titlefont`\r\n *          attributes that apply to this title\r\n *      propName - the full name of the title property (for Plotly.relayout)\r\n *      [traceIndex] - include only if this property applies to one trace\r\n *          (such as a colorbar title) - then editing pipes to Plotly.restyle\r\n *          instead of Plotly.relayout\r\n *      placeholder - placeholder text for an empty editable title\r\n *      [avoid] {object} - include if this title should move to avoid other elements\r\n *          selection - d3 selection of elements to avoid\r\n *          side - which direction to move if there is a conflict\r\n *          [offsetLeft] - if these elements are subject to a translation\r\n *              wrt the title element\r\n *          [offsetTop]\r\n *      attributes {object} - position and alignment attributes\r\n *          x - pixels\r\n *          y - pixels\r\n *          text-anchor - start|middle|end\r\n *      transform {object} - how to transform the title after positioning\r\n *          rotate - degrees\r\n *          offset - shift up/down in the rotated frame (unused?)\r\n *      containerGroup - if an svg <g> element already exists to hold this\r\n *          title, include here. Otherwise it will go in fullLayout._infolayer\r\n *      _meta {object (optional} - meta key-value to for title with\r\n *          Lib.templateString, default to fullLayout._meta, if not provided\r\n *\r\n *  @return {selection} d3 selection of title container group\r\n */\n\nfunction draw(gd, titleClass, options) {\n  var cont = options.propContainer;\n  var prop = options.propName;\n  var placeholder = options.placeholder;\n  var traceIndex = options.traceIndex;\n  var avoid = options.avoid || {};\n  var attributes = options.attributes;\n  var transform = options.transform;\n  var group = options.containerGroup;\n  var fullLayout = gd._fullLayout;\n  var opacity = 1;\n  var isplaceholder = false;\n  var title = cont.title;\n  var txt = (title && title.text ? title.text : '').trim();\n  var font = title && title.font ? title.font : {};\n  var fontFamily = font.family;\n  var fontSize = font.size;\n  var fontColor = font.color; // only make this title editable if we positively identify its property\n  // as one that has editing enabled.\n\n  var editAttr;\n  if (prop === 'title.text') editAttr = 'titleText';else if (prop.indexOf('axis') !== -1) editAttr = 'axisTitleText';else if (prop.indexOf('colorbar' !== -1)) editAttr = 'colorbarTitleText';\n  var editable = gd._context.edits[editAttr];\n  if (txt === '') opacity = 0; // look for placeholder text while stripping out numbers from eg X2, Y3\n  // this is just for backward compatibility with the old version that had\n  // \"Click to enter X2 title\" and may have gotten saved in some old plots,\n  // we don't want this to show up when these are displayed.\n  else if (txt.replace(numStripRE, ' % ') === placeholder.replace(numStripRE, ' % ')) {\n      opacity = 0.2;\n      isplaceholder = true;\n      if (!editable) txt = '';\n    }\n\n  if (options._meta) {\n    txt = Lib.templateString(txt, options._meta);\n  } else if (fullLayout._meta) {\n    txt = Lib.templateString(txt, fullLayout._meta);\n  }\n\n  var elShouldExist = txt || editable;\n\n  if (!group) {\n    group = Lib.ensureSingle(fullLayout._infolayer, 'g', 'g-' + titleClass);\n  }\n\n  var el = group.selectAll('text').data(elShouldExist ? [0] : []);\n  el.enter().append('text');\n  el.text(txt) // this is hacky, but convertToTspans uses the class\n  // to determine whether to rotate mathJax...\n  // so we need to clear out any old class and put the\n  // correct one (only relevant for colorbars, at least\n  // for now) - ie don't use .classed\n  .attr('class', titleClass);\n  el.exit().remove();\n  if (!elShouldExist) return group;\n\n  function titleLayout(titleEl) {\n    Lib.syncOrAsync([drawTitle, scootTitle], titleEl);\n  }\n\n  function drawTitle(titleEl) {\n    var transformVal;\n\n    if (transform) {\n      transformVal = '';\n\n      if (transform.rotate) {\n        transformVal += 'rotate(' + [transform.rotate, attributes.x, attributes.y] + ')';\n      }\n\n      if (transform.offset) {\n        transformVal += strTranslate(0, transform.offset);\n      }\n    } else {\n      transformVal = null;\n    }\n\n    titleEl.attr('transform', transformVal);\n    titleEl.style({\n      'font-family': fontFamily,\n      'font-size': d3.round(fontSize, 2) + 'px',\n      fill: Color.rgb(fontColor),\n      opacity: opacity * Color.opacity(fontColor),\n      'font-weight': Plots.fontWeight\n    }).attr(attributes).call(svgTextUtils.convertToTspans, gd);\n    return Plots.previousPromises(gd);\n  }\n\n  function scootTitle(titleElIn) {\n    var titleGroup = d3.select(titleElIn.node().parentNode);\n\n    if (avoid && avoid.selection && avoid.side && txt) {\n      titleGroup.attr('transform', null); // move toward avoid.side (= left, right, top, bottom) if needed\n      // can include pad (pixels, default 2)\n\n      var backside = OPPOSITE_SIDE[avoid.side];\n      var shiftSign = avoid.side === 'left' || avoid.side === 'top' ? -1 : 1;\n      var pad = isNumeric(avoid.pad) ? avoid.pad : 2;\n      var titlebb = Drawing.bBox(titleGroup.node());\n      var paperbb = {\n        left: 0,\n        top: 0,\n        right: fullLayout.width,\n        bottom: fullLayout.height\n      };\n      var maxshift = avoid.maxShift || shiftSign * (paperbb[avoid.side] - titlebb[avoid.side]);\n      var shift = 0; // Prevent the title going off the paper\n\n      if (maxshift < 0) {\n        shift = maxshift;\n      } else {\n        // so we don't have to offset each avoided element,\n        // give the title the opposite offset\n        var offsetLeft = avoid.offsetLeft || 0;\n        var offsetTop = avoid.offsetTop || 0;\n        titlebb.left -= offsetLeft;\n        titlebb.right -= offsetLeft;\n        titlebb.top -= offsetTop;\n        titlebb.bottom -= offsetTop; // iterate over a set of elements (avoid.selection)\n        // to avoid collisions with\n\n        avoid.selection.each(function () {\n          var avoidbb = Drawing.bBox(this);\n\n          if (Lib.bBoxIntersect(titlebb, avoidbb, pad)) {\n            shift = Math.max(shift, shiftSign * (avoidbb[avoid.side] - titlebb[backside]) + pad);\n          }\n        });\n        shift = Math.min(maxshift, shift);\n      }\n\n      if (shift > 0 || maxshift < 0) {\n        var shiftTemplate = {\n          left: [-shift, 0],\n          right: [shift, 0],\n          top: [0, -shift],\n          bottom: [0, shift]\n        }[avoid.side];\n        titleGroup.attr('transform', strTranslate(shiftTemplate[0], shiftTemplate[1]));\n      }\n    }\n  }\n\n  el.call(titleLayout);\n\n  function setPlaceholder() {\n    opacity = 0;\n    isplaceholder = true;\n    el.text(placeholder).on('mouseover.opacity', function () {\n      d3.select(this).transition().duration(interactConstants.SHOW_PLACEHOLDER).style('opacity', 1);\n    }).on('mouseout.opacity', function () {\n      d3.select(this).transition().duration(interactConstants.HIDE_PLACEHOLDER).style('opacity', 0);\n    });\n  }\n\n  if (editable) {\n    if (!txt) setPlaceholder();else el.on('.opacity', null);\n    el.call(svgTextUtils.makeEditable, {\n      gd: gd\n    }).on('edit', function (text) {\n      if (traceIndex !== undefined) {\n        Registry.call('_guiRestyle', gd, prop, text, traceIndex);\n      } else {\n        Registry.call('_guiRelayout', gd, prop, text);\n      }\n    }).on('cancel', function () {\n      this.text(this.attr('data-unformatted')).call(titleLayout);\n    }).on('input', function (d) {\n      this.text(d || ' ').call(svgTextUtils.positionText, attributes.x, attributes.y);\n    });\n  }\n\n  el.classed('js-placeholder', isplaceholder);\n  return group;\n}\n\nmodule.exports = {\n  draw: draw\n};","map":{"version":3,"sources":["C:/Users/mikke/VSC/fantasy-django-react/fantasy-django/fantasy-react-app/node_modules/plotly.js/src/components/titles/index.js"],"names":["d3","require","isNumeric","Plots","Registry","Lib","strTranslate","Drawing","Color","svgTextUtils","interactConstants","OPPOSITE_SIDE","numStripRE","draw","gd","titleClass","options","cont","propContainer","prop","propName","placeholder","traceIndex","avoid","attributes","transform","group","containerGroup","fullLayout","_fullLayout","opacity","isplaceholder","title","txt","text","trim","font","fontFamily","family","fontSize","size","fontColor","color","editAttr","indexOf","editable","_context","edits","replace","_meta","templateString","elShouldExist","ensureSingle","_infolayer","el","selectAll","data","enter","append","attr","exit","remove","titleLayout","titleEl","syncOrAsync","drawTitle","scootTitle","transformVal","rotate","x","y","offset","style","round","fill","rgb","fontWeight","call","convertToTspans","previousPromises","titleElIn","titleGroup","select","node","parentNode","selection","side","backside","shiftSign","pad","titlebb","bBox","paperbb","left","top","right","width","bottom","height","maxshift","maxShift","shift","offsetLeft","offsetTop","each","avoidbb","bBoxIntersect","Math","max","min","shiftTemplate","setPlaceholder","on","transition","duration","SHOW_PLACEHOLDER","HIDE_PLACEHOLDER","makeEditable","undefined","d","positionText","classed","module","exports"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nvar d3 = require('@plotly/d3');\r\nvar isNumeric = require('fast-isnumeric');\r\n\r\nvar Plots = require('../../plots/plots');\r\nvar Registry = require('../../registry');\r\nvar Lib = require('../../lib');\r\nvar strTranslate = Lib.strTranslate;\r\nvar Drawing = require('../drawing');\r\nvar Color = require('../color');\r\nvar svgTextUtils = require('../../lib/svg_text_utils');\r\nvar interactConstants = require('../../constants/interactions');\r\n\r\nvar OPPOSITE_SIDE = require('../../constants/alignment').OPPOSITE_SIDE;\r\nvar numStripRE = / [XY][0-9]* /;\r\n\r\n/**\r\n * Titles - (re)draw titles on the axes and plot:\r\n * @param {DOM element} gd - the graphDiv\r\n * @param {string} titleClass - the css class of this title\r\n * @param {object} options - how and what to draw\r\n *      propContainer - the layout object containing `title` and `titlefont`\r\n *          attributes that apply to this title\r\n *      propName - the full name of the title property (for Plotly.relayout)\r\n *      [traceIndex] - include only if this property applies to one trace\r\n *          (such as a colorbar title) - then editing pipes to Plotly.restyle\r\n *          instead of Plotly.relayout\r\n *      placeholder - placeholder text for an empty editable title\r\n *      [avoid] {object} - include if this title should move to avoid other elements\r\n *          selection - d3 selection of elements to avoid\r\n *          side - which direction to move if there is a conflict\r\n *          [offsetLeft] - if these elements are subject to a translation\r\n *              wrt the title element\r\n *          [offsetTop]\r\n *      attributes {object} - position and alignment attributes\r\n *          x - pixels\r\n *          y - pixels\r\n *          text-anchor - start|middle|end\r\n *      transform {object} - how to transform the title after positioning\r\n *          rotate - degrees\r\n *          offset - shift up/down in the rotated frame (unused?)\r\n *      containerGroup - if an svg <g> element already exists to hold this\r\n *          title, include here. Otherwise it will go in fullLayout._infolayer\r\n *      _meta {object (optional} - meta key-value to for title with\r\n *          Lib.templateString, default to fullLayout._meta, if not provided\r\n *\r\n *  @return {selection} d3 selection of title container group\r\n */\r\nfunction draw(gd, titleClass, options) {\r\n    var cont = options.propContainer;\r\n    var prop = options.propName;\r\n    var placeholder = options.placeholder;\r\n    var traceIndex = options.traceIndex;\r\n    var avoid = options.avoid || {};\r\n    var attributes = options.attributes;\r\n    var transform = options.transform;\r\n    var group = options.containerGroup;\r\n\r\n    var fullLayout = gd._fullLayout;\r\n\r\n    var opacity = 1;\r\n    var isplaceholder = false;\r\n    var title = cont.title;\r\n    var txt = (title && title.text ? title.text : '').trim();\r\n\r\n    var font = title && title.font ? title.font : {};\r\n    var fontFamily = font.family;\r\n    var fontSize = font.size;\r\n    var fontColor = font.color;\r\n\r\n    // only make this title editable if we positively identify its property\r\n    // as one that has editing enabled.\r\n    var editAttr;\r\n    if(prop === 'title.text') editAttr = 'titleText';\r\n    else if(prop.indexOf('axis') !== -1) editAttr = 'axisTitleText';\r\n    else if(prop.indexOf('colorbar' !== -1)) editAttr = 'colorbarTitleText';\r\n    var editable = gd._context.edits[editAttr];\r\n\r\n    if(txt === '') opacity = 0;\r\n    // look for placeholder text while stripping out numbers from eg X2, Y3\r\n    // this is just for backward compatibility with the old version that had\r\n    // \"Click to enter X2 title\" and may have gotten saved in some old plots,\r\n    // we don't want this to show up when these are displayed.\r\n    else if(txt.replace(numStripRE, ' % ') === placeholder.replace(numStripRE, ' % ')) {\r\n        opacity = 0.2;\r\n        isplaceholder = true;\r\n        if(!editable) txt = '';\r\n    }\r\n\r\n    if(options._meta) {\r\n        txt = Lib.templateString(txt, options._meta);\r\n    } else if(fullLayout._meta) {\r\n        txt = Lib.templateString(txt, fullLayout._meta);\r\n    }\r\n\r\n    var elShouldExist = txt || editable;\r\n\r\n    if(!group) {\r\n        group = Lib.ensureSingle(fullLayout._infolayer, 'g', 'g-' + titleClass);\r\n    }\r\n\r\n    var el = group.selectAll('text')\r\n        .data(elShouldExist ? [0] : []);\r\n    el.enter().append('text');\r\n    el.text(txt)\r\n        // this is hacky, but convertToTspans uses the class\r\n        // to determine whether to rotate mathJax...\r\n        // so we need to clear out any old class and put the\r\n        // correct one (only relevant for colorbars, at least\r\n        // for now) - ie don't use .classed\r\n        .attr('class', titleClass);\r\n    el.exit().remove();\r\n\r\n    if(!elShouldExist) return group;\r\n\r\n    function titleLayout(titleEl) {\r\n        Lib.syncOrAsync([drawTitle, scootTitle], titleEl);\r\n    }\r\n\r\n    function drawTitle(titleEl) {\r\n        var transformVal;\r\n\r\n        if(transform) {\r\n            transformVal = '';\r\n            if(transform.rotate) {\r\n                transformVal += 'rotate(' + [transform.rotate, attributes.x, attributes.y] + ')';\r\n            }\r\n            if(transform.offset) {\r\n                transformVal += strTranslate(0, transform.offset);\r\n            }\r\n        } else {\r\n            transformVal = null;\r\n        }\r\n\r\n        titleEl.attr('transform', transformVal);\r\n\r\n        titleEl.style({\r\n            'font-family': fontFamily,\r\n            'font-size': d3.round(fontSize, 2) + 'px',\r\n            fill: Color.rgb(fontColor),\r\n            opacity: opacity * Color.opacity(fontColor),\r\n            'font-weight': Plots.fontWeight\r\n        })\r\n        .attr(attributes)\r\n        .call(svgTextUtils.convertToTspans, gd);\r\n\r\n        return Plots.previousPromises(gd);\r\n    }\r\n\r\n    function scootTitle(titleElIn) {\r\n        var titleGroup = d3.select(titleElIn.node().parentNode);\r\n\r\n        if(avoid && avoid.selection && avoid.side && txt) {\r\n            titleGroup.attr('transform', null);\r\n\r\n            // move toward avoid.side (= left, right, top, bottom) if needed\r\n            // can include pad (pixels, default 2)\r\n            var backside = OPPOSITE_SIDE[avoid.side];\r\n            var shiftSign = (avoid.side === 'left' || avoid.side === 'top') ? -1 : 1;\r\n            var pad = isNumeric(avoid.pad) ? avoid.pad : 2;\r\n\r\n            var titlebb = Drawing.bBox(titleGroup.node());\r\n            var paperbb = {\r\n                left: 0,\r\n                top: 0,\r\n                right: fullLayout.width,\r\n                bottom: fullLayout.height\r\n            };\r\n\r\n            var maxshift = avoid.maxShift ||\r\n                shiftSign * (paperbb[avoid.side] - titlebb[avoid.side]);\r\n            var shift = 0;\r\n\r\n            // Prevent the title going off the paper\r\n            if(maxshift < 0) {\r\n                shift = maxshift;\r\n            } else {\r\n                // so we don't have to offset each avoided element,\r\n                // give the title the opposite offset\r\n                var offsetLeft = avoid.offsetLeft || 0;\r\n                var offsetTop = avoid.offsetTop || 0;\r\n                titlebb.left -= offsetLeft;\r\n                titlebb.right -= offsetLeft;\r\n                titlebb.top -= offsetTop;\r\n                titlebb.bottom -= offsetTop;\r\n\r\n                // iterate over a set of elements (avoid.selection)\r\n                // to avoid collisions with\r\n                avoid.selection.each(function() {\r\n                    var avoidbb = Drawing.bBox(this);\r\n\r\n                    if(Lib.bBoxIntersect(titlebb, avoidbb, pad)) {\r\n                        shift = Math.max(shift, shiftSign * (\r\n                            avoidbb[avoid.side] - titlebb[backside]) + pad);\r\n                    }\r\n                });\r\n                shift = Math.min(maxshift, shift);\r\n            }\r\n\r\n            if(shift > 0 || maxshift < 0) {\r\n                var shiftTemplate = {\r\n                    left: [-shift, 0],\r\n                    right: [shift, 0],\r\n                    top: [0, -shift],\r\n                    bottom: [0, shift]\r\n                }[avoid.side];\r\n                titleGroup.attr('transform', strTranslate(shiftTemplate[0], shiftTemplate[1]));\r\n            }\r\n        }\r\n    }\r\n\r\n    el.call(titleLayout);\r\n\r\n    function setPlaceholder() {\r\n        opacity = 0;\r\n        isplaceholder = true;\r\n        el.text(placeholder)\r\n            .on('mouseover.opacity', function() {\r\n                d3.select(this).transition()\r\n                    .duration(interactConstants.SHOW_PLACEHOLDER).style('opacity', 1);\r\n            })\r\n            .on('mouseout.opacity', function() {\r\n                d3.select(this).transition()\r\n                    .duration(interactConstants.HIDE_PLACEHOLDER).style('opacity', 0);\r\n            });\r\n    }\r\n\r\n    if(editable) {\r\n        if(!txt) setPlaceholder();\r\n        else el.on('.opacity', null);\r\n\r\n        el.call(svgTextUtils.makeEditable, {gd: gd})\r\n            .on('edit', function(text) {\r\n                if(traceIndex !== undefined) {\r\n                    Registry.call('_guiRestyle', gd, prop, text, traceIndex);\r\n                } else {\r\n                    Registry.call('_guiRelayout', gd, prop, text);\r\n                }\r\n            })\r\n            .on('cancel', function() {\r\n                this.text(this.attr('data-unformatted'))\r\n                    .call(titleLayout);\r\n            })\r\n            .on('input', function(d) {\r\n                this.text(d || ' ')\r\n                    .call(svgTextUtils.positionText, attributes.x, attributes.y);\r\n            });\r\n    }\r\n    el.classed('js-placeholder', isplaceholder);\r\n\r\n    return group;\r\n}\r\n\r\nmodule.exports = {\r\n    draw: draw\r\n};\r\n"]},"metadata":{},"sourceType":"script"}