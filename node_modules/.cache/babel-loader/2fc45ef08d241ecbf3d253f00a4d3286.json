{"ast":null,"code":"/*eslint new-cap:0*/\nvar dtype = require('dtype');\n\nmodule.exports = flattenVertexData;\n\nfunction flattenVertexData(data, output, offset) {\n  if (!data) throw new TypeError('must specify data as first parameter');\n  offset = +(offset || 0) | 0;\n\n  if (Array.isArray(data) && data[0] && typeof data[0][0] === 'number') {\n    var dim = data[0].length;\n    var length = data.length * dim;\n    var i, j, k, l; // no output specified, create a new typed array\n\n    if (!output || typeof output === 'string') {\n      output = new (dtype(output || 'float32'))(length + offset);\n    }\n\n    var dstLength = output.length - offset;\n\n    if (length !== dstLength) {\n      throw new Error('source length ' + length + ' (' + dim + 'x' + data.length + ')' + ' does not match destination length ' + dstLength);\n    }\n\n    for (i = 0, k = offset; i < data.length; i++) {\n      for (j = 0; j < dim; j++) {\n        output[k++] = data[i][j] === null ? NaN : data[i][j];\n      }\n    }\n  } else {\n    if (!output || typeof output === 'string') {\n      // no output, create a new one\n      var Ctor = dtype(output || 'float32'); // handle arrays separately due to possible nulls\n\n      if (Array.isArray(data) || output === 'array') {\n        output = new Ctor(data.length + offset);\n\n        for (i = 0, k = offset, l = output.length; k < l; k++, i++) {\n          output[k] = data[i] === null ? NaN : data[i];\n        }\n      } else {\n        if (offset === 0) {\n          output = new Ctor(data);\n        } else {\n          output = new Ctor(data.length + offset);\n          output.set(data, offset);\n        }\n      }\n    } else {\n      // store output in existing array\n      output.set(data, offset);\n    }\n  }\n\n  return output;\n}","map":{"version":3,"sources":["C:/Users/mikke/VSC/fantasy-django-react/fantasy-django/fantasy-react-app/node_modules/flatten-vertex-data/index.js"],"names":["dtype","require","module","exports","flattenVertexData","data","output","offset","TypeError","Array","isArray","dim","length","i","j","k","l","dstLength","Error","NaN","Ctor","set"],"mappings":"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","sourcesContent":["/*eslint new-cap:0*/\r\nvar dtype = require('dtype')\r\n\r\nmodule.exports = flattenVertexData\r\n\r\nfunction flattenVertexData (data, output, offset) {\r\n  if (!data) throw new TypeError('must specify data as first parameter')\r\n  offset = +(offset || 0) | 0\r\n\r\n  if (Array.isArray(data) && (data[0] && typeof data[0][0] === 'number')) {\r\n    var dim = data[0].length\r\n    var length = data.length * dim\r\n    var i, j, k, l\r\n\r\n    // no output specified, create a new typed array\r\n    if (!output || typeof output === 'string') {\r\n      output = new (dtype(output || 'float32'))(length + offset)\r\n    }\r\n\r\n    var dstLength = output.length - offset\r\n    if (length !== dstLength) {\r\n      throw new Error('source length ' + length + ' (' + dim + 'x' + data.length + ')' +\r\n        ' does not match destination length ' + dstLength)\r\n    }\r\n\r\n    for (i = 0, k = offset; i < data.length; i++) {\r\n      for (j = 0; j < dim; j++) {\r\n        output[k++] = data[i][j] === null ? NaN : data[i][j]\r\n      }\r\n    }\r\n  } else {\r\n    if (!output || typeof output === 'string') {\r\n      // no output, create a new one\r\n      var Ctor = dtype(output || 'float32')\r\n\r\n      // handle arrays separately due to possible nulls\r\n      if (Array.isArray(data) || output === 'array') {\r\n        output = new Ctor(data.length + offset)\r\n        for (i = 0, k = offset, l = output.length; k < l; k++, i++) {\r\n          output[k] = data[i] === null ? NaN : data[i]\r\n        }\r\n      } else {\r\n        if (offset === 0) {\r\n          output = new Ctor(data)\r\n        } else {\r\n          output = new Ctor(data.length + offset)\r\n\r\n          output.set(data, offset)\r\n        }\r\n      }\r\n    } else {\r\n      // store output in existing array\r\n      output.set(data, offset)\r\n    }\r\n  }\r\n\r\n  return output\r\n}\r\n"]},"metadata":{},"sourceType":"script"}