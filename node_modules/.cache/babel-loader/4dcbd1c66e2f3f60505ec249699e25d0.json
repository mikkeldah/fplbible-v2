{"ast":null,"code":"'use strict';\n\nvar conePlot = require('gl-cone3d');\n\nvar createConeMesh = require('gl-cone3d').createConeMesh;\n\nvar simpleMap = require('../../lib').simpleMap;\n\nvar parseColorScale = require('../../lib/gl_format_color').parseColorScale;\n\nvar extractOpts = require('../../components/colorscale').extractOpts;\n\nvar zip3 = require('../../plots/gl3d/zip3');\n\nfunction Cone(scene, uid) {\n  this.scene = scene;\n  this.uid = uid;\n  this.mesh = null;\n  this.data = null;\n}\n\nvar proto = Cone.prototype;\n\nproto.handlePick = function (selection) {\n  if (selection.object === this.mesh) {\n    var selectIndex = selection.index = selection.data.index;\n    var xx = this.data.x[selectIndex];\n    var yy = this.data.y[selectIndex];\n    var zz = this.data.z[selectIndex];\n    var uu = this.data.u[selectIndex];\n    var vv = this.data.v[selectIndex];\n    var ww = this.data.w[selectIndex];\n    selection.traceCoordinate = [xx, yy, zz, uu, vv, ww, Math.sqrt(uu * uu + vv * vv + ww * ww)];\n    var text = this.data.hovertext || this.data.text;\n\n    if (Array.isArray(text) && text[selectIndex] !== undefined) {\n      selection.textLabel = text[selectIndex];\n    } else if (text) {\n      selection.textLabel = text;\n    }\n\n    return true;\n  }\n};\n\nvar axisName2scaleIndex = {\n  xaxis: 0,\n  yaxis: 1,\n  zaxis: 2\n};\nvar anchor2coneOffset = {\n  tip: 1,\n  tail: 0,\n  cm: 0.25,\n  center: 0.5\n};\nvar anchor2coneSpan = {\n  tip: 1,\n  tail: 1,\n  cm: 0.75,\n  center: 0.5\n};\n\nfunction convert(scene, trace) {\n  var sceneLayout = scene.fullSceneLayout;\n  var dataScale = scene.dataScale;\n  var coneOpts = {};\n\n  function toDataCoords(arr, axisName) {\n    var ax = sceneLayout[axisName];\n    var scale = dataScale[axisName2scaleIndex[axisName]];\n    return simpleMap(arr, function (v) {\n      return ax.d2l(v) * scale;\n    });\n  }\n\n  coneOpts.vectors = zip3(toDataCoords(trace.u, 'xaxis'), toDataCoords(trace.v, 'yaxis'), toDataCoords(trace.w, 'zaxis'), trace._len);\n  coneOpts.positions = zip3(toDataCoords(trace.x, 'xaxis'), toDataCoords(trace.y, 'yaxis'), toDataCoords(trace.z, 'zaxis'), trace._len);\n  var cOpts = extractOpts(trace);\n  coneOpts.colormap = parseColorScale(trace);\n  coneOpts.vertexIntensityBounds = [cOpts.min / trace._normMax, cOpts.max / trace._normMax];\n  coneOpts.coneOffset = anchor2coneOffset[trace.anchor];\n\n  if (trace.sizemode === 'scaled') {\n    // unitless sizeref\n    coneOpts.coneSize = trace.sizeref || 0.5;\n  } else {\n    // sizeref here has unit of velocity\n    coneOpts.coneSize = trace.sizeref && trace._normMax ? trace.sizeref / trace._normMax : 0.5;\n  }\n\n  var meshData = conePlot(coneOpts); // pass gl-mesh3d lighting attributes\n\n  var lp = trace.lightposition;\n  meshData.lightPosition = [lp.x, lp.y, lp.z];\n  meshData.ambient = trace.lighting.ambient;\n  meshData.diffuse = trace.lighting.diffuse;\n  meshData.specular = trace.lighting.specular;\n  meshData.roughness = trace.lighting.roughness;\n  meshData.fresnel = trace.lighting.fresnel;\n  meshData.opacity = trace.opacity; // stash autorange pad value\n\n  trace._pad = anchor2coneSpan[trace.anchor] * meshData.vectorScale * meshData.coneScale * trace._normMax;\n  return meshData;\n}\n\nproto.update = function (data) {\n  this.data = data;\n  var meshData = convert(this.scene, data);\n  this.mesh.update(meshData);\n};\n\nproto.dispose = function () {\n  this.scene.glplot.remove(this.mesh);\n  this.mesh.dispose();\n};\n\nfunction createConeTrace(scene, data) {\n  var gl = scene.glplot.gl;\n  var meshData = convert(scene, data);\n  var mesh = createConeMesh(gl, meshData);\n  var cone = new Cone(scene, data.uid);\n  cone.mesh = mesh;\n  cone.data = data;\n  mesh._trace = cone;\n  scene.glplot.add(mesh);\n  return cone;\n}\n\nmodule.exports = createConeTrace;","map":{"version":3,"sources":["C:/Users/mikke/VSC/fantasy-django-react/fantasy-django/fantasy-react-app/node_modules/plotly.js/src/traces/cone/convert.js"],"names":["conePlot","require","createConeMesh","simpleMap","parseColorScale","extractOpts","zip3","Cone","scene","uid","mesh","data","proto","prototype","handlePick","selection","object","selectIndex","index","xx","x","yy","y","zz","z","uu","u","vv","v","ww","w","traceCoordinate","Math","sqrt","text","hovertext","Array","isArray","undefined","textLabel","axisName2scaleIndex","xaxis","yaxis","zaxis","anchor2coneOffset","tip","tail","cm","center","anchor2coneSpan","convert","trace","sceneLayout","fullSceneLayout","dataScale","coneOpts","toDataCoords","arr","axisName","ax","scale","d2l","vectors","_len","positions","cOpts","colormap","vertexIntensityBounds","min","_normMax","max","coneOffset","anchor","sizemode","coneSize","sizeref","meshData","lp","lightposition","lightPosition","ambient","lighting","diffuse","specular","roughness","fresnel","opacity","_pad","vectorScale","coneScale","update","dispose","glplot","remove","createConeTrace","gl","cone","_trace","add","module","exports"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nvar conePlot = require('gl-cone3d');\r\nvar createConeMesh = require('gl-cone3d').createConeMesh;\r\n\r\nvar simpleMap = require('../../lib').simpleMap;\r\nvar parseColorScale = require('../../lib/gl_format_color').parseColorScale;\r\nvar extractOpts = require('../../components/colorscale').extractOpts;\r\nvar zip3 = require('../../plots/gl3d/zip3');\r\n\r\nfunction Cone(scene, uid) {\r\n    this.scene = scene;\r\n    this.uid = uid;\r\n    this.mesh = null;\r\n    this.data = null;\r\n}\r\n\r\nvar proto = Cone.prototype;\r\n\r\nproto.handlePick = function(selection) {\r\n    if(selection.object === this.mesh) {\r\n        var selectIndex = selection.index = selection.data.index;\r\n        var xx = this.data.x[selectIndex];\r\n        var yy = this.data.y[selectIndex];\r\n        var zz = this.data.z[selectIndex];\r\n        var uu = this.data.u[selectIndex];\r\n        var vv = this.data.v[selectIndex];\r\n        var ww = this.data.w[selectIndex];\r\n\r\n        selection.traceCoordinate = [\r\n            xx, yy, zz,\r\n            uu, vv, ww,\r\n            Math.sqrt(uu * uu + vv * vv + ww * ww)\r\n        ];\r\n\r\n        var text = this.data.hovertext || this.data.text;\r\n        if(Array.isArray(text) && text[selectIndex] !== undefined) {\r\n            selection.textLabel = text[selectIndex];\r\n        } else if(text) {\r\n            selection.textLabel = text;\r\n        }\r\n\r\n        return true;\r\n    }\r\n};\r\n\r\nvar axisName2scaleIndex = {xaxis: 0, yaxis: 1, zaxis: 2};\r\nvar anchor2coneOffset = {tip: 1, tail: 0, cm: 0.25, center: 0.5};\r\nvar anchor2coneSpan = {tip: 1, tail: 1, cm: 0.75, center: 0.5};\r\n\r\nfunction convert(scene, trace) {\r\n    var sceneLayout = scene.fullSceneLayout;\r\n    var dataScale = scene.dataScale;\r\n    var coneOpts = {};\r\n\r\n    function toDataCoords(arr, axisName) {\r\n        var ax = sceneLayout[axisName];\r\n        var scale = dataScale[axisName2scaleIndex[axisName]];\r\n        return simpleMap(arr, function(v) { return ax.d2l(v) * scale; });\r\n    }\r\n\r\n    coneOpts.vectors = zip3(\r\n        toDataCoords(trace.u, 'xaxis'),\r\n        toDataCoords(trace.v, 'yaxis'),\r\n        toDataCoords(trace.w, 'zaxis'),\r\n        trace._len\r\n    );\r\n\r\n    coneOpts.positions = zip3(\r\n        toDataCoords(trace.x, 'xaxis'),\r\n        toDataCoords(trace.y, 'yaxis'),\r\n        toDataCoords(trace.z, 'zaxis'),\r\n        trace._len\r\n    );\r\n\r\n    var cOpts = extractOpts(trace);\r\n    coneOpts.colormap = parseColorScale(trace);\r\n    coneOpts.vertexIntensityBounds = [cOpts.min / trace._normMax, cOpts.max / trace._normMax];\r\n    coneOpts.coneOffset = anchor2coneOffset[trace.anchor];\r\n\r\n    if(trace.sizemode === 'scaled') {\r\n        // unitless sizeref\r\n        coneOpts.coneSize = trace.sizeref || 0.5;\r\n    } else {\r\n        // sizeref here has unit of velocity\r\n        coneOpts.coneSize = trace.sizeref && trace._normMax ?\r\n            trace.sizeref / trace._normMax :\r\n            0.5;\r\n    }\r\n\r\n    var meshData = conePlot(coneOpts);\r\n\r\n    // pass gl-mesh3d lighting attributes\r\n    var lp = trace.lightposition;\r\n    meshData.lightPosition = [lp.x, lp.y, lp.z];\r\n    meshData.ambient = trace.lighting.ambient;\r\n    meshData.diffuse = trace.lighting.diffuse;\r\n    meshData.specular = trace.lighting.specular;\r\n    meshData.roughness = trace.lighting.roughness;\r\n    meshData.fresnel = trace.lighting.fresnel;\r\n    meshData.opacity = trace.opacity;\r\n\r\n    // stash autorange pad value\r\n    trace._pad = anchor2coneSpan[trace.anchor] * meshData.vectorScale * meshData.coneScale * trace._normMax;\r\n\r\n    return meshData;\r\n}\r\n\r\nproto.update = function(data) {\r\n    this.data = data;\r\n\r\n    var meshData = convert(this.scene, data);\r\n    this.mesh.update(meshData);\r\n};\r\n\r\nproto.dispose = function() {\r\n    this.scene.glplot.remove(this.mesh);\r\n    this.mesh.dispose();\r\n};\r\n\r\nfunction createConeTrace(scene, data) {\r\n    var gl = scene.glplot.gl;\r\n\r\n    var meshData = convert(scene, data);\r\n    var mesh = createConeMesh(gl, meshData);\r\n\r\n    var cone = new Cone(scene, data.uid);\r\n    cone.mesh = mesh;\r\n    cone.data = data;\r\n    mesh._trace = cone;\r\n\r\n    scene.glplot.add(mesh);\r\n\r\n    return cone;\r\n}\r\n\r\nmodule.exports = createConeTrace;\r\n"]},"metadata":{},"sourceType":"script"}