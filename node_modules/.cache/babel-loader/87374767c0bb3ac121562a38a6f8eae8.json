{"ast":null,"code":"'use strict';\n\nvar Lib = require('../lib');\n\nvar Template = require('../plot_api/plot_template');\n\nvar handleDomainDefaults = require('./domain').defaults;\n/**\r\n * Find and supply defaults to all subplots of a given type\r\n * This handles subplots that are contained within one container - so\r\n * gl3d, geo, ternary... but not 2d axes which have separate x and y axes\r\n * finds subplots, coerces their `domain` attributes, then calls the\r\n * given handleDefaults function to fill in everything else.\r\n *\r\n * layoutIn: the complete user-supplied input layout\r\n * layoutOut: the complete finished layout\r\n * fullData: the finished data array, used only to find subplots\r\n * opts: {\r\n *  type: subplot type string\r\n *  attributes: subplot attributes object\r\n *  partition: 'x' or 'y', which direction to divide domain space by default\r\n *      (default 'x', ie side-by-side subplots)\r\n *      TODO: this option is only here because 3D and geo made opposite\r\n *      choices in this regard previously and I didn't want to change it.\r\n *      Instead we should do:\r\n *      - something consistent\r\n *      - something more square (4 cuts 2x2, 5/6 cuts 2x3, etc.)\r\n *      - something that includes all subplot types in one arrangement,\r\n *        now that we can have them together!\r\n *  handleDefaults: function of (subplotLayoutIn, subplotLayoutOut, coerce, opts)\r\n *      this opts object is passed through to handleDefaults, so attach any\r\n *      additional items needed by this function here as well\r\n * }\r\n */\n\n\nmodule.exports = function handleSubplotDefaults(layoutIn, layoutOut, fullData, opts) {\n  var subplotType = opts.type;\n  var subplotAttributes = opts.attributes;\n  var handleDefaults = opts.handleDefaults;\n  var partition = opts.partition || 'x';\n  var ids = layoutOut._subplots[subplotType];\n  var idsLength = ids.length;\n  var baseId = idsLength && ids[0].replace(/\\d+$/, '');\n  var subplotLayoutIn, subplotLayoutOut;\n\n  function coerce(attr, dflt) {\n    return Lib.coerce(subplotLayoutIn, subplotLayoutOut, subplotAttributes, attr, dflt);\n  }\n\n  for (var i = 0; i < idsLength; i++) {\n    var id = ids[i]; // ternary traces get a layout ternary for free!\n\n    if (layoutIn[id]) subplotLayoutIn = layoutIn[id];else subplotLayoutIn = layoutIn[id] = {};\n    subplotLayoutOut = Template.newContainer(layoutOut, id, baseId); // All subplot containers get a `uirevision` inheriting from the base.\n    // Currently all subplots containers have some user interaction\n    // attributes, but if we ever add one that doesn't, we would need an\n    // option to skip this step.\n\n    coerce('uirevision', layoutOut.uirevision);\n    var dfltDomains = {};\n    dfltDomains[partition] = [i / idsLength, (i + 1) / idsLength];\n    handleDomainDefaults(subplotLayoutOut, layoutOut, coerce, dfltDomains);\n    opts.id = id;\n    handleDefaults(subplotLayoutIn, subplotLayoutOut, coerce, opts);\n  }\n};","map":{"version":3,"sources":["C:/Users/mikke/VSC/fantasy-django-react/fantasy-django/fantasy-react-app/node_modules/plotly.js/src/plots/subplot_defaults.js"],"names":["Lib","require","Template","handleDomainDefaults","defaults","module","exports","handleSubplotDefaults","layoutIn","layoutOut","fullData","opts","subplotType","type","subplotAttributes","attributes","handleDefaults","partition","ids","_subplots","idsLength","length","baseId","replace","subplotLayoutIn","subplotLayoutOut","coerce","attr","dflt","i","id","newContainer","uirevision","dfltDomains"],"mappings":"AAAA;;AAEA,IAAIA,GAAG,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,2BAAD,CAAtB;;AACA,IAAIE,oBAAoB,GAAGF,OAAO,CAAC,UAAD,CAAP,CAAoBG,QAA/C;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,SAASC,qBAAT,CAA+BC,QAA/B,EAAyCC,SAAzC,EAAoDC,QAApD,EAA8DC,IAA9D,EAAoE;AACjF,MAAIC,WAAW,GAAGD,IAAI,CAACE,IAAvB;AACA,MAAIC,iBAAiB,GAAGH,IAAI,CAACI,UAA7B;AACA,MAAIC,cAAc,GAAGL,IAAI,CAACK,cAA1B;AACA,MAAIC,SAAS,GAAGN,IAAI,CAACM,SAAL,IAAkB,GAAlC;AAEA,MAAIC,GAAG,GAAGT,SAAS,CAACU,SAAV,CAAoBP,WAApB,CAAV;AACA,MAAIQ,SAAS,GAAGF,GAAG,CAACG,MAApB;AAEA,MAAIC,MAAM,GAAGF,SAAS,IAAIF,GAAG,CAAC,CAAD,CAAH,CAAOK,OAAP,CAAe,MAAf,EAAuB,EAAvB,CAA1B;AAEA,MAAIC,eAAJ,EAAqBC,gBAArB;;AAEA,WAASC,MAAT,CAAgBC,IAAhB,EAAsBC,IAAtB,EAA4B;AACxB,WAAO5B,GAAG,CAAC0B,MAAJ,CAAWF,eAAX,EAA4BC,gBAA5B,EAA8CX,iBAA9C,EAAiEa,IAAjE,EAAuEC,IAAvE,CAAP;AACH;;AAED,OAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGT,SAAnB,EAA8BS,CAAC,EAA/B,EAAmC;AAC/B,QAAIC,EAAE,GAAGZ,GAAG,CAACW,CAAD,CAAZ,CAD+B,CAG/B;;AACA,QAAGrB,QAAQ,CAACsB,EAAD,CAAX,EAAiBN,eAAe,GAAGhB,QAAQ,CAACsB,EAAD,CAA1B,CAAjB,KACKN,eAAe,GAAGhB,QAAQ,CAACsB,EAAD,CAAR,GAAe,EAAjC;AAELL,IAAAA,gBAAgB,GAAGvB,QAAQ,CAAC6B,YAAT,CAAsBtB,SAAtB,EAAiCqB,EAAjC,EAAqCR,MAArC,CAAnB,CAP+B,CAS/B;AACA;AACA;AACA;;AACAI,IAAAA,MAAM,CAAC,YAAD,EAAejB,SAAS,CAACuB,UAAzB,CAAN;AAEA,QAAIC,WAAW,GAAG,EAAlB;AACAA,IAAAA,WAAW,CAAChB,SAAD,CAAX,GAAyB,CAACY,CAAC,GAAGT,SAAL,EAAgB,CAACS,CAAC,GAAG,CAAL,IAAUT,SAA1B,CAAzB;AACAjB,IAAAA,oBAAoB,CAACsB,gBAAD,EAAmBhB,SAAnB,EAA8BiB,MAA9B,EAAsCO,WAAtC,CAApB;AAEAtB,IAAAA,IAAI,CAACmB,EAAL,GAAUA,EAAV;AACAd,IAAAA,cAAc,CAACQ,eAAD,EAAkBC,gBAAlB,EAAoCC,MAApC,EAA4Cf,IAA5C,CAAd;AACH;AACJ,CAvCD","sourcesContent":["'use strict';\r\n\r\nvar Lib = require('../lib');\r\nvar Template = require('../plot_api/plot_template');\r\nvar handleDomainDefaults = require('./domain').defaults;\r\n\r\n\r\n/**\r\n * Find and supply defaults to all subplots of a given type\r\n * This handles subplots that are contained within one container - so\r\n * gl3d, geo, ternary... but not 2d axes which have separate x and y axes\r\n * finds subplots, coerces their `domain` attributes, then calls the\r\n * given handleDefaults function to fill in everything else.\r\n *\r\n * layoutIn: the complete user-supplied input layout\r\n * layoutOut: the complete finished layout\r\n * fullData: the finished data array, used only to find subplots\r\n * opts: {\r\n *  type: subplot type string\r\n *  attributes: subplot attributes object\r\n *  partition: 'x' or 'y', which direction to divide domain space by default\r\n *      (default 'x', ie side-by-side subplots)\r\n *      TODO: this option is only here because 3D and geo made opposite\r\n *      choices in this regard previously and I didn't want to change it.\r\n *      Instead we should do:\r\n *      - something consistent\r\n *      - something more square (4 cuts 2x2, 5/6 cuts 2x3, etc.)\r\n *      - something that includes all subplot types in one arrangement,\r\n *        now that we can have them together!\r\n *  handleDefaults: function of (subplotLayoutIn, subplotLayoutOut, coerce, opts)\r\n *      this opts object is passed through to handleDefaults, so attach any\r\n *      additional items needed by this function here as well\r\n * }\r\n */\r\nmodule.exports = function handleSubplotDefaults(layoutIn, layoutOut, fullData, opts) {\r\n    var subplotType = opts.type;\r\n    var subplotAttributes = opts.attributes;\r\n    var handleDefaults = opts.handleDefaults;\r\n    var partition = opts.partition || 'x';\r\n\r\n    var ids = layoutOut._subplots[subplotType];\r\n    var idsLength = ids.length;\r\n\r\n    var baseId = idsLength && ids[0].replace(/\\d+$/, '');\r\n\r\n    var subplotLayoutIn, subplotLayoutOut;\r\n\r\n    function coerce(attr, dflt) {\r\n        return Lib.coerce(subplotLayoutIn, subplotLayoutOut, subplotAttributes, attr, dflt);\r\n    }\r\n\r\n    for(var i = 0; i < idsLength; i++) {\r\n        var id = ids[i];\r\n\r\n        // ternary traces get a layout ternary for free!\r\n        if(layoutIn[id]) subplotLayoutIn = layoutIn[id];\r\n        else subplotLayoutIn = layoutIn[id] = {};\r\n\r\n        subplotLayoutOut = Template.newContainer(layoutOut, id, baseId);\r\n\r\n        // All subplot containers get a `uirevision` inheriting from the base.\r\n        // Currently all subplots containers have some user interaction\r\n        // attributes, but if we ever add one that doesn't, we would need an\r\n        // option to skip this step.\r\n        coerce('uirevision', layoutOut.uirevision);\r\n\r\n        var dfltDomains = {};\r\n        dfltDomains[partition] = [i / idsLength, (i + 1) / idsLength];\r\n        handleDomainDefaults(subplotLayoutOut, layoutOut, coerce, dfltDomains);\r\n\r\n        opts.id = id;\r\n        handleDefaults(subplotLayoutIn, subplotLayoutOut, coerce, opts);\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}