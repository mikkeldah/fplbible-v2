{"ast":null,"code":"'use strict';\n\nvar Lib = require('../../lib');\n\nvar Axes = require('../../plots/cartesian/axes');\n\nvar handleArrayContainerDefaults = require('../../plots/array_container_defaults');\n\nvar attributes = require('./attributes');\n\nvar helpers = require('./helpers');\n\nmodule.exports = function supplyLayoutDefaults(layoutIn, layoutOut) {\n  handleArrayContainerDefaults(layoutIn, layoutOut, {\n    name: 'shapes',\n    handleItemDefaults: handleShapeDefaults\n  });\n};\n\nfunction handleShapeDefaults(shapeIn, shapeOut, fullLayout) {\n  function coerce(attr, dflt) {\n    return Lib.coerce(shapeIn, shapeOut, attributes, attr, dflt);\n  }\n\n  var visible = coerce('visible');\n  if (!visible) return;\n  var path = coerce('path');\n  var dfltType = path ? 'path' : 'rect';\n  var shapeType = coerce('type', dfltType);\n  if (shapeOut.type !== 'path') delete shapeOut.path;\n  coerce('editable');\n  coerce('layer');\n  coerce('opacity');\n  coerce('fillcolor');\n  coerce('fillrule');\n  var lineWidth = coerce('line.width');\n\n  if (lineWidth) {\n    coerce('line.color');\n    coerce('line.dash');\n  }\n\n  var xSizeMode = coerce('xsizemode');\n  var ySizeMode = coerce('ysizemode'); // positioning\n\n  var axLetters = ['x', 'y'];\n\n  for (var i = 0; i < 2; i++) {\n    var axLetter = axLetters[i];\n    var attrAnchor = axLetter + 'anchor';\n    var sizeMode = axLetter === 'x' ? xSizeMode : ySizeMode;\n    var gdMock = {\n      _fullLayout: fullLayout\n    };\n    var ax;\n    var pos2r;\n    var r2pos; // xref, yref\n\n    var axRef = Axes.coerceRef(shapeIn, shapeOut, gdMock, axLetter, undefined, 'paper');\n    var axRefType = Axes.getRefType(axRef);\n\n    if (axRefType === 'range') {\n      ax = Axes.getFromId(gdMock, axRef);\n\n      ax._shapeIndices.push(shapeOut._index);\n\n      r2pos = helpers.rangeToShapePosition(ax);\n      pos2r = helpers.shapePositionToRange(ax);\n    } else {\n      pos2r = r2pos = Lib.identity;\n    } // Coerce x0, x1, y0, y1\n\n\n    if (shapeType !== 'path') {\n      var dflt0 = 0.25;\n      var dflt1 = 0.75; // hack until V3.0 when log has regular range behavior - make it look like other\n      // ranges to send to coerce, then put it back after\n      // this is all to give reasonable default position behavior on log axes, which is\n      // a pretty unimportant edge case so we could just ignore this.\n\n      var attr0 = axLetter + '0';\n      var attr1 = axLetter + '1';\n      var in0 = shapeIn[attr0];\n      var in1 = shapeIn[attr1];\n      shapeIn[attr0] = pos2r(shapeIn[attr0], true);\n      shapeIn[attr1] = pos2r(shapeIn[attr1], true);\n\n      if (sizeMode === 'pixel') {\n        coerce(attr0, 0);\n        coerce(attr1, 10);\n      } else {\n        Axes.coercePosition(shapeOut, gdMock, coerce, axRef, attr0, dflt0);\n        Axes.coercePosition(shapeOut, gdMock, coerce, axRef, attr1, dflt1);\n      } // hack part 2\n\n\n      shapeOut[attr0] = r2pos(shapeOut[attr0]);\n      shapeOut[attr1] = r2pos(shapeOut[attr1]);\n      shapeIn[attr0] = in0;\n      shapeIn[attr1] = in1;\n    } // Coerce xanchor and yanchor\n\n\n    if (sizeMode === 'pixel') {\n      // Hack for log axis described above\n      var inAnchor = shapeIn[attrAnchor];\n      shapeIn[attrAnchor] = pos2r(shapeIn[attrAnchor], true);\n      Axes.coercePosition(shapeOut, gdMock, coerce, axRef, attrAnchor, 0.25); // Hack part 2\n\n      shapeOut[attrAnchor] = r2pos(shapeOut[attrAnchor]);\n      shapeIn[attrAnchor] = inAnchor;\n    }\n  }\n\n  if (shapeType === 'path') {\n    coerce('path');\n  } else {\n    Lib.noneOrAll(shapeIn, shapeOut, ['x0', 'x1', 'y0', 'y1']);\n  }\n}","map":{"version":3,"sources":["C:/Users/mikke/VSC/fantasy-django-react/fantasy-django/fantasy-react-app/node_modules/plotly.js/src/components/shapes/defaults.js"],"names":["Lib","require","Axes","handleArrayContainerDefaults","attributes","helpers","module","exports","supplyLayoutDefaults","layoutIn","layoutOut","name","handleItemDefaults","handleShapeDefaults","shapeIn","shapeOut","fullLayout","coerce","attr","dflt","visible","path","dfltType","shapeType","type","lineWidth","xSizeMode","ySizeMode","axLetters","i","axLetter","attrAnchor","sizeMode","gdMock","_fullLayout","ax","pos2r","r2pos","axRef","coerceRef","undefined","axRefType","getRefType","getFromId","_shapeIndices","push","_index","rangeToShapePosition","shapePositionToRange","identity","dflt0","dflt1","attr0","attr1","in0","in1","coercePosition","inAnchor","noneOrAll"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nvar Lib = require('../../lib');\r\nvar Axes = require('../../plots/cartesian/axes');\r\nvar handleArrayContainerDefaults = require('../../plots/array_container_defaults');\r\n\r\nvar attributes = require('./attributes');\r\nvar helpers = require('./helpers');\r\n\r\n\r\nmodule.exports = function supplyLayoutDefaults(layoutIn, layoutOut) {\r\n    handleArrayContainerDefaults(layoutIn, layoutOut, {\r\n        name: 'shapes',\r\n        handleItemDefaults: handleShapeDefaults\r\n    });\r\n};\r\n\r\nfunction handleShapeDefaults(shapeIn, shapeOut, fullLayout) {\r\n    function coerce(attr, dflt) {\r\n        return Lib.coerce(shapeIn, shapeOut, attributes, attr, dflt);\r\n    }\r\n\r\n    var visible = coerce('visible');\r\n    if(!visible) return;\r\n\r\n    var path = coerce('path');\r\n    var dfltType = path ? 'path' : 'rect';\r\n    var shapeType = coerce('type', dfltType);\r\n    if(shapeOut.type !== 'path') delete shapeOut.path;\r\n\r\n    coerce('editable');\r\n    coerce('layer');\r\n    coerce('opacity');\r\n    coerce('fillcolor');\r\n    coerce('fillrule');\r\n    var lineWidth = coerce('line.width');\r\n    if(lineWidth) {\r\n        coerce('line.color');\r\n        coerce('line.dash');\r\n    }\r\n\r\n    var xSizeMode = coerce('xsizemode');\r\n    var ySizeMode = coerce('ysizemode');\r\n\r\n    // positioning\r\n    var axLetters = ['x', 'y'];\r\n    for(var i = 0; i < 2; i++) {\r\n        var axLetter = axLetters[i];\r\n        var attrAnchor = axLetter + 'anchor';\r\n        var sizeMode = axLetter === 'x' ? xSizeMode : ySizeMode;\r\n        var gdMock = {_fullLayout: fullLayout};\r\n        var ax;\r\n        var pos2r;\r\n        var r2pos;\r\n\r\n        // xref, yref\r\n        var axRef = Axes.coerceRef(shapeIn, shapeOut, gdMock, axLetter, undefined,\r\n            'paper');\r\n        var axRefType = Axes.getRefType(axRef);\r\n\r\n        if(axRefType === 'range') {\r\n            ax = Axes.getFromId(gdMock, axRef);\r\n            ax._shapeIndices.push(shapeOut._index);\r\n            r2pos = helpers.rangeToShapePosition(ax);\r\n            pos2r = helpers.shapePositionToRange(ax);\r\n        } else {\r\n            pos2r = r2pos = Lib.identity;\r\n        }\r\n\r\n        // Coerce x0, x1, y0, y1\r\n        if(shapeType !== 'path') {\r\n            var dflt0 = 0.25;\r\n            var dflt1 = 0.75;\r\n\r\n            // hack until V3.0 when log has regular range behavior - make it look like other\r\n            // ranges to send to coerce, then put it back after\r\n            // this is all to give reasonable default position behavior on log axes, which is\r\n            // a pretty unimportant edge case so we could just ignore this.\r\n            var attr0 = axLetter + '0';\r\n            var attr1 = axLetter + '1';\r\n            var in0 = shapeIn[attr0];\r\n            var in1 = shapeIn[attr1];\r\n            shapeIn[attr0] = pos2r(shapeIn[attr0], true);\r\n            shapeIn[attr1] = pos2r(shapeIn[attr1], true);\r\n\r\n            if(sizeMode === 'pixel') {\r\n                coerce(attr0, 0);\r\n                coerce(attr1, 10);\r\n            } else {\r\n                Axes.coercePosition(shapeOut, gdMock, coerce, axRef, attr0, dflt0);\r\n                Axes.coercePosition(shapeOut, gdMock, coerce, axRef, attr1, dflt1);\r\n            }\r\n\r\n            // hack part 2\r\n            shapeOut[attr0] = r2pos(shapeOut[attr0]);\r\n            shapeOut[attr1] = r2pos(shapeOut[attr1]);\r\n            shapeIn[attr0] = in0;\r\n            shapeIn[attr1] = in1;\r\n        }\r\n\r\n        // Coerce xanchor and yanchor\r\n        if(sizeMode === 'pixel') {\r\n            // Hack for log axis described above\r\n            var inAnchor = shapeIn[attrAnchor];\r\n            shapeIn[attrAnchor] = pos2r(shapeIn[attrAnchor], true);\r\n\r\n            Axes.coercePosition(shapeOut, gdMock, coerce, axRef, attrAnchor, 0.25);\r\n\r\n            // Hack part 2\r\n            shapeOut[attrAnchor] = r2pos(shapeOut[attrAnchor]);\r\n            shapeIn[attrAnchor] = inAnchor;\r\n        }\r\n    }\r\n\r\n    if(shapeType === 'path') {\r\n        coerce('path');\r\n    } else {\r\n        Lib.noneOrAll(shapeIn, shapeOut, ['x0', 'x1', 'y0', 'y1']);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}