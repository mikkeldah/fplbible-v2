{"ast":null,"code":"'use strict';\n\nvar Lib = require('../../lib');\n\nvar Axes = require('../../plots/cartesian/axes');\n\nmodule.exports = function convert(scene) {\n  var fullSceneLayout = scene.fullSceneLayout;\n  var anns = fullSceneLayout.annotations;\n\n  for (var i = 0; i < anns.length; i++) {\n    mockAnnAxes(anns[i], scene);\n  }\n\n  scene.fullLayout._infolayer.selectAll('.annotation-' + scene.id).remove();\n};\n\nfunction mockAnnAxes(ann, scene) {\n  var fullSceneLayout = scene.fullSceneLayout;\n  var domain = fullSceneLayout.domain;\n  var size = scene.fullLayout._size;\n  var base = {\n    // this gets fill in on render\n    pdata: null,\n    // to get setConvert to not execute cleanly\n    type: 'linear',\n    // don't try to update them on `editable: true`\n    autorange: false,\n    // set infinite range so that annotation draw routine\n    // does not try to remove 'outside-range' annotations,\n    // this case is handled in the render loop\n    range: [-Infinity, Infinity]\n  };\n  ann._xa = {};\n  Lib.extendFlat(ann._xa, base);\n  Axes.setConvert(ann._xa);\n  ann._xa._offset = size.l + domain.x[0] * size.w;\n\n  ann._xa.l2p = function () {\n    return 0.5 * (1 + ann._pdata[0] / ann._pdata[3]) * size.w * (domain.x[1] - domain.x[0]);\n  };\n\n  ann._ya = {};\n  Lib.extendFlat(ann._ya, base);\n  Axes.setConvert(ann._ya);\n  ann._ya._offset = size.t + (1 - domain.y[1]) * size.h;\n\n  ann._ya.l2p = function () {\n    return 0.5 * (1 - ann._pdata[1] / ann._pdata[3]) * size.h * (domain.y[1] - domain.y[0]);\n  };\n}","map":{"version":3,"sources":["C:/Users/mikke/VSC/fantasy-django-react/fantasy-django/fantasy-react-app/node_modules/plotly.js/src/components/annotations3d/convert.js"],"names":["Lib","require","Axes","module","exports","convert","scene","fullSceneLayout","anns","annotations","i","length","mockAnnAxes","fullLayout","_infolayer","selectAll","id","remove","ann","domain","size","_size","base","pdata","type","autorange","range","Infinity","_xa","extendFlat","setConvert","_offset","l","x","w","l2p","_pdata","_ya","t","y","h"],"mappings":"AAAA;;AAEA,IAAIA,GAAG,GAAGC,OAAO,CAAC,WAAD,CAAjB;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,4BAAD,CAAlB;;AAEAE,MAAM,CAACC,OAAP,GAAiB,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AACrC,MAAIC,eAAe,GAAGD,KAAK,CAACC,eAA5B;AACA,MAAIC,IAAI,GAAGD,eAAe,CAACE,WAA3B;;AAEA,OAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGF,IAAI,CAACG,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACjCE,IAAAA,WAAW,CAACJ,IAAI,CAACE,CAAD,CAAL,EAAUJ,KAAV,CAAX;AACH;;AAEDA,EAAAA,KAAK,CAACO,UAAN,CAAiBC,UAAjB,CACKC,SADL,CACe,iBAAiBT,KAAK,CAACU,EADtC,EAEKC,MAFL;AAGH,CAXD;;AAaA,SAASL,WAAT,CAAqBM,GAArB,EAA0BZ,KAA1B,EAAiC;AAC7B,MAAIC,eAAe,GAAGD,KAAK,CAACC,eAA5B;AACA,MAAIY,MAAM,GAAGZ,eAAe,CAACY,MAA7B;AACA,MAAIC,IAAI,GAAGd,KAAK,CAACO,UAAN,CAAiBQ,KAA5B;AAEA,MAAIC,IAAI,GAAG;AACP;AACAC,IAAAA,KAAK,EAAE,IAFA;AAIP;AACAC,IAAAA,IAAI,EAAE,QALC;AAOP;AACAC,IAAAA,SAAS,EAAE,KARJ;AAUP;AACA;AACA;AACAC,IAAAA,KAAK,EAAE,CAAC,CAACC,QAAF,EAAYA,QAAZ;AAbA,GAAX;AAgBAT,EAAAA,GAAG,CAACU,GAAJ,GAAU,EAAV;AACA5B,EAAAA,GAAG,CAAC6B,UAAJ,CAAeX,GAAG,CAACU,GAAnB,EAAwBN,IAAxB;AACApB,EAAAA,IAAI,CAAC4B,UAAL,CAAgBZ,GAAG,CAACU,GAApB;AACAV,EAAAA,GAAG,CAACU,GAAJ,CAAQG,OAAR,GAAkBX,IAAI,CAACY,CAAL,GAASb,MAAM,CAACc,CAAP,CAAS,CAAT,IAAcb,IAAI,CAACc,CAA9C;;AACAhB,EAAAA,GAAG,CAACU,GAAJ,CAAQO,GAAR,GAAc,YAAW;AACrB,WAAO,OAAO,IAAIjB,GAAG,CAACkB,MAAJ,CAAW,CAAX,IAAgBlB,GAAG,CAACkB,MAAJ,CAAW,CAAX,CAA3B,IAA4ChB,IAAI,CAACc,CAAjD,IAAsDf,MAAM,CAACc,CAAP,CAAS,CAAT,IAAcd,MAAM,CAACc,CAAP,CAAS,CAAT,CAApE,CAAP;AACH,GAFD;;AAIAf,EAAAA,GAAG,CAACmB,GAAJ,GAAU,EAAV;AACArC,EAAAA,GAAG,CAAC6B,UAAJ,CAAeX,GAAG,CAACmB,GAAnB,EAAwBf,IAAxB;AACApB,EAAAA,IAAI,CAAC4B,UAAL,CAAgBZ,GAAG,CAACmB,GAApB;AACAnB,EAAAA,GAAG,CAACmB,GAAJ,CAAQN,OAAR,GAAkBX,IAAI,CAACkB,CAAL,GAAS,CAAC,IAAInB,MAAM,CAACoB,CAAP,CAAS,CAAT,CAAL,IAAoBnB,IAAI,CAACoB,CAApD;;AACAtB,EAAAA,GAAG,CAACmB,GAAJ,CAAQF,GAAR,GAAc,YAAW;AACrB,WAAO,OAAO,IAAIjB,GAAG,CAACkB,MAAJ,CAAW,CAAX,IAAgBlB,GAAG,CAACkB,MAAJ,CAAW,CAAX,CAA3B,IAA4ChB,IAAI,CAACoB,CAAjD,IAAsDrB,MAAM,CAACoB,CAAP,CAAS,CAAT,IAAcpB,MAAM,CAACoB,CAAP,CAAS,CAAT,CAApE,CAAP;AACH,GAFD;AAGH","sourcesContent":["'use strict';\r\n\r\nvar Lib = require('../../lib');\r\nvar Axes = require('../../plots/cartesian/axes');\r\n\r\nmodule.exports = function convert(scene) {\r\n    var fullSceneLayout = scene.fullSceneLayout;\r\n    var anns = fullSceneLayout.annotations;\r\n\r\n    for(var i = 0; i < anns.length; i++) {\r\n        mockAnnAxes(anns[i], scene);\r\n    }\r\n\r\n    scene.fullLayout._infolayer\r\n        .selectAll('.annotation-' + scene.id)\r\n        .remove();\r\n};\r\n\r\nfunction mockAnnAxes(ann, scene) {\r\n    var fullSceneLayout = scene.fullSceneLayout;\r\n    var domain = fullSceneLayout.domain;\r\n    var size = scene.fullLayout._size;\r\n\r\n    var base = {\r\n        // this gets fill in on render\r\n        pdata: null,\r\n\r\n        // to get setConvert to not execute cleanly\r\n        type: 'linear',\r\n\r\n        // don't try to update them on `editable: true`\r\n        autorange: false,\r\n\r\n        // set infinite range so that annotation draw routine\r\n        // does not try to remove 'outside-range' annotations,\r\n        // this case is handled in the render loop\r\n        range: [-Infinity, Infinity]\r\n    };\r\n\r\n    ann._xa = {};\r\n    Lib.extendFlat(ann._xa, base);\r\n    Axes.setConvert(ann._xa);\r\n    ann._xa._offset = size.l + domain.x[0] * size.w;\r\n    ann._xa.l2p = function() {\r\n        return 0.5 * (1 + ann._pdata[0] / ann._pdata[3]) * size.w * (domain.x[1] - domain.x[0]);\r\n    };\r\n\r\n    ann._ya = {};\r\n    Lib.extendFlat(ann._ya, base);\r\n    Axes.setConvert(ann._ya);\r\n    ann._ya._offset = size.t + (1 - domain.y[1]) * size.h;\r\n    ann._ya.l2p = function() {\r\n        return 0.5 * (1 - ann._pdata[1] / ann._pdata[3]) * size.h * (domain.y[1] - domain.y[0]);\r\n    };\r\n}\r\n"]},"metadata":{},"sourceType":"script"}