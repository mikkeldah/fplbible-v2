{"ast":null,"code":"'use strict';\n\nvar Colorscale = require('../../components/colorscale');\n\nvar heatmapCalc = require('../heatmap/calc');\n\nvar setContours = require('./set_contours');\n\nvar endPlus = require('./end_plus'); // most is the same as heatmap calc, then adjust it\n// though a few things inside heatmap calc still look for\n// contour maps, because the makeBoundArray calls are too entangled\n\n\nmodule.exports = function calc(gd, trace) {\n  var cd = heatmapCalc(gd, trace);\n  var zOut = cd[0].z;\n  setContours(trace, zOut);\n  var contours = trace.contours;\n  var cOpts = Colorscale.extractOpts(trace);\n  var cVals;\n\n  if (contours.coloring === 'heatmap' && cOpts.auto && trace.autocontour === false) {\n    var start = contours.start;\n    var end = endPlus(contours);\n    var cs = contours.size || 1;\n    var nc = Math.floor((end - start) / cs) + 1;\n\n    if (!isFinite(cs)) {\n      cs = 1;\n      nc = 1;\n    }\n\n    var min0 = start - cs / 2;\n    var max0 = min0 + nc * cs;\n    cVals = [min0, max0];\n  } else {\n    cVals = zOut;\n  }\n\n  Colorscale.calc(gd, trace, {\n    vals: cVals,\n    cLetter: 'z'\n  });\n  return cd;\n};","map":{"version":3,"sources":["C:/Users/mikke/VSC/fantasy-django-react/fantasy-django/fantasy-react-app/node_modules/plotly.js/src/traces/contour/calc.js"],"names":["Colorscale","require","heatmapCalc","setContours","endPlus","module","exports","calc","gd","trace","cd","zOut","z","contours","cOpts","extractOpts","cVals","coloring","auto","autocontour","start","end","cs","size","nc","Math","floor","isFinite","min0","max0","vals","cLetter"],"mappings":"AAAA;;AAEA,IAAIA,UAAU,GAAGC,OAAO,CAAC,6BAAD,CAAxB;;AAEA,IAAIC,WAAW,GAAGD,OAAO,CAAC,iBAAD,CAAzB;;AACA,IAAIE,WAAW,GAAGF,OAAO,CAAC,gBAAD,CAAzB;;AACA,IAAIG,OAAO,GAAGH,OAAO,CAAC,YAAD,CAArB,C,CAEA;AACA;AACA;;;AACAI,MAAM,CAACC,OAAP,GAAiB,SAASC,IAAT,CAAcC,EAAd,EAAkBC,KAAlB,EAAyB;AACtC,MAAIC,EAAE,GAAGR,WAAW,CAACM,EAAD,EAAKC,KAAL,CAApB;AAEA,MAAIE,IAAI,GAAGD,EAAE,CAAC,CAAD,CAAF,CAAME,CAAjB;AACAT,EAAAA,WAAW,CAACM,KAAD,EAAQE,IAAR,CAAX;AAEA,MAAIE,QAAQ,GAAGJ,KAAK,CAACI,QAArB;AACA,MAAIC,KAAK,GAAGd,UAAU,CAACe,WAAX,CAAuBN,KAAvB,CAAZ;AACA,MAAIO,KAAJ;;AAEA,MAAGH,QAAQ,CAACI,QAAT,KAAsB,SAAtB,IAAmCH,KAAK,CAACI,IAAzC,IAAiDT,KAAK,CAACU,WAAN,KAAsB,KAA1E,EAAiF;AAC7E,QAAIC,KAAK,GAAGP,QAAQ,CAACO,KAArB;AACA,QAAIC,GAAG,GAAGjB,OAAO,CAACS,QAAD,CAAjB;AACA,QAAIS,EAAE,GAAGT,QAAQ,CAACU,IAAT,IAAiB,CAA1B;AACA,QAAIC,EAAE,GAAGC,IAAI,CAACC,KAAL,CAAW,CAACL,GAAG,GAAGD,KAAP,IAAgBE,EAA3B,IAAiC,CAA1C;;AAEA,QAAG,CAACK,QAAQ,CAACL,EAAD,CAAZ,EAAkB;AACdA,MAAAA,EAAE,GAAG,CAAL;AACAE,MAAAA,EAAE,GAAG,CAAL;AACH;;AAED,QAAII,IAAI,GAAGR,KAAK,GAAGE,EAAE,GAAG,CAAxB;AACA,QAAIO,IAAI,GAAGD,IAAI,GAAGJ,EAAE,GAAGF,EAAvB;AACAN,IAAAA,KAAK,GAAG,CAACY,IAAD,EAAOC,IAAP,CAAR;AACH,GAdD,MAcO;AACHb,IAAAA,KAAK,GAAGL,IAAR;AACH;;AAEDX,EAAAA,UAAU,CAACO,IAAX,CAAgBC,EAAhB,EAAoBC,KAApB,EAA2B;AAACqB,IAAAA,IAAI,EAAEd,KAAP;AAAce,IAAAA,OAAO,EAAE;AAAvB,GAA3B;AAEA,SAAOrB,EAAP;AACH,CA/BD","sourcesContent":["'use strict';\r\n\r\nvar Colorscale = require('../../components/colorscale');\r\n\r\nvar heatmapCalc = require('../heatmap/calc');\r\nvar setContours = require('./set_contours');\r\nvar endPlus = require('./end_plus');\r\n\r\n// most is the same as heatmap calc, then adjust it\r\n// though a few things inside heatmap calc still look for\r\n// contour maps, because the makeBoundArray calls are too entangled\r\nmodule.exports = function calc(gd, trace) {\r\n    var cd = heatmapCalc(gd, trace);\r\n\r\n    var zOut = cd[0].z;\r\n    setContours(trace, zOut);\r\n\r\n    var contours = trace.contours;\r\n    var cOpts = Colorscale.extractOpts(trace);\r\n    var cVals;\r\n\r\n    if(contours.coloring === 'heatmap' && cOpts.auto && trace.autocontour === false) {\r\n        var start = contours.start;\r\n        var end = endPlus(contours);\r\n        var cs = contours.size || 1;\r\n        var nc = Math.floor((end - start) / cs) + 1;\r\n\r\n        if(!isFinite(cs)) {\r\n            cs = 1;\r\n            nc = 1;\r\n        }\r\n\r\n        var min0 = start - cs / 2;\r\n        var max0 = min0 + nc * cs;\r\n        cVals = [min0, max0];\r\n    } else {\r\n        cVals = zOut;\r\n    }\r\n\r\n    Colorscale.calc(gd, trace, {vals: cVals, cLetter: 'z'});\r\n\r\n    return cd;\r\n};\r\n"]},"metadata":{},"sourceType":"script"}