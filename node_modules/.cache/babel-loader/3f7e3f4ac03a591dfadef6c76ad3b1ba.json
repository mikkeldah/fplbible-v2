{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mikke\\\\VSC\\\\fantasy-django-react\\\\fantasy-django\\\\fantasy-react-app\\\\src\\\\components\\\\statpage\\\\PlotContainer.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport Plotly from \"plotly.js\";\nimport createPlotlyComponent from 'react-plotly.js/factory';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Plot = createPlotlyComponent(Plotly);\n_c = Plot;\n\nfunction PlotContainer(props) {\n  _s();\n\n  const [preferences, setPreferences] = useState(props.preferences);\n  const [data, setData] = useState(props.data);\n  const [GKPdata, DEFdata, MIDdata, FWDdata, xLabel, yLabel, text] = getXYData(data, preferences);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"plot-container\",\n    children: /*#__PURE__*/_jsxDEV(Plot, {\n      data: [\n      /* GKP data */\n      {\n        x: GKPdata[0],\n        y: GKPdata[1],\n        type: 'scatter',\n        text: GKPdata[3],\n        mode: 'markers' + text,\n        textposition: 'top center',\n        name: \"GKP\",\n        marker: {\n          size: 8\n        }\n      },\n      /* DEF data */\n      {\n        x: DEFdata[0],\n        y: DEFdata[1],\n        type: 'scatter',\n        text: DEFdata[2],\n        mode: 'markers' + text,\n        textposition: 'top center',\n        name: \"DEF\",\n        marker: {\n          size: 8\n        }\n      },\n      /* MID data */\n      {\n        x: MIDdata[0],\n        y: MIDdata[1],\n        type: 'scatter',\n        text: MIDdata[2],\n        mode: 'markers' + text,\n        textposition: 'top center',\n        name: \"MID\",\n        marker: {\n          size: 8\n        }\n      },\n      /* FWD data */\n      {\n        x: FWDdata[0],\n        y: FWDdata[1],\n        type: 'scatter',\n        text: FWDdata[2],\n        mode: 'markers' + text,\n        textposition: 'top center',\n        name: \"FWD\",\n        marker: {\n          size: 8\n        }\n      }],\n      layout: {\n        height: 480,\n        xaxis: {\n          title: xLabel,\n          autorange: true,\n          gridcolor: 'grey',\n          linecolor: '#636363',\n          linewidth: 2\n        },\n        yaxis: {\n          title: yLabel,\n          autorange: true,\n          gridcolor: 'grey',\n          linecolor: '#636363',\n          linewidth: 2\n        },\n        hovermode: 'closest',\n        plot_bgcolor: \"#222\",\n        paper_bgcolor: \"#222\",\n        font: {\n          color: \"white\"\n        }\n      },\n      config: {\n        responsive: true\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 9\n  }, this);\n} //IMPORTANT FUNCTION: filters and returns data according to user preferences\n\n\n_s(PlotContainer, \"p80+ta66ZSsISlL/JL2XG90VDeU=\");\n\n_c2 = PlotContainer;\n\nfunction getXYData(JSONdata, preferences) {\n  let xDataGKP = [];\n  let yDataGKP = [];\n  let namesGKP = [];\n  let xDataDEF = [];\n  let yDataDEF = [];\n  let namesDEF = [];\n  let xDataMID = [];\n  let yDataMID = [];\n  let namesMID = [];\n  let xDataFWD = [];\n  let yDataFWD = [];\n  let namesFWD = [];\n  const xLabel = preferences[0];\n  const yLabel = preferences[1];\n  const GKPchecked = preferences[2];\n  const DEFchecked = preferences[3];\n  const MIDchecked = preferences[4];\n  const FWDchecked = preferences[5];\n  const minMinutesPlayed = preferences[6];\n  const maxPrice = preferences[7];\n  const teamSelected = preferences[8];\n  const playerAvailability = preferences[9];\n\n  for (let i = 0; i < JSONdata.length; i++) {\n    if (JSONdata[i]['minutes'] > minMinutesPlayed && (JSONdata[i]['price'] < maxPrice || maxPrice === '') && (JSONdata[i]['team'] === teamSelected || teamSelected === 'All teams') && (JSONdata[i]['status'] === playerAvailability || playerAvailability === 'All')) {\n      if (JSONdata[i]['position'] === 'GKP' && GKPchecked) {\n        xDataGKP.push(JSONdata[i][xLabel]);\n        yDataGKP.push(JSONdata[i][yLabel]);\n        namesGKP.push(JSONdata[i]['web_name']);\n      }\n\n      if (JSONdata[i]['position'] === 'DEF' && DEFchecked) {\n        xDataDEF.push(JSONdata[i][xLabel]);\n        yDataDEF.push(JSONdata[i][yLabel]);\n        namesDEF.push(JSONdata[i]['web_name']);\n      }\n\n      if (JSONdata[i]['position'] === 'MID' && MIDchecked) {\n        xDataMID.push(JSONdata[i][xLabel]);\n        yDataMID.push(JSONdata[i][yLabel]);\n        namesMID.push(JSONdata[i]['web_name']);\n      }\n\n      if (JSONdata[i]['position'] === 'FWD' && FWDchecked) {\n        xDataFWD.push(JSONdata[i][xLabel]);\n        yDataFWD.push(JSONdata[i][yLabel]);\n        namesFWD.push(JSONdata[i]['web_name']);\n      }\n    }\n  }\n\n  const GKPdata = [xDataGKP, yDataGKP, namesGKP];\n  const DEFdata = [xDataDEF, yDataDEF, namesDEF];\n  const MIDdata = [xDataMID, yDataMID, namesMID];\n  const FWDdata = [xDataFWD, yDataFWD, namesFWD];\n  const showNames = preferences[10];\n  let text = '';\n\n  if (showNames === 'Always') {\n    text = '+text';\n  }\n\n  return [GKPdata, DEFdata, MIDdata, FWDdata, xLabel, yLabel, text];\n}\n\nexport default PlotContainer;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Plot\");\n$RefreshReg$(_c2, \"PlotContainer\");","map":{"version":3,"sources":["C:/Users/mikke/VSC/fantasy-django-react/fantasy-django/fantasy-react-app/src/components/statpage/PlotContainer.js"],"names":["useState","useEffect","Plotly","createPlotlyComponent","Plot","PlotContainer","props","preferences","setPreferences","data","setData","GKPdata","DEFdata","MIDdata","FWDdata","xLabel","yLabel","text","getXYData","x","y","type","mode","textposition","name","marker","size","height","xaxis","title","autorange","gridcolor","linecolor","linewidth","yaxis","hovermode","plot_bgcolor","paper_bgcolor","font","color","responsive","JSONdata","xDataGKP","yDataGKP","namesGKP","xDataDEF","yDataDEF","namesDEF","xDataMID","yDataMID","namesMID","xDataFWD","yDataFWD","namesFWD","GKPchecked","DEFchecked","MIDchecked","FWDchecked","minMinutesPlayed","maxPrice","teamSelected","playerAvailability","i","length","push","showNames"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport Plotly from \"plotly.js\";\r\nimport createPlotlyComponent from 'react-plotly.js/factory';\r\nconst Plot = createPlotlyComponent(Plotly);\r\n\r\nfunction PlotContainer(props) {\r\n\r\n    const [ preferences, setPreferences ] = useState(props.preferences); \r\n    const [ data, setData ] = useState(props.data); \r\n\r\n    const [ GKPdata, DEFdata, MIDdata, FWDdata, xLabel, yLabel, text ] = getXYData(data, preferences);\r\n\r\n    return (\r\n        <div id=\"plot-container\">\r\n                <Plot \r\n                    data={[\r\n                        /* GKP data */ \r\n                        {\r\n                            x: GKPdata[0],\r\n                            y: GKPdata[1],\r\n                            type: 'scatter',\r\n                            text: GKPdata[3],\r\n                            mode: 'markers'+text,\r\n                            textposition: 'top center',\r\n                            name: \"GKP\",\r\n                            marker: { size: 8 },\r\n                        },\r\n                        /* DEF data */ \r\n                        {\r\n                            x: DEFdata[0],\r\n                            y: DEFdata[1],\r\n                            type: 'scatter',\r\n                            text: DEFdata[2],\r\n                            mode: 'markers'+text,\r\n                            textposition: 'top center',\r\n                            name: \"DEF\",\r\n                            marker: { size: 8 },\r\n                        },\r\n                        /* MID data */ \r\n                        {\r\n                            x: MIDdata[0],\r\n                            y: MIDdata[1],\r\n                            type: 'scatter',\r\n                            text: MIDdata[2],\r\n                            mode: 'markers'+text,\r\n                            textposition: 'top center',\r\n                            name: \"MID\",\r\n                            marker: { size: 8 },\r\n                        },\r\n                        /* FWD data */ \r\n                        {\r\n                            x: FWDdata[0],\r\n                            y: FWDdata[1],\r\n                            type: 'scatter',\r\n                            text: FWDdata[2],\r\n                            mode: 'markers'+text,\r\n                            textposition: 'top center',\r\n                            name: \"FWD\",\r\n                            marker: { size: 8 },\r\n                        },\r\n                    ]}\r\n                    layout={ {\r\n                        height: 480,\r\n                        xaxis: {\r\n                            title: xLabel,\r\n                            autorange: true,\r\n                            gridcolor: 'grey',\r\n                            linecolor: '#636363',\r\n                            linewidth: 2\r\n                        },\r\n                        yaxis: {\r\n                            title: yLabel,\r\n                            autorange: true,\r\n                            gridcolor: 'grey',\r\n                            linecolor: '#636363',\r\n                            linewidth: 2\r\n                        },\r\n                        hovermode: 'closest',\r\n                        plot_bgcolor:\"#222\",\r\n                        paper_bgcolor:\"#222\",\r\n                        font: {\r\n                            color: \"white\",\r\n                        }\r\n                    }}\r\n                    config = {{responsive: true}}\r\n                />\r\n            </div>\r\n    )\r\n}\r\n\r\n//IMPORTANT FUNCTION: filters and returns data according to user preferences\r\nfunction getXYData(JSONdata, preferences) {\r\n    let xDataGKP = []\r\n    let yDataGKP = []\r\n    let namesGKP = []\r\n\r\n    let xDataDEF = []\r\n    let yDataDEF = []\r\n    let namesDEF = []\r\n\r\n    let xDataMID = []\r\n    let yDataMID = []\r\n    let namesMID = []\r\n\r\n    let xDataFWD = []\r\n    let yDataFWD = []\r\n    let namesFWD = []\r\n\r\n    const xLabel = preferences[0]\r\n    const yLabel = preferences[1]\r\n\r\n    const GKPchecked = preferences[2]\r\n    const DEFchecked = preferences[3]\r\n    const MIDchecked = preferences[4]\r\n    const FWDchecked = preferences[5]\r\n\r\n    const  minMinutesPlayed = preferences[6]\r\n    \r\n    const maxPrice = preferences[7]\r\n\r\n    const teamSelected = preferences[8]\r\n\r\n    const playerAvailability = preferences[9]\r\n\r\n    for (let i = 0; i < JSONdata.length; i++) {\r\n        if ( (JSONdata[i]['minutes'] > minMinutesPlayed) && (JSONdata[i]['price'] < maxPrice || maxPrice === '') && (JSONdata[i]['team'] === teamSelected || teamSelected === 'All teams')\r\n            && (JSONdata[i]['status'] === playerAvailability || playerAvailability === 'All')) {\r\n            if (JSONdata[i]['position'] === 'GKP' && GKPchecked) {\r\n                xDataGKP.push(JSONdata[i][xLabel])\r\n                yDataGKP.push(JSONdata[i][yLabel])\r\n                namesGKP.push(JSONdata[i]['web_name'])\r\n\r\n            }\r\n            if (JSONdata[i]['position'] === 'DEF' && DEFchecked) {\r\n                xDataDEF.push(JSONdata[i][xLabel])\r\n                yDataDEF.push(JSONdata[i][yLabel])\r\n                namesDEF.push(JSONdata[i]['web_name'])\r\n\r\n            }\r\n            if (JSONdata[i]['position'] === 'MID' && MIDchecked) {\r\n                xDataMID.push(JSONdata[i][xLabel])\r\n                yDataMID.push(JSONdata[i][yLabel])\r\n                namesMID.push(JSONdata[i]['web_name'])\r\n\r\n            }\r\n            if (JSONdata[i]['position'] === 'FWD' && FWDchecked) {\r\n                xDataFWD.push(JSONdata[i][xLabel])\r\n                yDataFWD.push(JSONdata[i][yLabel])\r\n                namesFWD.push(JSONdata[i]['web_name'])\r\n\r\n            }\r\n            \r\n\r\n\r\n        }\r\n    }\r\n\r\n    const GKPdata = [xDataGKP, yDataGKP, namesGKP]\r\n    const DEFdata = [xDataDEF, yDataDEF, namesDEF]\r\n    const MIDdata = [xDataMID, yDataMID, namesMID]\r\n    const FWDdata = [xDataFWD, yDataFWD, namesFWD]\r\n\r\n    const showNames = preferences[10]\r\n\r\n    let text = ''\r\n\r\n    if (showNames === 'Always') {\r\n        text = '+text';\r\n    }\r\n    \r\n\r\n    return [GKPdata, DEFdata, MIDdata, FWDdata, xLabel, yLabel, text];\r\n}\r\n\r\nexport default PlotContainer;"]},"metadata":{},"sourceType":"module"}