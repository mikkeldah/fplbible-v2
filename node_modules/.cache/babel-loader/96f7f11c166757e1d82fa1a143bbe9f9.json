{"ast":null,"code":"'use strict';\n\nvar colorScaleAttrs = require('../../components/colorscale/attributes');\n\nvar axisHoverFormat = require('../../plots/hoverformat_attributes');\n\nvar hovertemplateAttrs = require('../../plots/template_attributes').hovertemplateAttrs;\n\nvar mesh3dAttrs = require('../mesh3d/attributes');\n\nvar baseAttrs = require('../../plots/attributes');\n\nvar extendFlat = require('../../lib/extend').extendFlat;\n\nvar attrs = {\n  x: {\n    valType: 'data_array',\n    editType: 'calc+clearAxisTypes',\n    description: 'Sets the x coordinates of the vector field.'\n  },\n  y: {\n    valType: 'data_array',\n    editType: 'calc+clearAxisTypes',\n    description: 'Sets the y coordinates of the vector field.'\n  },\n  z: {\n    valType: 'data_array',\n    editType: 'calc+clearAxisTypes',\n    description: 'Sets the z coordinates of the vector field.'\n  },\n  u: {\n    valType: 'data_array',\n    editType: 'calc',\n    description: 'Sets the x components of the vector field.'\n  },\n  v: {\n    valType: 'data_array',\n    editType: 'calc',\n    description: 'Sets the y components of the vector field.'\n  },\n  w: {\n    valType: 'data_array',\n    editType: 'calc',\n    description: 'Sets the z components of the vector field.'\n  },\n  starts: {\n    x: {\n      valType: 'data_array',\n      editType: 'calc',\n      description: ['Sets the x components of the starting position of the streamtubes'].join(' ')\n    },\n    y: {\n      valType: 'data_array',\n      editType: 'calc',\n      description: ['Sets the y components of the starting position of the streamtubes'].join(' ')\n    },\n    z: {\n      valType: 'data_array',\n      editType: 'calc',\n      description: ['Sets the z components of the starting position of the streamtubes'].join(' ')\n    },\n    editType: 'calc'\n  },\n  maxdisplayed: {\n    valType: 'integer',\n    min: 0,\n    dflt: 1000,\n    editType: 'calc',\n    description: ['The maximum number of displayed segments in a streamtube.'].join(' ')\n  },\n  // TODO\n  //\n  // Should add 'absolute' (like cone traces have), but currently gl-streamtube3d's\n  // `absoluteTubeSize` doesn't behave well enough for our needs.\n  //\n  // 'fixed' would be a nice addition to plot stream 'lines', see\n  // https://github.com/plotly/plotly.js/commit/812be20750e21e0a1831975001c248d365850f73#r29129877\n  //\n  // sizemode: {\n  //     valType: 'enumerated',\n  //     values: ['scaled', 'absolute', 'fixed'],\n  //     dflt: 'scaled',\n  //     editType: 'calc',\n  //     description: [\n  //         'Sets the mode by which the streamtubes are sized.'\n  //     ].join(' ')\n  // },\n  sizeref: {\n    valType: 'number',\n    editType: 'calc',\n    min: 0,\n    dflt: 1,\n    description: ['The scaling factor for the streamtubes.', 'The default is 1, which avoids two max divergence tubes from touching', 'at adjacent starting positions.'].join(' ')\n  },\n  text: {\n    valType: 'string',\n    dflt: '',\n    editType: 'calc',\n    description: ['Sets a text element associated with this trace.', 'If trace `hoverinfo` contains a *text* flag,', 'this text element will be seen in all hover labels.', 'Note that streamtube traces do not support array `text` values.'].join(' ')\n  },\n  hovertext: {\n    valType: 'string',\n    dflt: '',\n    editType: 'calc',\n    description: 'Same as `text`.'\n  },\n  hovertemplate: hovertemplateAttrs({\n    editType: 'calc'\n  }, {\n    keys: ['tubex', 'tubey', 'tubez', 'tubeu', 'tubev', 'tubew', 'norm', 'divergence']\n  }),\n  uhoverformat: axisHoverFormat('u', 1),\n  vhoverformat: axisHoverFormat('v', 1),\n  whoverformat: axisHoverFormat('w', 1),\n  xhoverformat: axisHoverFormat('x'),\n  yhoverformat: axisHoverFormat('y'),\n  zhoverformat: axisHoverFormat('z'),\n  showlegend: extendFlat({}, baseAttrs.showlegend, {\n    dflt: false\n  })\n};\nextendFlat(attrs, colorScaleAttrs('', {\n  colorAttr: 'u/v/w norm',\n  showScaleDflt: true,\n  editTypeOverride: 'calc'\n}));\nvar fromMesh3d = ['opacity', 'lightposition', 'lighting'];\nfromMesh3d.forEach(function (k) {\n  attrs[k] = mesh3dAttrs[k];\n});\nattrs.hoverinfo = extendFlat({}, baseAttrs.hoverinfo, {\n  editType: 'calc',\n  flags: ['x', 'y', 'z', 'u', 'v', 'w', 'norm', 'divergence', 'text', 'name'],\n  dflt: 'x+y+z+norm+text+name'\n});\nattrs.transforms = undefined;\nmodule.exports = attrs;","map":{"version":3,"sources":["C:/Users/mikke/VSC/fantasy-django-react/fantasy-django/fantasy-react-app/node_modules/plotly.js/src/traces/streamtube/attributes.js"],"names":["colorScaleAttrs","require","axisHoverFormat","hovertemplateAttrs","mesh3dAttrs","baseAttrs","extendFlat","attrs","x","valType","editType","description","y","z","u","v","w","starts","join","maxdisplayed","min","dflt","sizeref","text","hovertext","hovertemplate","keys","uhoverformat","vhoverformat","whoverformat","xhoverformat","yhoverformat","zhoverformat","showlegend","colorAttr","showScaleDflt","editTypeOverride","fromMesh3d","forEach","k","hoverinfo","flags","transforms","undefined","module","exports"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nvar colorScaleAttrs = require('../../components/colorscale/attributes');\r\nvar axisHoverFormat = require('../../plots/hoverformat_attributes');\r\nvar hovertemplateAttrs = require('../../plots/template_attributes').hovertemplateAttrs;\r\nvar mesh3dAttrs = require('../mesh3d/attributes');\r\nvar baseAttrs = require('../../plots/attributes');\r\n\r\nvar extendFlat = require('../../lib/extend').extendFlat;\r\n\r\nvar attrs = {\r\n    x: {\r\n        valType: 'data_array',\r\n        editType: 'calc+clearAxisTypes',\r\n        description: 'Sets the x coordinates of the vector field.'\r\n    },\r\n    y: {\r\n        valType: 'data_array',\r\n        editType: 'calc+clearAxisTypes',\r\n        description: 'Sets the y coordinates of the vector field.'\r\n    },\r\n    z: {\r\n        valType: 'data_array',\r\n        editType: 'calc+clearAxisTypes',\r\n        description: 'Sets the z coordinates of the vector field.'\r\n    },\r\n\r\n    u: {\r\n        valType: 'data_array',\r\n        editType: 'calc',\r\n        description: 'Sets the x components of the vector field.'\r\n    },\r\n    v: {\r\n        valType: 'data_array',\r\n        editType: 'calc',\r\n        description: 'Sets the y components of the vector field.'\r\n    },\r\n    w: {\r\n        valType: 'data_array',\r\n        editType: 'calc',\r\n        description: 'Sets the z components of the vector field.'\r\n    },\r\n\r\n    starts: {\r\n        x: {\r\n            valType: 'data_array',\r\n            editType: 'calc',\r\n            description: [\r\n                'Sets the x components of the starting position of the streamtubes',\r\n            ].join(' ')\r\n        },\r\n        y: {\r\n            valType: 'data_array',\r\n            editType: 'calc',\r\n            description: [\r\n                'Sets the y components of the starting position of the streamtubes',\r\n            ].join(' ')\r\n        },\r\n        z: {\r\n            valType: 'data_array',\r\n            editType: 'calc',\r\n            description: [\r\n                'Sets the z components of the starting position of the streamtubes',\r\n            ].join(' ')\r\n        },\r\n        editType: 'calc'\r\n    },\r\n\r\n    maxdisplayed: {\r\n        valType: 'integer',\r\n        min: 0,\r\n        dflt: 1000,\r\n        editType: 'calc',\r\n        description: [\r\n            'The maximum number of displayed segments in a streamtube.'\r\n        ].join(' ')\r\n    },\r\n\r\n    // TODO\r\n    //\r\n    // Should add 'absolute' (like cone traces have), but currently gl-streamtube3d's\r\n    // `absoluteTubeSize` doesn't behave well enough for our needs.\r\n    //\r\n    // 'fixed' would be a nice addition to plot stream 'lines', see\r\n    // https://github.com/plotly/plotly.js/commit/812be20750e21e0a1831975001c248d365850f73#r29129877\r\n    //\r\n    // sizemode: {\r\n    //     valType: 'enumerated',\r\n    //     values: ['scaled', 'absolute', 'fixed'],\r\n    //     dflt: 'scaled',\r\n    //     editType: 'calc',\r\n    //     description: [\r\n    //         'Sets the mode by which the streamtubes are sized.'\r\n    //     ].join(' ')\r\n    // },\r\n\r\n    sizeref: {\r\n        valType: 'number',\r\n        editType: 'calc',\r\n        min: 0,\r\n        dflt: 1,\r\n        description: [\r\n            'The scaling factor for the streamtubes.',\r\n            'The default is 1, which avoids two max divergence tubes from touching',\r\n            'at adjacent starting positions.'\r\n        ].join(' ')\r\n    },\r\n\r\n    text: {\r\n        valType: 'string',\r\n        dflt: '',\r\n        editType: 'calc',\r\n        description: [\r\n            'Sets a text element associated with this trace.',\r\n            'If trace `hoverinfo` contains a *text* flag,',\r\n            'this text element will be seen in all hover labels.',\r\n            'Note that streamtube traces do not support array `text` values.'\r\n        ].join(' ')\r\n    },\r\n    hovertext: {\r\n        valType: 'string',\r\n        dflt: '',\r\n        editType: 'calc',\r\n        description: 'Same as `text`.'\r\n    },\r\n    hovertemplate: hovertemplateAttrs({editType: 'calc'}, {\r\n        keys: [\r\n            'tubex', 'tubey', 'tubez',\r\n            'tubeu', 'tubev', 'tubew',\r\n            'norm', 'divergence'\r\n        ]\r\n    }),\r\n    uhoverformat: axisHoverFormat('u', 1),\r\n    vhoverformat: axisHoverFormat('v', 1),\r\n    whoverformat: axisHoverFormat('w', 1),\r\n    xhoverformat: axisHoverFormat('x'),\r\n    yhoverformat: axisHoverFormat('y'),\r\n    zhoverformat: axisHoverFormat('z'),\r\n\r\n    showlegend: extendFlat({}, baseAttrs.showlegend, {dflt: false})\r\n};\r\n\r\nextendFlat(attrs, colorScaleAttrs('', {\r\n    colorAttr: 'u/v/w norm',\r\n    showScaleDflt: true,\r\n    editTypeOverride: 'calc'\r\n}));\r\n\r\nvar fromMesh3d = ['opacity', 'lightposition', 'lighting'];\r\nfromMesh3d.forEach(function(k) {\r\n    attrs[k] = mesh3dAttrs[k];\r\n});\r\n\r\nattrs.hoverinfo = extendFlat({}, baseAttrs.hoverinfo, {\r\n    editType: 'calc',\r\n    flags: ['x', 'y', 'z', 'u', 'v', 'w', 'norm', 'divergence', 'text', 'name'],\r\n    dflt: 'x+y+z+norm+text+name'\r\n});\r\n\r\nattrs.transforms = undefined;\r\n\r\nmodule.exports = attrs;\r\n"]},"metadata":{},"sourceType":"script"}