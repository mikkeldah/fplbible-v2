{"ast":null,"code":"'use strict'; // ASCEND: chop off the last nesting level - either [<n>] or .<key> - to ascend\n// the attribute tree. the remaining attrString is in match[1]\n\nvar ASCEND = /^(.*)(\\.[^\\.\\[\\]]+|\\[\\d\\])$/; // SIMPLEATTR: is this an un-nested attribute? (no dots or brackets)\n\nvar SIMPLEATTR = /^[^\\.\\[\\]]+$/;\n/*\r\n * calculate a relative attribute string, similar to a relative path\r\n *\r\n * @param {string} baseAttr:\r\n *   an attribute string, such as 'annotations[3].x'. The \"current location\"\r\n *   is the attribute string minus the last component ('annotations[3]')\r\n * @param {string} relativeAttr:\r\n *   a route to the desired attribute string, using '^' to ascend\r\n *\r\n * @return {string} attrString:\r\n *   for example:\r\n *     relativeAttr('annotations[3].x', 'y') = 'annotations[3].y'\r\n *     relativeAttr('annotations[3].x', '^[2].z') = 'annotations[2].z'\r\n *     relativeAttr('annotations[3].x', '^^margin') = 'margin'\r\n *     relativeAttr('annotations[3].x', '^^margin.r') = 'margin.r'\r\n */\n\nmodule.exports = function (baseAttr, relativeAttr) {\n  while (relativeAttr) {\n    var match = baseAttr.match(ASCEND);\n    if (match) baseAttr = match[1];else if (baseAttr.match(SIMPLEATTR)) baseAttr = '';else throw new Error('bad relativeAttr call:' + [baseAttr, relativeAttr]);\n    if (relativeAttr.charAt(0) === '^') relativeAttr = relativeAttr.slice(1);else break;\n  }\n\n  if (baseAttr && relativeAttr.charAt(0) !== '[') {\n    return baseAttr + '.' + relativeAttr;\n  }\n\n  return baseAttr + relativeAttr;\n};","map":{"version":3,"sources":["C:/Users/mikke/VSC/fantasy-django-react/fantasy-django/fantasy-react-app/node_modules/plotly.js/src/lib/relative_attr.js"],"names":["ASCEND","SIMPLEATTR","module","exports","baseAttr","relativeAttr","match","Error","charAt","slice"],"mappings":"AAAA,a,CAEA;AACA;;AACA,IAAIA,MAAM,GAAG,6BAAb,C,CAEA;;AACA,IAAIC,UAAU,GAAG,cAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAC,MAAM,CAACC,OAAP,GAAiB,UAASC,QAAT,EAAmBC,YAAnB,EAAiC;AAC9C,SAAMA,YAAN,EAAoB;AAChB,QAAIC,KAAK,GAAGF,QAAQ,CAACE,KAAT,CAAeN,MAAf,CAAZ;AAEA,QAAGM,KAAH,EAAUF,QAAQ,GAAGE,KAAK,CAAC,CAAD,CAAhB,CAAV,KACK,IAAGF,QAAQ,CAACE,KAAT,CAAeL,UAAf,CAAH,EAA+BG,QAAQ,GAAG,EAAX,CAA/B,KACA,MAAM,IAAIG,KAAJ,CAAU,2BAA2B,CAACH,QAAD,EAAWC,YAAX,CAArC,CAAN;AAEL,QAAGA,YAAY,CAACG,MAAb,CAAoB,CAApB,MAA2B,GAA9B,EAAmCH,YAAY,GAAGA,YAAY,CAACI,KAAb,CAAmB,CAAnB,CAAf,CAAnC,KACK;AACR;;AAED,MAAGL,QAAQ,IAAIC,YAAY,CAACG,MAAb,CAAoB,CAApB,MAA2B,GAA1C,EAA+C;AAC3C,WAAOJ,QAAQ,GAAG,GAAX,GAAiBC,YAAxB;AACH;;AACD,SAAOD,QAAQ,GAAGC,YAAlB;AACH,CAhBD","sourcesContent":["'use strict';\r\n\r\n// ASCEND: chop off the last nesting level - either [<n>] or .<key> - to ascend\r\n// the attribute tree. the remaining attrString is in match[1]\r\nvar ASCEND = /^(.*)(\\.[^\\.\\[\\]]+|\\[\\d\\])$/;\r\n\r\n// SIMPLEATTR: is this an un-nested attribute? (no dots or brackets)\r\nvar SIMPLEATTR = /^[^\\.\\[\\]]+$/;\r\n\r\n/*\r\n * calculate a relative attribute string, similar to a relative path\r\n *\r\n * @param {string} baseAttr:\r\n *   an attribute string, such as 'annotations[3].x'. The \"current location\"\r\n *   is the attribute string minus the last component ('annotations[3]')\r\n * @param {string} relativeAttr:\r\n *   a route to the desired attribute string, using '^' to ascend\r\n *\r\n * @return {string} attrString:\r\n *   for example:\r\n *     relativeAttr('annotations[3].x', 'y') = 'annotations[3].y'\r\n *     relativeAttr('annotations[3].x', '^[2].z') = 'annotations[2].z'\r\n *     relativeAttr('annotations[3].x', '^^margin') = 'margin'\r\n *     relativeAttr('annotations[3].x', '^^margin.r') = 'margin.r'\r\n */\r\nmodule.exports = function(baseAttr, relativeAttr) {\r\n    while(relativeAttr) {\r\n        var match = baseAttr.match(ASCEND);\r\n\r\n        if(match) baseAttr = match[1];\r\n        else if(baseAttr.match(SIMPLEATTR)) baseAttr = '';\r\n        else throw new Error('bad relativeAttr call:' + [baseAttr, relativeAttr]);\r\n\r\n        if(relativeAttr.charAt(0) === '^') relativeAttr = relativeAttr.slice(1);\r\n        else break;\r\n    }\r\n\r\n    if(baseAttr && relativeAttr.charAt(0) !== '[') {\r\n        return baseAttr + '.' + relativeAttr;\r\n    }\r\n    return baseAttr + relativeAttr;\r\n};\r\n"]},"metadata":{},"sourceType":"script"}