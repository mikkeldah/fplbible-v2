{"ast":null,"code":"module.exports = perspective;\n/**\r\n * Generates a perspective projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nfunction perspective(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf = 1 / (near - far);\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 2 * far * near * nf;\n  out[15] = 0;\n  return out;\n}\n\n;","map":{"version":3,"sources":["C:/Users/mikke/VSC/fantasy-django-react/fantasy-django/fantasy-react-app/node_modules/gl-mat4/perspective.js"],"names":["module","exports","perspective","out","fovy","aspect","near","far","f","Math","tan","nf"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiBC,WAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASA,WAAT,CAAqBC,GAArB,EAA0BC,IAA1B,EAAgCC,MAAhC,EAAwCC,IAAxC,EAA8CC,GAA9C,EAAmD;AAC/C,MAAIC,CAAC,GAAG,MAAMC,IAAI,CAACC,GAAL,CAASN,IAAI,GAAG,CAAhB,CAAd;AAAA,MACIO,EAAE,GAAG,KAAKL,IAAI,GAAGC,GAAZ,CADT;AAEAJ,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASK,CAAC,GAAGH,MAAb;AACAF,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAAT;AACAA,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAAT;AACAA,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAAT;AACAA,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAAT;AACAA,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASK,CAAT;AACAL,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAAT;AACAA,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAAT;AACAA,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAAT;AACAA,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAAT;AACAA,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAU,CAACI,GAAG,GAAGD,IAAP,IAAeK,EAAzB;AACAR,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAU,CAAC,CAAX;AACAA,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAU,CAAV;AACAA,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAU,CAAV;AACAA,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAW,IAAII,GAAJ,GAAUD,IAAX,GAAmBK,EAA7B;AACAR,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAU,CAAV;AACA,SAAOA,GAAP;AACH;;AAAA","sourcesContent":["module.exports = perspective;\r\n\r\n/**\r\n * Generates a perspective projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\r\nfunction perspective(out, fovy, aspect, near, far) {\r\n    var f = 1.0 / Math.tan(fovy / 2),\r\n        nf = 1 / (near - far);\r\n    out[0] = f / aspect;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[4] = 0;\r\n    out[5] = f;\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n    out[8] = 0;\r\n    out[9] = 0;\r\n    out[10] = (far + near) * nf;\r\n    out[11] = -1;\r\n    out[12] = 0;\r\n    out[13] = 0;\r\n    out[14] = (2 * far * near) * nf;\r\n    out[15] = 0;\r\n    return out;\r\n};"]},"metadata":{},"sourceType":"script"}